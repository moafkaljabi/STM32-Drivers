
10_esp82xx_interactive_webserver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c8c  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c48  08003c48  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c48  08003c48  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c48  08003c48  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c48  08003c48  00013c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  2000007c  08003ccc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08003ccc  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003de4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c88  00000000  00000000  00023e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00024b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00024d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f700  00000000  00000000  00024f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003030  00000000  00000000  00034660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005496b  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008bffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bb0  00000000  00000000  0008c050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001fa4 	.word	0x08001fa4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08001fa4 	.word	0x08001fa4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <circular_buffer_init>:
circular_buffer *_rx_buffer2;
circular_buffer *_tx_buffer2;


void circular_buffer_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Initial buffers*/
	_rx_buffer1 = &rx_buffer1;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <circular_buffer_init+0x40>)
 80002b6:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <circular_buffer_init+0x44>)
 80002b8:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <circular_buffer_init+0x48>)
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <circular_buffer_init+0x4c>)
 80002be:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <circular_buffer_init+0x50>)
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <circular_buffer_init+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <circular_buffer_init+0x58>)
 80002c8:	4a10      	ldr	r2, [pc, #64]	; (800030c <circular_buffer_init+0x5c>)
 80002ca:	601a      	str	r2, [r3, #0]

	/*Initial UART interrupts*/
	USART1->CR1 |=CR1_RXNEIE;  				/*esp_uart*/
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <circular_buffer_init+0x60>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <circular_buffer_init+0x60>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=CR1_RXNEIE;  				/*debug_uart*/
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <circular_buffer_init+0x64>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <circular_buffer_init+0x64>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	60d3      	str	r3, [r2, #12]


}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	200008cc 	.word	0x200008cc
 80002f4:	2000009c 	.word	0x2000009c
 80002f8:	200008d0 	.word	0x200008d0
 80002fc:	200002a4 	.word	0x200002a4
 8000300:	200008d4 	.word	0x200008d4
 8000304:	200004ac 	.word	0x200004ac
 8000308:	200008c8 	.word	0x200008c8
 800030c:	200006b4 	.word	0x200006b4
 8000310:	40011000 	.word	0x40011000
 8000314:	40004400 	.word	0x40004400

08000318 <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	6039      	str	r1, [r7, #0]
 8000322:	71fb      	strb	r3, [r7, #7]
	 int loc =  (uint32_t)(buffer->head +1)% UART_BUFFER_SIZE;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800032a:	3301      	adds	r3, #1
 800032c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000330:	60fb      	str	r3, [r7, #12]

	/*Check if no overflow will occur*/

	 if(loc != buffer->tail){
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	429a      	cmp	r2, r3
 800033c:	d009      	beq.n	8000352 <buff_store_char+0x3a>
		 /*Store character*/
		 buffer->buffer[buffer->head]  = c ;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	79f9      	ldrb	r1, [r7, #7]
 8000348:	54d1      	strb	r1, [r2, r3]
		 /*Update head*/
		 buffer->head = loc;
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	 }
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <find_str>:


int8_t find_str(char *str2, char *str1)
{
 800035e:	b480      	push	{r7}
 8000360:	b087      	sub	sp, #28
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
  int l, i, j;
  for (l = 0; str2[l] != '\0'; l++){}
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e002      	b.n	8000374 <find_str+0x16>
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	3301      	adds	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1f6      	bne.n	800036e <find_str+0x10>

   for (i = 0, j = 0; str1[i] != '\0' && str2[j] != '\0'; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	e012      	b.n	80003b0 <find_str+0x52>
   {
       if (str1[i] == str2[j])
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	4413      	add	r3, r2
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	440b      	add	r3, r1
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d103      	bne.n	80003a6 <find_str+0x48>
       {
           j++;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	3301      	adds	r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	e001      	b.n	80003aa <find_str+0x4c>
       }
       else
       {
           j = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
   for (i = 0, j = 0; str1[i] != '\0' && str2[j] != '\0'; i++)
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	3301      	adds	r3, #1
 80003ae:	613b      	str	r3, [r7, #16]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	4413      	add	r3, r2
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <find_str+0x6a>
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1e0      	bne.n	800038a <find_str+0x2c>
       }
   }

   if (j == l)
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d101      	bne.n	80003d4 <find_str+0x76>
   {

       return 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	e001      	b.n	80003d8 <find_str+0x7a>
   }
   else
   {
       return -1;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295

   }

}
 80003d8:	4618      	mov	r0, r3
 80003da:	371c      	adds	r7, #28
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <buffer_clear>:


void buffer_clear(portType uart)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <buffer_clear+0x5c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d10c      	bne.n	8000412 <buffer_clear+0x2e>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer1->buffer,'\0',UART_BUFFER_SIZE);
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <buffer_clear+0x60>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f998 	bl	8001738 <memset>
		_rx_buffer1->head = 0 ;
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <buffer_clear+0x60>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	if(uart == debug_port )
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <buffer_clear+0x64>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	79fa      	ldrb	r2, [r7, #7]
 8000418:	429a      	cmp	r2, r3
 800041a:	d10c      	bne.n	8000436 <buffer_clear+0x52>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer2->buffer,'\0',UART_BUFFER_SIZE);
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <buffer_clear+0x68>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f001 f986 	bl	8001738 <memset>
		_rx_buffer2->head = 0 ;
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <buffer_clear+0x68>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2200      	movs	r2, #0
 8000432:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000
 8000444:	200008cc 	.word	0x200008cc
 8000448:	20000098 	.word	0x20000098
 800044c:	200008d4 	.word	0x200008d4

08000450 <buffer_peek>:


int32_t buffer_peek(portType uart)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <buffer_peek+0x84>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	79fa      	ldrb	r2, [r7, #7]
 8000460:	429a      	cmp	r2, r3
 8000462:	d114      	bne.n	800048e <buffer_peek+0x3e>
	{
	   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <buffer_peek+0x88>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <buffer_peek+0x88>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000474:	429a      	cmp	r2, r3
 8000476:	d102      	bne.n	800047e <buffer_peek+0x2e>
	   {
		   return -1;
 8000478:	f04f 33ff 	mov.w	r3, #4294967295
 800047c:	e023      	b.n	80004c6 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer1->buffer[_rx_buffer1->tail];
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <buffer_peek+0x88>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <buffer_peek+0x88>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800048a:	5cd3      	ldrb	r3, [r2, r3]
 800048c:	e01b      	b.n	80004c6 <buffer_peek+0x76>
	   }
	}

	else if(uart == debug_port )
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <buffer_peek+0x8c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	429a      	cmp	r2, r3
 8000496:	d114      	bne.n	80004c2 <buffer_peek+0x72>
	{
	   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <buffer_peek+0x90>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <buffer_peek+0x90>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d102      	bne.n	80004b2 <buffer_peek+0x62>
	   {
		   return -1;
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	e009      	b.n	80004c6 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer2->buffer[_rx_buffer2->tail];
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <buffer_peek+0x90>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <buffer_peek+0x90>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004be:	5cd3      	ldrb	r3, [r2, r3]
 80004c0:	e001      	b.n	80004c6 <buffer_peek+0x76>
	   }
	}

	else
	{
		 return -1;
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000
 80004d8:	200008cc 	.word	0x200008cc
 80004dc:	20000098 	.word	0x20000098
 80004e0:	200008d4 	.word	0x200008d4

080004e4 <buffer_read>:
int32_t buffer_read(portType uart)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <buffer_read+0xb8>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d121      	bne.n	800053c <buffer_read+0x58>
	{
		   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <buffer_read+0xbc>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <buffer_read+0xbc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000508:	429a      	cmp	r2, r3
 800050a:	d102      	bne.n	8000512 <buffer_read+0x2e>
			   {
				   return -1;
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	e03d      	b.n	800058e <buffer_read+0xaa>
			   }
		   else
		   {
			  unsigned char c =  _rx_buffer1->buffer[_rx_buffer1->tail];
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <buffer_read+0xbc>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <buffer_read+0xbc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800051e:	5cd3      	ldrb	r3, [r2, r3]
 8000520:	73bb      	strb	r3, [r7, #14]
			  _rx_buffer1->tail =  (uint32_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <buffer_read+0xbc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <buffer_read+0xbc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000534:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			  return c;
 8000538:	7bbb      	ldrb	r3, [r7, #14]
 800053a:	e028      	b.n	800058e <buffer_read+0xaa>
		   }
	}

	else if(uart == debug_port )
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <buffer_read+0xc0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	429a      	cmp	r2, r3
 8000544:	d121      	bne.n	800058a <buffer_read+0xa6>
	{
		   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <buffer_read+0xc4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <buffer_read+0xc4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000556:	429a      	cmp	r2, r3
 8000558:	d102      	bne.n	8000560 <buffer_read+0x7c>
			 {
				   return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e016      	b.n	800058e <buffer_read+0xaa>
			 }
		   else
		   {
				  unsigned char c =  _rx_buffer2->buffer[_rx_buffer2->tail];
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <buffer_read+0xc4>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <buffer_read+0xc4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800056c:	5cd3      	ldrb	r3, [r2, r3]
 800056e:	73fb      	strb	r3, [r7, #15]
				  _rx_buffer2->tail =  (uint32_t)(_rx_buffer2->tail +1)%UART_BUFFER_SIZE;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <buffer_read+0xc4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <buffer_read+0xc4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
				  return c;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	e001      	b.n	800058e <buffer_read+0xaa>
		   }
	}

	else
	{
		 return -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	200008cc 	.word	0x200008cc
 80005a4:	20000098 	.word	0x20000098
 80005a8:	200008d4 	.word	0x200008d4

080005ac <buffer_write>:

void buffer_write(unsigned char c, portType uart )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	if(uart == esp82xx_port )
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <buffer_write+0xbc>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d122      	bne.n	800060c <buffer_write+0x60>
	{
		int loc =  (_tx_buffer1->head +1)%UART_BUFFER_SIZE;
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <buffer_write+0xc0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ce:	3301      	adds	r3, #1
 80005d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005d4:	60fb      	str	r3, [r7, #12]

		while(loc == _tx_buffer1->tail ){}
 80005d6:	bf00      	nop
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <buffer_write+0xc0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d0f8      	beq.n	80005d8 <buffer_write+0x2c>

		_tx_buffer1->buffer[_tx_buffer1->head]=  c;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <buffer_write+0xc0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <buffer_write+0xc0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f2:	79f9      	ldrb	r1, [r7, #7]
 80005f4:	54d1      	strb	r1, [r2, r3]

		_tx_buffer1->head =  loc;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <buffer_write+0xc0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART1->CR1 |= CR1_TXEIE;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <buffer_write+0xc4>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <buffer_write+0xc4>)
 8000606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060a:	60d3      	str	r3, [r2, #12]

	}

	if(uart == debug_port)
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <buffer_write+0xc8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	79ba      	ldrb	r2, [r7, #6]
 8000612:	429a      	cmp	r2, r3
 8000614:	d122      	bne.n	800065c <buffer_write+0xb0>
	{
		int loc =  (_tx_buffer2->head +1)%UART_BUFFER_SIZE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <buffer_write+0xcc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800061e:	3301      	adds	r3, #1
 8000620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000624:	60bb      	str	r3, [r7, #8]

		while(loc == _tx_buffer2->tail ){}
 8000626:	bf00      	nop
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <buffer_write+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	429a      	cmp	r2, r3
 8000634:	d0f8      	beq.n	8000628 <buffer_write+0x7c>

		_tx_buffer2->buffer[_tx_buffer2->head]=  c;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <buffer_write+0xcc>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <buffer_write+0xcc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000642:	79f9      	ldrb	r1, [r7, #7]
 8000644:	54d1      	strb	r1, [r2, r3]

		_tx_buffer2->head =  loc;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <buffer_write+0xcc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART2->CR1 |= CR1_TXEIE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <buffer_write+0xd0>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <buffer_write+0xd0>)
 8000656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065a:	60d3      	str	r3, [r2, #12]

	  }
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000000 	.word	0x20000000
 800066c:	200008d0 	.word	0x200008d0
 8000670:	40011000 	.word	0x40011000
 8000674:	20000098 	.word	0x20000098
 8000678:	200008c8 	.word	0x200008c8
 800067c:	40004400 	.word	0x40004400

08000680 <is_data>:


int32_t is_data(portType uart)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	if(uart ==  esp82xx_port)
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <is_data+0x78>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	429a      	cmp	r2, r3
 8000692:	d111      	bne.n	80006b8 <is_data+0x38>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <is_data+0x7c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <is_data+0x7c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006b6:	e018      	b.n	80006ea <is_data+0x6a>
	}
	else if(uart ==  debug_port)
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <is_data+0x80>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	79fa      	ldrb	r2, [r7, #7]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d111      	bne.n	80006e6 <is_data+0x66>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <is_data+0x84>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <is_data+0x84>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	b29b      	uxth	r3, r3
 80006da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006de:	b29b      	uxth	r3, r3
 80006e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006e4:	e001      	b.n	80006ea <is_data+0x6a>

	}
	else
	{
		return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200008cc 	.word	0x200008cc
 8000700:	20000098 	.word	0x20000098
 8000704:	200008d4 	.word	0x200008d4

08000708 <get_first_char>:
/*Function to find the position of the first character of a string in the
 * the buffer*/


static void get_first_char(char *str)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*Make sure there is data in the buffer*/
	while(!is_data(esp82xx_port)){}
 8000710:	bf00      	nop
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <get_first_char+0x68>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffb2 	bl	8000680 <is_data>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f7      	beq.n	8000712 <get_first_char+0xa>

	while(buffer_peek(esp82xx_port)!= str[0]){
 8000722:	e016      	b.n	8000752 <get_first_char+0x4a>

		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <get_first_char+0x6c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800072c:	b29b      	uxth	r3, r3
 800072e:	3301      	adds	r3, #1
 8000730:	b29b      	uxth	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <get_first_char+0x6c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800073c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		while(!is_data(esp82xx_port)){}
 8000740:	bf00      	nop
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <get_first_char+0x68>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <is_data>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f7      	beq.n	8000742 <get_first_char+0x3a>
	while(buffer_peek(esp82xx_port)!= str[0]){
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <get_first_char+0x68>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fe7a 	bl	8000450 <buffer_peek>
 800075c:	4602      	mov	r2, r0
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d1de      	bne.n	8000724 <get_first_char+0x1c>

	}
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	200008cc 	.word	0x200008cc

08000778 <is_response>:


int8_t is_response(char *str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	int curr_pos = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
	int len = strlen(str);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd35 	bl	80001f4 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	60bb      	str	r3, [r7, #8]

	while( curr_pos != len)
 800078e:	e028      	b.n	80007e2 <is_response+0x6a>
	{
		curr_pos  = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
		get_first_char(str);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ffb7 	bl	8000708 <get_first_char>

		while(buffer_peek(esp82xx_port) == str[curr_pos])
 800079a:	e016      	b.n	80007ca <is_response+0x52>
		{
			curr_pos++;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]

			buffer_read(esp82xx_port);
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <is_response+0x8c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe9c 	bl	80004e4 <buffer_read>

			if(curr_pos ==  len)
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d101      	bne.n	80007b8 <is_response+0x40>
			{
				/*success*/
				return 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e020      	b.n	80007fa <is_response+0x82>
			}

			while(!is_data(esp82xx_port)){}
 80007b8:	bf00      	nop
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <is_response+0x8c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff5e 	bl	8000680 <is_data>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f7      	beq.n	80007ba <is_response+0x42>
		while(buffer_peek(esp82xx_port) == str[curr_pos])
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <is_response+0x8c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe3e 	bl	8000450 <buffer_peek>
 80007d4:	4601      	mov	r1, r0
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d0dc      	beq.n	800079c <is_response+0x24>
	while( curr_pos != len)
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d1d2      	bne.n	8000790 <is_response+0x18>

		}

	}

	if(curr_pos  == len)
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d101      	bne.n	80007f6 <is_response+0x7e>
	{
		/*success*/
	   return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e001      	b.n	80007fa <is_response+0x82>
	}
	else
	{
	   return -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000

08000808 <get_next_strs>:

int8_t get_next_strs(char *str,uint8_t num_of_chars, char *dest_buffer)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	460b      	mov	r3, r1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	72fb      	strb	r3, [r7, #11]
	/*Make sure the string exists*/
	while(!is_response(str)){}
 8000816:	bf00      	nop
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f7ff ffad 	bl	8000778 <is_response>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0f9      	beq.n	8000818 <get_next_strs+0x10>

	for(int indx=0; indx < num_of_chars ; indx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e016      	b.n	8000858 <get_next_strs+0x50>
	{
		while(!is_data(esp82xx_port)){}
 800082a:	bf00      	nop
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <get_next_strs+0x64>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff25 	bl	8000680 <is_data>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f7      	beq.n	800082c <get_next_strs+0x24>
		dest_buffer[indx] =  buffer_read(esp82xx_port);
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <get_next_strs+0x64>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fe4f 	bl	80004e4 <buffer_read>
 8000846:	4601      	mov	r1, r0
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	b2ca      	uxtb	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
	for(int indx=0; indx < num_of_chars ; indx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	7afb      	ldrb	r3, [r7, #11]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbe4      	blt.n	800082a <get_next_strs+0x22>

	}

	return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <buffer_send_string>:



void buffer_send_string(const char *s, portType uart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	while(*s != '\0')
 800087c:	e008      	b.n	8000890 <buffer_send_string+0x20>
	{
		buffer_write(*s++,uart);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe8e 	bl	80005ac <buffer_write>
	while(*s != '\0')
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f2      	bne.n	800087e <buffer_send_string+0xe>
	}
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <process_copy>:

static int8_t process_copy(char * str, char * dest_buffer, int start_pos)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	int curr_pos = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
	int len =  strlen(str);
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff fc9d 	bl	80001f4 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	617b      	str	r3, [r7, #20]
	int indx = start_pos;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	61bb      	str	r3, [r7, #24]

	while(!is_data(esp82xx_port)){}
 80008c2:	bf00      	nop
 80008c4:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <process_copy+0x11c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fed9 	bl	8000680 <is_data>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f7      	beq.n	80008c4 <process_copy+0x20>

	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 80008d4:	e024      	b.n	8000920 <process_copy+0x7c>
	{
		dest_buffer[indx] =  _rx_buffer1->buffer[_rx_buffer1->tail];
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <process_copy+0x120>)
 80008d8:	6819      	ldr	r1, [r3, #0]
 80008da:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <process_copy+0x120>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	68b8      	ldr	r0, [r7, #8]
 80008e6:	4403      	add	r3, r0
 80008e8:	5c8a      	ldrb	r2, [r1, r2]
 80008ea:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80008ec:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <process_copy+0x120>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3301      	adds	r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <process_copy+0x120>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000904:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	3301      	adds	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]

		while(!is_data(esp82xx_port)){}
 800090e:	bf00      	nop
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <process_copy+0x11c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff feb3 	bl	8000680 <is_data>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f7      	beq.n	8000910 <process_copy+0x6c>
	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <process_copy+0x11c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fd93 	bl	8000450 <buffer_peek>
 800092a:	4601      	mov	r1, r0
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4299      	cmp	r1, r3
 8000936:	d1ce      	bne.n	80008d6 <process_copy+0x32>


	}

	while(buffer_peek(esp82xx_port) == str[curr_pos])
 8000938:	e01f      	b.n	800097a <process_copy+0xd6>
	{
		curr_pos++;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3301      	adds	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
		dest_buffer[indx++] = buffer_read(esp82xx_port);
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <process_copy+0x11c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fdcd 	bl	80004e4 <buffer_read>
 800094a:	4601      	mov	r1, r0
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	61ba      	str	r2, [r7, #24]
 8000952:	461a      	mov	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	b2ca      	uxtb	r2, r1
 800095a:	701a      	strb	r2, [r3, #0]

		if(curr_pos == len){
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	429a      	cmp	r2, r3
 8000962:	d101      	bne.n	8000968 <process_copy+0xc4>

			return 1;
 8000964:	2301      	movs	r3, #1
 8000966:	e027      	b.n	80009b8 <process_copy+0x114>
		}

		while(!is_data(esp82xx_port)){}
 8000968:	bf00      	nop
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <process_copy+0x11c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe86 	bl	8000680 <is_data>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0f7      	beq.n	800096a <process_copy+0xc6>
	while(buffer_peek(esp82xx_port) == str[curr_pos])
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <process_copy+0x11c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd66 	bl	8000450 <buffer_peek>
 8000984:	4601      	mov	r1, r0
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4299      	cmp	r1, r3
 8000990:	d0d3      	beq.n	800093a <process_copy+0x96>

	}

	if(curr_pos != len)
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	429a      	cmp	r2, r3
 8000998:	d006      	beq.n	80009a8 <process_copy+0x104>
	{
		curr_pos = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]

		process_copy(str, dest_buffer, indx);
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff ff7e 	bl	80008a4 <process_copy>

	}

	if(curr_pos  ==  len)
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d101      	bne.n	80009b4 <process_copy+0x110>
	{
		return 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e001      	b.n	80009b8 <process_copy+0x114>
	}
	else
	{
		return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
	}



}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	200008cc 	.word	0x200008cc

080009c8 <copy_up_to_string>:
int8_t copy_up_to_string(char * str, char * dest_buffer)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	/*Process copy*/
	return (process_copy(str,dest_buffer, 0));
 80009d2:	2200      	movs	r2, #0
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff64 	bl	80008a4 <process_copy>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <esp82_uart_callback>:

void esp82_uart_callback(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART1->SR & SR_RXNE) != 0) && ((USART1->CR1 & CR1_RXNEIE) != 0))
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <esp82_uart_callback+0x94>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00f      	beq.n	8000a1a <esp82_uart_callback+0x32>
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <esp82_uart_callback+0x94>)
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <esp82_uart_callback+0x32>
	{
		unsigned char c = USART1->DR;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer1);
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <esp82_uart_callback+0x98>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc7f 	bl	8000318 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART1->SR & SR_TXE) != 0) && ((USART1->CR1 & CR1_TXEIE) != 0))
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d026      	beq.n	8000a74 <esp82_uart_callback+0x8c>
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d020      	beq.n	8000a74 <esp82_uart_callback+0x8c>
	{
		if(tx_buffer1.head  == tx_buffer1.tail)
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d106      	bne.n	8000a50 <esp82_uart_callback+0x68>
		{
			USART1->CR1 &=~CR1_TXEIE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a4c:	60d3      	str	r3, [r2, #12]
			USART1->DR = c;

		}
	}

}
 8000a4e:	e011      	b.n	8000a74 <esp82_uart_callback+0x8c>
			unsigned char c  = tx_buffer1.buffer[tx_buffer1.tail];
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	71bb      	strb	r3, [r7, #6]
			tx_buffer1.tail =  (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a62:	3301      	adds	r3, #1
 8000a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <esp82_uart_callback+0x9c>)
 8000a6a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART1->DR = c;
 8000a6e:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <esp82_uart_callback+0x94>)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	6053      	str	r3, [r2, #4]
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	200008cc 	.word	0x200008cc
 8000a84:	200002a4 	.word	0x200002a4

08000a88 <debug_uart_callback>:

void debug_uart_callback(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART2->SR & SR_RXNE) != 0) && ((USART2->CR1 & CR1_RXNEIE) != 0))
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <debug_uart_callback+0x94>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00f      	beq.n	8000aba <debug_uart_callback+0x32>
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <debug_uart_callback+0x94>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d009      	beq.n	8000aba <debug_uart_callback+0x32>
	{
		unsigned char c = USART2->DR;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <debug_uart_callback+0x94>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer2);
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <debug_uart_callback+0x98>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc2f 	bl	8000318 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART2->SR & SR_TXE) != 0) && ((USART2->CR1 & CR1_TXEIE) != 0))
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <debug_uart_callback+0x94>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d026      	beq.n	8000b14 <debug_uart_callback+0x8c>
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <debug_uart_callback+0x94>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d020      	beq.n	8000b14 <debug_uart_callback+0x8c>
	{
		if(tx_buffer2.head  == tx_buffer2.tail)
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <debug_uart_callback+0x9c>)
 8000ad4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <debug_uart_callback+0x9c>)
 8000ada:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d106      	bne.n	8000af0 <debug_uart_callback+0x68>
		{
			USART2->CR1 &=~CR1_TXEIE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <debug_uart_callback+0x94>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <debug_uart_callback+0x94>)
 8000ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aec:	60d3      	str	r3, [r2, #12]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
			USART2->DR = c;

		}
	}
}
 8000aee:	e011      	b.n	8000b14 <debug_uart_callback+0x8c>
			unsigned char c  = tx_buffer2.buffer[tx_buffer2.tail];
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <debug_uart_callback+0x9c>)
 8000af2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <debug_uart_callback+0x9c>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	71bb      	strb	r3, [r7, #6]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <debug_uart_callback+0x9c>)
 8000afe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000b02:	3301      	adds	r3, #1
 8000b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <debug_uart_callback+0x9c>)
 8000b0a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART2->DR = c;
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <debug_uart_callback+0x94>)
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	6053      	str	r3, [r2, #4]
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	200008d4 	.word	0x200008d4
 8000b24:	200006b4 	.word	0x200006b4

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <debug_uart_init>:
	debug_uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <debug_uart_init+0xe8>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a37      	ldr	r2, [pc, #220]	; (8000c4c <debug_uart_init+0xe8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <debug_uart_init+0xec>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a35      	ldr	r2, [pc, #212]	; (8000c50 <debug_uart_init+0xec>)
 8000b7a:	f023 0310 	bic.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000b80:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <debug_uart_init+0xec>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <debug_uart_init+0xec>)
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <debug_uart_init+0xec>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <debug_uart_init+0xec>)
 8000b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b96:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <debug_uart_init+0xec>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <debug_uart_init+0xec>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba2:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <debug_uart_init+0xec>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <debug_uart_init+0xec>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <debug_uart_init+0xec>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <debug_uart_init+0xec>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <debug_uart_init+0xec>)
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <debug_uart_init+0xec>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <debug_uart_init+0xec>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <debug_uart_init+0xec>)
 8000bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bd2:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <debug_uart_init+0xec>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <debug_uart_init+0xec>)
 8000bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bde:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <debug_uart_init+0xec>)
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <debug_uart_init+0xec>)
 8000be6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <debug_uart_init+0xec>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <debug_uart_init+0xec>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <debug_uart_init+0xec>)
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <debug_uart_init+0xec>)
 8000bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c02:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <debug_uart_init+0xe8>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <debug_uart_init+0xe8>)
 8000c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <debug_uart_init+0xf0>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <debug_uart_init+0xf0>)
 8000c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c1a:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000c1c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <debug_uart_init+0xf4>)
 8000c22:	f000 f8ef 	bl	8000e04 <compute_uart_bd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <debug_uart_init+0xf0>)
 8000c2c:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <debug_uart_init+0xf0>)
 8000c30:	220c      	movs	r2, #12
 8000c32:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 8000c34:	2026      	movs	r0, #38	; 0x26
 8000c36:	f7ff ff77 	bl	8000b28 <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <debug_uart_init+0xf0>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <debug_uart_init+0xf0>)
 8000c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c44:	60d3      	str	r3, [r2, #12]


}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40004400 	.word	0x40004400
 8000c58:	00f42400 	.word	0x00f42400

08000c5c <esp_rs_pin_init>:
 * ESP82XX RX Pin  :	PA9(TX)
 * */


void esp_rs_pin_init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <esp_rs_pin_init+0x34>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <esp_rs_pin_init+0x34>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA8 as output pin*/
	GPIOA->MODER |=(1U<<16);
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <esp_rs_pin_init+0x38>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <esp_rs_pin_init+0x38>)
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c76:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<17);
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <esp_rs_pin_init+0x38>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <esp_rs_pin_init+0x38>)
 8000c7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c82:	6013      	str	r3, [r2, #0]

}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <esp_rs_pin_enable>:

void esp_rs_pin_enable(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	/*Set PA8 to high*/
	GPIOA->ODR |=(1U<<8);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <esp_rs_pin_enable+0x1c>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <esp_rs_pin_enable+0x1c>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6153      	str	r3, [r2, #20]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <esp_uart_init>:

void esp_uart_init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000cbc:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <esp_uart_init+0xe8>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a37      	ldr	r2, [pc, #220]	; (8000da0 <esp_uart_init+0xe8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 and PA10 modes to alternate function*/

	/*PA9*/
	GPIOA->MODER &=~(1U<<18);
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <esp_uart_init+0xec>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a35      	ldr	r2, [pc, #212]	; (8000da4 <esp_uart_init+0xec>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <esp_uart_init+0xec>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <esp_uart_init+0xec>)
 8000cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cde:	6013      	str	r3, [r2, #0]

    /*PA10*/
	GPIOA->MODER &=~(1U<<20);
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <esp_uart_init+0xec>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <esp_uart_init+0xec>)
 8000ce6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000cea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <esp_uart_init+0xec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <esp_uart_init+0xec>)
 8000cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf6:	6013      	str	r3, [r2, #0]

    /*Set alternate function type to UART1 AF07*/

	/*PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <esp_uart_init+0xec>)
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <esp_uart_init+0xec>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <esp_uart_init+0xec>)
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <esp_uart_init+0xec>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <esp_uart_init+0xec>)
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <esp_uart_init+0xec>)
 8000d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <esp_uart_init+0xec>)
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <esp_uart_init+0xec>)
 8000d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d26:	6253      	str	r3, [r2, #36]	; 0x24

	/*PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <esp_uart_init+0xec>)
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <esp_uart_init+0xec>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <esp_uart_init+0xec>)
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <esp_uart_init+0xec>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <esp_uart_init+0xec>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <esp_uart_init+0xec>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <esp_uart_init+0xec>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <esp_uart_init+0xec>)
 8000d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d56:	6253      	str	r3, [r2, #36]	; 0x24

	/************Configure UART module*****************/

	/*Enable clock access to UART1*/
	RCC->APB2ENR |= UART1EN;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <esp_uart_init+0xe8>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <esp_uart_init+0xe8>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6453      	str	r3, [r2, #68]	; 0x44

	/*Disable UART module*/
	USART1->CR1 &=~CR1_UE;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <esp_uart_init+0xf0>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <esp_uart_init+0xf0>)
 8000d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d6e:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART1->BRR =  compute_uart_bd(APB2_CLK,UART_BAUDRATE);
 8000d70:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <esp_uart_init+0xf4>)
 8000d76:	f000 f845 	bl	8000e04 <compute_uart_bd>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <esp_uart_init+0xf0>)
 8000d80:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <esp_uart_init+0xf0>)
 8000d84:	220c      	movs	r2, #12
 8000d86:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART1_IRQn);
 8000d88:	2025      	movs	r0, #37	; 0x25
 8000d8a:	f7ff fecd 	bl	8000b28 <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART1->CR1 |=CR1_UE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <esp_uart_init+0xf0>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <esp_uart_init+0xf0>)
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d98:	60d3      	str	r3, [r2, #12]



}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40011000 	.word	0x40011000
 8000dac:	00f42400 	.word	0x00f42400

08000db0 <systick_delay_ms>:
	USART2->DR  =  (ch & 0xFF);
}


void systick_delay_ms(uint32_t delay)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <systick_delay_ms+0x50>)
 8000dba:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000dbe:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <systick_delay_ms+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_CLKSRC |CTRL_ENABLE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <systick_delay_ms+0x50>)
 8000dc8:	2205      	movs	r2, #5
 8000dca:	601a      	str	r2, [r3, #0]

	for(int i = 0; i< delay ;i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e009      	b.n	8000de6 <systick_delay_ms+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG)== 0){}
 8000dd2:	bf00      	nop
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <systick_delay_ms+0x50>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f9      	beq.n	8000dd4 <systick_delay_ms+0x24>
	for(int i = 0; i< delay ;i++)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d8f1      	bhi.n	8000dd2 <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <systick_delay_ms+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]


}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	085a      	lsrs	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	441a      	add	r2, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1c:	b29b      	uxth	r3, r3
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <esp82xx_sever_init>:
<a class=\"button button-on\" href=\"/pump\">ON</a>\
<a class=\"button button-on\" href=\"/light\">ON</a>\
</body></html>";

void esp82xx_sever_init(char * ssid, char *password)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	circular_buffer_init();
 8000e34:	f7ff fa3c 	bl	80002b0 <circular_buffer_init>

	esp82xx_reset();
 8000e38:	f000 f812 	bl	8000e60 <esp82xx_reset>
	esp82xx_startup_test();
 8000e3c:	f000 f836 	bl	8000eac <esp82xx_startup_test>
	esp82xx_sta_mode();
 8000e40:	f000 f85a 	bl	8000ef8 <esp82xx_sta_mode>
	esp82xx_ap_connect(ssid,password);
 8000e44:	6839      	ldr	r1, [r7, #0]
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f87c 	bl	8000f44 <esp82xx_ap_connect>
	esp82xx_get_local_ip();
 8000e4c:	f000 f8c0 	bl	8000fd0 <esp82xx_get_local_ip>
	esp82xx_multi_conn_en();
 8000e50:	f000 f912 	bl	8001078 <esp82xx_multi_conn_en>
	esp82xx_create_tcp_server();
 8000e54:	f000 f936 	bl	80010c4 <esp82xx_create_tcp_server>




}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <esp82xx_reset>:
/*Reset esp82xx*/

 static void esp82xx_reset(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	/*Send reset command*/
	buffer_send_string("AT+RST\r\n",esp82xx_port);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <esp82xx_reset+0x38>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <esp82xx_reset+0x3c>)
 8000e6c:	f7ff fd00 	bl	8000870 <buffer_send_string>

	/*Delay for 1 second*/
	systick_delay_ms(1000);
 8000e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e74:	f7ff ff9c 	bl	8000db0 <systick_delay_ms>

	/*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000e78:	bf00      	nop
 8000e7a:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <esp82xx_reset+0x40>)
 8000e7c:	f7ff fc7c 	bl	8000778 <is_response>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f9      	beq.n	8000e7a <esp82xx_reset+0x1a>

	buffer_send_string("Reset was successful...\n\r",debug_port);
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <esp82xx_reset+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <esp82xx_reset+0x48>)
 8000e8e:	f7ff fcef 	bl	8000870 <buffer_send_string>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	08003960 	.word	0x08003960
 8000ea0:	0800396c 	.word	0x0800396c
 8000ea4:	20000098 	.word	0x20000098
 8000ea8:	08003974 	.word	0x08003974

08000eac <esp82xx_startup_test>:


 /*Test AT startup*/
 static void esp82xx_startup_test(void)
 {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <esp82xx_startup_test+0x38>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa95 	bl	80003e4 <buffer_clear>

	 /*Send test command*/
	buffer_send_string("AT\r\n",esp82xx_port);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <esp82xx_startup_test+0x38>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <esp82xx_startup_test+0x3c>)
 8000ec2:	f7ff fcd5 	bl	8000870 <buffer_send_string>



     /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000ec6:	bf00      	nop
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <esp82xx_startup_test+0x40>)
 8000eca:	f7ff fc55 	bl	8000778 <is_response>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f9      	beq.n	8000ec8 <esp82xx_startup_test+0x1c>

	buffer_send_string("AT Startup test successful...\n\r",debug_port);
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <esp82xx_startup_test+0x44>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <esp82xx_startup_test+0x48>)
 8000edc:	f7ff fcc8 	bl	8000870 <buffer_send_string>

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	08003990 	.word	0x08003990
 8000eec:	0800396c 	.word	0x0800396c
 8000ef0:	20000098 	.word	0x20000098
 8000ef4:	08003998 	.word	0x08003998

08000ef8 <esp82xx_sta_mode>:

 /*Enable station mode*/
 static  void esp82xx_sta_mode(void)
 {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <esp82xx_sta_mode+0x38>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fa6f 	bl	80003e4 <buffer_clear>

	 /*Send STA command*/
	buffer_send_string("AT+CWMODE=1\r\n",esp82xx_port);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <esp82xx_sta_mode+0x38>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <esp82xx_sta_mode+0x3c>)
 8000f0e:	f7ff fcaf 	bl	8000870 <buffer_send_string>

    /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000f12:	bf00      	nop
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <esp82xx_sta_mode+0x40>)
 8000f16:	f7ff fc2f 	bl	8000778 <is_response>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f9      	beq.n	8000f14 <esp82xx_sta_mode+0x1c>

	buffer_send_string("STA Mode set successfully...\n\r",debug_port);
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <esp82xx_sta_mode+0x44>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <esp82xx_sta_mode+0x48>)
 8000f28:	f7ff fca2 	bl	8000870 <buffer_send_string>

 }
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	080039b8 	.word	0x080039b8
 8000f38:	0800396c 	.word	0x0800396c
 8000f3c:	20000098 	.word	0x20000098
 8000f40:	080039c8 	.word	0x080039c8

08000f44 <esp82xx_ap_connect>:


 /*Connect to Access Apoint (AP)*/

 static  void esp82xx_ap_connect(char *ssid, char *password)
 {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	; 0x58
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	 char data[80];

	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <esp82xx_ap_connect+0x74>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa46 	bl	80003e4 <buffer_clear>

	 buffer_send_string("Connecting to access point...\n\r",debug_port);
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <esp82xx_ap_connect+0x78>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <esp82xx_ap_connect+0x7c>)
 8000f60:	f7ff fc86 	bl	8000870 <buffer_send_string>

	 /*Put ssid,password  and command into one packet*/
	 sprintf(data,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 8000f64:	f107 0008 	add.w	r0, r7, #8
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4915      	ldr	r1, [pc, #84]	; (8000fc4 <esp82xx_ap_connect+0x80>)
 8000f6e:	f000 fbeb 	bl	8001748 <siprintf>

	 /*Send entire packet to esp uart*/
	 buffer_send_string(data,esp82xx_port);
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <esp82xx_ap_connect+0x74>)
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fc77 	bl	8000870 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000f82:	bf00      	nop
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <esp82xx_ap_connect+0x84>)
 8000f86:	f7ff fbf7 	bl	8000778 <is_response>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f9      	beq.n	8000f84 <esp82xx_ap_connect+0x40>

	 sprintf(data, "Connected : \"%s\"\r\n",ssid);
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <esp82xx_ap_connect+0x88>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fbd5 	bl	8001748 <siprintf>

	 buffer_send_string(data,debug_port);
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <esp82xx_ap_connect+0x78>)
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fc61 	bl	8000870 <buffer_send_string>

 }
 8000fae:	bf00      	nop
 8000fb0:	3758      	adds	r7, #88	; 0x58
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000098 	.word	0x20000098
 8000fc0:	080039e8 	.word	0x080039e8
 8000fc4:	08003a08 	.word	0x08003a08
 8000fc8:	0800396c 	.word	0x0800396c
 8000fcc:	08003a20 	.word	0x08003a20

08000fd0 <esp82xx_get_local_ip>:

 /*Get device local IP address*/

 static void esp82xx_get_local_ip(void)
 {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09a      	sub	sp, #104	; 0x68
 8000fd4:	af00      	add	r7, sp, #0
	 char data[80];
	 char buffer[20];
	 int len;

	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <esp82xx_get_local_ip+0x8c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa02 	bl	80003e4 <buffer_clear>

	 /*Send 'get ip address ' command*/
	 buffer_send_string("AT+CIFSR\r\n",esp82xx_port);
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <esp82xx_get_local_ip+0x8c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481e      	ldr	r0, [pc, #120]	; (8001060 <esp82xx_get_local_ip+0x90>)
 8000fe8:	f7ff fc42 	bl	8000870 <buffer_send_string>

	 /*Wait for 'Station IP'  response*/
	 while(!(is_response("CIFSR:STAIP,\""))){}
 8000fec:	bf00      	nop
 8000fee:	481d      	ldr	r0, [pc, #116]	; (8001064 <esp82xx_get_local_ip+0x94>)
 8000ff0:	f7ff fbc2 	bl	8000778 <is_response>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f9      	beq.n	8000fee <esp82xx_get_local_ip+0x1e>

	 /*Copy IP address portion*/
	 while(!(copy_up_to_string("\"",buffer))){}
 8000ffa:	bf00      	nop
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4819      	ldr	r0, [pc, #100]	; (8001068 <esp82xx_get_local_ip+0x98>)
 8001002:	f7ff fce1 	bl	80009c8 <copy_up_to_string>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f7      	beq.n	8000ffc <esp82xx_get_local_ip+0x2c>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 800100c:	bf00      	nop
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <esp82xx_get_local_ip+0x9c>)
 8001010:	f7ff fbb2 	bl	8000778 <is_response>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <esp82xx_get_local_ip+0x3e>

	 len = strlen(buffer);
 800101a:	463b      	mov	r3, r7
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8e9 	bl	80001f4 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	667b      	str	r3, [r7, #100]	; 0x64

	 buffer[len - 1] = '\0';
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	3b01      	subs	r3, #1
 800102a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800102e:	4413      	add	r3, r2
 8001030:	2200      	movs	r2, #0
 8001032:	f803 2c68 	strb.w	r2, [r3, #-104]

	 sprintf(data,"Local IP Address :  %s \r\n",buffer);
 8001036:	463a      	mov	r2, r7
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <esp82xx_get_local_ip+0xa0>)
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fb82 	bl	8001748 <siprintf>

	 buffer_send_string(data,debug_port);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <esp82xx_get_local_ip+0xa4>)
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fc0e 	bl	8000870 <buffer_send_string>


 }
 8001054:	bf00      	nop
 8001056:	3768      	adds	r7, #104	; 0x68
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	08003a34 	.word	0x08003a34
 8001064:	08003a40 	.word	0x08003a40
 8001068:	08003a50 	.word	0x08003a50
 800106c:	0800396c 	.word	0x0800396c
 8001070:	08003a54 	.word	0x08003a54
 8001074:	20000098 	.word	0x20000098

08001078 <esp82xx_multi_conn_en>:

 /*Enable multiple connections*/
 static void esp82xx_multi_conn_en(void)
 {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <esp82xx_multi_conn_en+0x38>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9af 	bl	80003e4 <buffer_clear>

	 /*Send 'enable multi conn cmd'*/
	 buffer_send_string("AT+CIPMUX=1\r\n",esp82xx_port);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <esp82xx_multi_conn_en+0x38>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <esp82xx_multi_conn_en+0x3c>)
 800108e:	f7ff fbef 	bl	8000870 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8001092:	bf00      	nop
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <esp82xx_multi_conn_en+0x40>)
 8001096:	f7ff fb6f 	bl	8000778 <is_response>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f9      	beq.n	8001094 <esp82xx_multi_conn_en+0x1c>

	 buffer_send_string("Multiple connections enabled....\n\r",debug_port);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <esp82xx_multi_conn_en+0x44>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <esp82xx_multi_conn_en+0x48>)
 80010a8:	f7ff fbe2 	bl	8000870 <buffer_send_string>

 }
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	08003a70 	.word	0x08003a70
 80010b8:	0800396c 	.word	0x0800396c
 80010bc:	20000098 	.word	0x20000098
 80010c0:	08003a80 	.word	0x08003a80

080010c4 <esp82xx_create_tcp_server>:


 /*Creat tcp server*/

 static void esp82xx_create_tcp_server(void)
 {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <esp82xx_create_tcp_server+0x38>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f989 	bl	80003e4 <buffer_clear>

	 /*Send 'create tcp server cmd'*/
	 buffer_send_string("AT+CIPSERVER=1,80\r\n",esp82xx_port);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <esp82xx_create_tcp_server+0x38>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <esp82xx_create_tcp_server+0x3c>)
 80010da:	f7ff fbc9 	bl	8000870 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 80010de:	bf00      	nop
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <esp82xx_create_tcp_server+0x40>)
 80010e2:	f7ff fb49 	bl	8000778 <is_response>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f9      	beq.n	80010e0 <esp82xx_create_tcp_server+0x1c>

	 buffer_send_string("Please connect to the Local IP above....\n\r",debug_port);
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <esp82xx_create_tcp_server+0x44>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <esp82xx_create_tcp_server+0x48>)
 80010f4:	f7ff fbbc 	bl	8000870 <buffer_send_string>

 }
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	08003aa4 	.word	0x08003aa4
 8001104:	0800396c 	.word	0x0800396c
 8001108:	20000098 	.word	0x20000098
 800110c:	08003ab8 	.word	0x08003ab8

08001110 <send_server_data>:


 /*Send data to the server*/

static int8_t send_server_data(char *str, int Link_ID)
 {
 8001110:	b580      	push	{r7, lr}
 8001112:	b098      	sub	sp, #96	; 0x60
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	 char data[80];

	 /*Get length of data to send*/
	 int len = strlen(str);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f86a 	bl	80001f4 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c

	 /*Send link id and data length*/
	 sprintf(data,"AT+CIPSEND=%d,%d\r\n",Link_ID,len);
 8001124:	f107 000c 	add.w	r0, r7, #12
 8001128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	491c      	ldr	r1, [pc, #112]	; (80011a0 <send_server_data+0x90>)
 800112e:	f000 fb0b 	bl	8001748 <siprintf>
	 buffer_send_string(data,esp82xx_port);
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <send_server_data+0x94>)
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb97 	bl	8000870 <buffer_send_string>

	  /*Wait for ">" response*/
	  while(! (is_response(">"))){}
 8001142:	bf00      	nop
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <send_server_data+0x98>)
 8001146:	f7ff fb17 	bl	8000778 <is_response>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f9      	beq.n	8001144 <send_server_data+0x34>

	  /*Send data*/
	  buffer_send_string(str,esp82xx_port);
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <send_server_data+0x94>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fb8a 	bl	8000870 <buffer_send_string>

	  /*Wait for "SEND OK" response*/
	   while(! (is_response("SEND OK"))){}
 800115c:	bf00      	nop
 800115e:	4813      	ldr	r0, [pc, #76]	; (80011ac <send_server_data+0x9c>)
 8001160:	f7ff fb0a 	bl	8000778 <is_response>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f9      	beq.n	800115e <send_server_data+0x4e>

	  /*Close connection*/
	   sprintf(data,"AT+CIPCLOSE=5\r\n");
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4910      	ldr	r1, [pc, #64]	; (80011b0 <send_server_data+0xa0>)
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fae9 	bl	8001748 <siprintf>
	   buffer_send_string(data,esp82xx_port);
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <send_server_data+0x94>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fb75 	bl	8000870 <buffer_send_string>

		/*Wait for "OK" response*/
	   while(! (is_response("OK\r\n"))){}
 8001186:	bf00      	nop
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <send_server_data+0xa4>)
 800118a:	f7ff faf5 	bl	8000778 <is_response>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f9      	beq.n	8001188 <send_server_data+0x78>

	   return 1;
 8001194:	2301      	movs	r3, #1

 }
 8001196:	4618      	mov	r0, r3
 8001198:	3760      	adds	r7, #96	; 0x60
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08003ae4 	.word	0x08003ae4
 80011a4:	20000000 	.word	0x20000000
 80011a8:	08003af8 	.word	0x08003af8
 80011ac:	08003afc 	.word	0x08003afc
 80011b0:	08003b04 	.word	0x08003b04
 80011b4:	0800396c 	.word	0x0800396c

080011b8 <process_server_data>:

void process_server_data(char *str,int link_id)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	/*Check if strings are the same*/
	if((strcmp(str,"/valve")) == 0)
 80011c2:	4921      	ldr	r1, [pc, #132]	; (8001248 <process_server_data+0x90>)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff f80b 	bl	80001e0 <strcmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <process_server_data+0x26>
	{
		/*Serve valve page*/
		send_server_data(valve,link_id);
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <process_server_data+0x94>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff9a 	bl	8001110 <send_server_data>
		/*Serve home page*/
		send_server_data(home,link_id);

	}

}
 80011dc:	e02f      	b.n	800123e <process_server_data+0x86>
	else if((strcmp(str,"/gripper")) == 0)
 80011de:	491c      	ldr	r1, [pc, #112]	; (8001250 <process_server_data+0x98>)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7fe fffd 	bl	80001e0 <strcmp>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <process_server_data+0x42>
		send_server_data(gripper,link_id);
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <process_server_data+0x9c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff8c 	bl	8001110 <send_server_data>
}
 80011f8:	e021      	b.n	800123e <process_server_data+0x86>
	else if((strcmp(str,"/pump")) == 0)
 80011fa:	4917      	ldr	r1, [pc, #92]	; (8001258 <process_server_data+0xa0>)
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7fe ffef 	bl	80001e0 <strcmp>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d106      	bne.n	8001216 <process_server_data+0x5e>
		send_server_data(pump,link_id);
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <process_server_data+0xa4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6839      	ldr	r1, [r7, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff7e 	bl	8001110 <send_server_data>
}
 8001214:	e013      	b.n	800123e <process_server_data+0x86>
	else if((strcmp(str,"/light")) == 0)
 8001216:	4912      	ldr	r1, [pc, #72]	; (8001260 <process_server_data+0xa8>)
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7fe ffe1 	bl	80001e0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <process_server_data+0x7a>
		send_server_data(light,link_id);
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <process_server_data+0xac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff70 	bl	8001110 <send_server_data>
}
 8001230:	e005      	b.n	800123e <process_server_data+0x86>
		send_server_data(home,link_id);
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <process_server_data+0xb0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff69 	bl	8001110 <send_server_data>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08003b14 	.word	0x08003b14
 800124c:	20000008 	.word	0x20000008
 8001250:	08003b1c 	.word	0x08003b1c
 8001254:	20000014 	.word	0x20000014
 8001258:	08003b28 	.word	0x08003b28
 800125c:	2000000c 	.word	0x2000000c
 8001260:	08003b30 	.word	0x08003b30
 8001264:	20000010 	.word	0x20000010
 8001268:	20000004 	.word	0x20000004

0800126c <server_begin>:

 void server_begin(void)
 {
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	; 0x48
 8001270:	af00      	add	r7, sp, #0
	 char dest_buffer[64] ={0};
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	223c      	movs	r2, #60	; 0x3c
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fa5a 	bl	8001738 <memset>
	 char link_id;

	 while(!(get_next_strs("+IPD,",1,&link_id))){}
 8001284:	bf00      	nop
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	461a      	mov	r2, r3
 800128a:	2101      	movs	r1, #1
 800128c:	4848      	ldr	r0, [pc, #288]	; (80013b0 <server_begin+0x144>)
 800128e:	f7ff fabb 	bl	8000808 <get_next_strs>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f6      	beq.n	8001286 <server_begin+0x1a>

	 link_id -=48;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	3b30      	subs	r3, #48	; 0x30
 800129c:	b2db      	uxtb	r3, r3
 800129e:	71fb      	strb	r3, [r7, #7]

	 while(!(copy_up_to_string("HTTP/1.1",dest_buffer))){};
 80012a0:	bf00      	nop
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	4842      	ldr	r0, [pc, #264]	; (80013b4 <server_begin+0x148>)
 80012aa:	f7ff fb8d 	bl	80009c8 <copy_up_to_string>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f6      	beq.n	80012a2 <server_begin+0x36>

	 if(find_str("/valve",dest_buffer)== 1)
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4619      	mov	r1, r3
 80012ba:	483f      	ldr	r0, [pc, #252]	; (80013b8 <server_begin+0x14c>)
 80012bc:	f7ff f84f 	bl	800035e <find_str>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d113      	bne.n	80012ee <server_begin+0x82>
	 {
		 process_server_data("/valve",link_id);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4619      	mov	r1, r3
 80012ca:	483b      	ldr	r0, [pc, #236]	; (80013b8 <server_begin+0x14c>)
 80012cc:	f7ff ff74 	bl	80011b8 <process_server_data>

		 //Do something..
		 valve_on();
 80012d0:	f000 f92a 	bl	8001528 <valve_on>
		 pump_off();
 80012d4:	f000 f958 	bl	8001588 <pump_off>
		 light_off();
 80012d8:	f000 f916 	bl	8001508 <light_off>
		 gripper_off();
 80012dc:	f000 f974 	bl	80015c8 <gripper_off>

		 buffer_send_string("\r\nValve module diagnostics starting...\r\n",debug_port);
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <server_begin+0x150>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4836      	ldr	r0, [pc, #216]	; (80013c0 <server_begin+0x154>)
 80012e8:	f7ff fac2 	bl	8000870 <buffer_send_string>
	 {
		 process_server_data("/",link_id);
	 }


 }
 80012ec:	e05b      	b.n	80013a6 <server_begin+0x13a>
	 else if(find_str("/gripper",dest_buffer)== 1)
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4619      	mov	r1, r3
 80012f4:	4833      	ldr	r0, [pc, #204]	; (80013c4 <server_begin+0x158>)
 80012f6:	f7ff f832 	bl	800035e <find_str>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d113      	bne.n	8001328 <server_begin+0xbc>
		 process_server_data("/gripper",link_id);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4619      	mov	r1, r3
 8001304:	482f      	ldr	r0, [pc, #188]	; (80013c4 <server_begin+0x158>)
 8001306:	f7ff ff57 	bl	80011b8 <process_server_data>
			 valve_off();
 800130a:	f000 f91d 	bl	8001548 <valve_off>
			 pump_off();
 800130e:	f000 f93b 	bl	8001588 <pump_off>
			 light_off();
 8001312:	f000 f8f9 	bl	8001508 <light_off>
			 gripper_on();
 8001316:	f000 f947 	bl	80015a8 <gripper_on>
			 buffer_send_string("\r\nGripper module diagnostics starting...\r\n",debug_port);
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <server_begin+0x150>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	4829      	ldr	r0, [pc, #164]	; (80013c8 <server_begin+0x15c>)
 8001322:	f7ff faa5 	bl	8000870 <buffer_send_string>
 }
 8001326:	e03e      	b.n	80013a6 <server_begin+0x13a>
	 else if(find_str("/light",dest_buffer)== 1)
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <server_begin+0x160>)
 8001330:	f7ff f815 	bl	800035e <find_str>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d113      	bne.n	8001362 <server_begin+0xf6>
		 process_server_data("/light",link_id);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4619      	mov	r1, r3
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <server_begin+0x160>)
 8001340:	f7ff ff3a 	bl	80011b8 <process_server_data>
			 valve_off();
 8001344:	f000 f900 	bl	8001548 <valve_off>
			 pump_off();
 8001348:	f000 f91e 	bl	8001588 <pump_off>
			 light_on();
 800134c:	f000 f8cc 	bl	80014e8 <light_on>
			 gripper_off();
 8001350:	f000 f93a 	bl	80015c8 <gripper_off>
			 buffer_send_string("\r\nLight module diagnostics starting...\r\n",debug_port);
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <server_begin+0x150>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <server_begin+0x164>)
 800135c:	f7ff fa88 	bl	8000870 <buffer_send_string>
 }
 8001360:	e021      	b.n	80013a6 <server_begin+0x13a>
	 else if(find_str("/pump",dest_buffer)== 1)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <server_begin+0x168>)
 800136a:	f7fe fff8 	bl	800035e <find_str>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	d113      	bne.n	800139c <server_begin+0x130>
		 process_server_data("/pump",link_id);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4619      	mov	r1, r3
 8001378:	4816      	ldr	r0, [pc, #88]	; (80013d4 <server_begin+0x168>)
 800137a:	f7ff ff1d 	bl	80011b8 <process_server_data>
			 valve_off();
 800137e:	f000 f8e3 	bl	8001548 <valve_off>
			 pump_on();
 8001382:	f000 f8f1 	bl	8001568 <pump_on>
			 light_off();
 8001386:	f000 f8bf 	bl	8001508 <light_off>
			 gripper_off();
 800138a:	f000 f91d 	bl	80015c8 <gripper_off>
			 buffer_send_string("\r\nPump module diagnostics starting...\r\n",debug_port);
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <server_begin+0x150>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4810      	ldr	r0, [pc, #64]	; (80013d8 <server_begin+0x16c>)
 8001396:	f7ff fa6b 	bl	8000870 <buffer_send_string>
 }
 800139a:	e004      	b.n	80013a6 <server_begin+0x13a>
		 process_server_data("/",link_id);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4619      	mov	r1, r3
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <server_begin+0x170>)
 80013a2:	f7ff ff09 	bl	80011b8 <process_server_data>
 }
 80013a6:	bf00      	nop
 80013a8:	3748      	adds	r7, #72	; 0x48
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08003b38 	.word	0x08003b38
 80013b4:	08003b40 	.word	0x08003b40
 80013b8:	08003b14 	.word	0x08003b14
 80013bc:	20000098 	.word	0x20000098
 80013c0:	08003b4c 	.word	0x08003b4c
 80013c4:	08003b1c 	.word	0x08003b1c
 80013c8:	08003b78 	.word	0x08003b78
 80013cc:	08003b30 	.word	0x08003b30
 80013d0:	08003ba4 	.word	0x08003ba4
 80013d4:	08003b28 	.word	0x08003b28
 80013d8:	08003bd0 	.word	0x08003bd0
 80013dc:	08003bf8 	.word	0x08003bf8

080013e0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	esp82_uart_callback();
 80013e4:	f7ff fb00 	bl	80009e8 <esp82_uart_callback>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	debug_uart_callback();
 80013f0:	f7ff fb4a 	bl	8000a88 <debug_uart_callback>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <light_init>:




void light_init(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR|=(1U<<0);
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <light_init+0x34>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <light_init+0x34>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 as output pin*/
	GPIOA->MODER |=(1U<<10);
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <light_init+0x38>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <light_init+0x38>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <light_init+0x38>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <light_init+0x38>)
 800141a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800141e:	6013      	str	r3, [r2, #0]

}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <valve_init>:

void valve_init(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR|=(1U<<0);
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <valve_init+0x34>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <valve_init+0x34>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA6 as output pin*/
	GPIOA->MODER |=(1U<<12);
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <valve_init+0x38>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <valve_init+0x38>)
 800144a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800144e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<13);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <valve_init+0x38>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <valve_init+0x38>)
 8001456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800145a:	6013      	str	r3, [r2, #0]

}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <pump_init>:


void pump_init(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR|=(1U<<0);
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <pump_init+0x34>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <pump_init+0x34>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <pump_init+0x38>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <pump_init+0x38>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <pump_init+0x38>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <pump_init+0x38>)
 8001492:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]

}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <gripper_init>:


void gripper_init(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR|=(1U<<0);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <gripper_init+0x34>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <gripper_init+0x34>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA7 as output pin*/
	GPIOA->MODER |=(1U<<14);
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <gripper_init+0x38>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <gripper_init+0x38>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<15);
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <gripper_init+0x38>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <gripper_init+0x38>)
 80014ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014d2:	6013      	str	r3, [r2, #0]

}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <light_on>:


void light_on(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	/*Set PA5 output to high*/
	GPIOA->ODR |=(1U<<5);
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <light_on+0x1c>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <light_on+0x1c>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	6153      	str	r3, [r2, #20]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40020000 	.word	0x40020000

08001508 <light_off>:

void light_off(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	/*Set PA5 output to high*/
	GPIOA->ODR &=~(1U<<5);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <light_off+0x1c>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <light_off+0x1c>)
 8001512:	f023 0320 	bic.w	r3, r3, #32
 8001516:	6153      	str	r3, [r2, #20]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40020000 	.word	0x40020000

08001528 <valve_on>:

void valve_on(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	/*Set PA6 output to high*/
	GPIOA->ODR |=(1U<<6);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <valve_on+0x1c>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <valve_on+0x1c>)
 8001532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001536:	6153      	str	r3, [r2, #20]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40020000 	.word	0x40020000

08001548 <valve_off>:

void valve_off(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	/*Set PA6 output to high*/
	GPIOA->ODR &=~(1U<<6);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <valve_off+0x1c>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <valve_off+0x1c>)
 8001552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001556:	6153      	str	r3, [r2, #20]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40020000 	.word	0x40020000

08001568 <pump_on>:


void pump_on(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	/*Set PA4 output to high*/
	GPIOA->ODR |=(1U<<4);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <pump_on+0x1c>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <pump_on+0x1c>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6153      	str	r3, [r2, #20]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000

08001588 <pump_off>:

void pump_off(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	/*Set PA4 output to high*/
	GPIOA->ODR &=~(1U<<4);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <pump_off+0x1c>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <pump_off+0x1c>)
 8001592:	f023 0310 	bic.w	r3, r3, #16
 8001596:	6153      	str	r3, [r2, #20]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000

080015a8 <gripper_on>:

void gripper_on(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	/*Set PA7 output to high*/
	GPIOA->ODR |=(1U<<7);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <gripper_on+0x1c>)
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <gripper_on+0x1c>)
 80015b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b6:	6153      	str	r3, [r2, #20]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000

080015c8 <gripper_off>:

void gripper_off(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	/*Set PA7 output to high*/
	GPIOA->ODR &=~(1U<<7);
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <gripper_off+0x1c>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <gripper_off+0x1c>)
 80015d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d6:	6153      	str	r3, [r2, #20]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40020000 	.word	0x40020000

080015e8 <main>:

#define SSID_NAME  "TP-Link_9A4E"
#define PASSKEY    "94933581"

int main()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    /*Initialize debug uart*/
	debug_uart_init();
 80015ec:	f7ff faba 	bl	8000b64 <debug_uart_init>

	/*Initialize esp82xx uart*/
	esp_uart_init();
 80015f0:	f7ff fb62 	bl	8000cb8 <esp_uart_init>

	/*Initialize RS pin*/
	esp_rs_pin_init();
 80015f4:	f7ff fb32 	bl	8000c5c <esp_rs_pin_init>

	/*Initialize hardware modules*/
	light_init();
 80015f8:	f7ff fefe 	bl	80013f8 <light_init>
	valve_init();
 80015fc:	f7ff ff1a 	bl	8001434 <valve_init>
	pump_init();
 8001600:	f7ff ff36 	bl	8001470 <pump_init>
	gripper_init();
 8001604:	f7ff ff52 	bl	80014ac <gripper_init>

	/*Enable RS pin*/
	esp_rs_pin_enable();
 8001608:	f7ff fb46 	bl	8000c98 <esp_rs_pin_enable>

    /*Initialize server*/
	esp82xx_sever_init(SSID_NAME,PASSKEY);
 800160c:	4903      	ldr	r1, [pc, #12]	; (800161c <main+0x34>)
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <main+0x38>)
 8001610:	f7ff fc0b 	bl	8000e2a <esp82xx_sever_init>

	while(1)
	{
		/*Activate server*/
		server_begin();
 8001614:	f7ff fe2a 	bl	800126c <server_begin>
 8001618:	e7fc      	b.n	8001614 <main+0x2c>
 800161a:	bf00      	nop
 800161c:	08003bfc 	.word	0x08003bfc
 8001620:	08003c08 	.word	0x08003c08

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f000 f846 	bl	80016e4 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20020000 	.word	0x20020000
 8001684:	00000400 	.word	0x00000400
 8001688:	200008bc 	.word	0x200008bc
 800168c:	200008e8 	.word	0x200008e8

08001690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001692:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001694:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <LoopForever+0x6>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	; (80016d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <LoopForever+0xe>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	; (80016dc <LoopForever+0x16>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016be:	f000 f817 	bl	80016f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff ff91 	bl	80015e8 <main>

080016c6 <LoopForever>:

LoopForever:
    b LoopForever
 80016c6:	e7fe      	b.n	80016c6 <LoopForever>
  ldr   r0, =_estack
 80016c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016d4:	08003c50 	.word	0x08003c50
  ldr r2, =_sbss
 80016d8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016dc:	200008e8 	.word	0x200008e8

080016e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <__errno>:
 80016e4:	4b01      	ldr	r3, [pc, #4]	; (80016ec <__errno+0x8>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000018 	.word	0x20000018

080016f0 <__libc_init_array>:
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4d0d      	ldr	r5, [pc, #52]	; (8001728 <__libc_init_array+0x38>)
 80016f4:	4c0d      	ldr	r4, [pc, #52]	; (800172c <__libc_init_array+0x3c>)
 80016f6:	1b64      	subs	r4, r4, r5
 80016f8:	10a4      	asrs	r4, r4, #2
 80016fa:	2600      	movs	r6, #0
 80016fc:	42a6      	cmp	r6, r4
 80016fe:	d109      	bne.n	8001714 <__libc_init_array+0x24>
 8001700:	4d0b      	ldr	r5, [pc, #44]	; (8001730 <__libc_init_array+0x40>)
 8001702:	4c0c      	ldr	r4, [pc, #48]	; (8001734 <__libc_init_array+0x44>)
 8001704:	f000 fc4e 	bl	8001fa4 <_init>
 8001708:	1b64      	subs	r4, r4, r5
 800170a:	10a4      	asrs	r4, r4, #2
 800170c:	2600      	movs	r6, #0
 800170e:	42a6      	cmp	r6, r4
 8001710:	d105      	bne.n	800171e <__libc_init_array+0x2e>
 8001712:	bd70      	pop	{r4, r5, r6, pc}
 8001714:	f855 3b04 	ldr.w	r3, [r5], #4
 8001718:	4798      	blx	r3
 800171a:	3601      	adds	r6, #1
 800171c:	e7ee      	b.n	80016fc <__libc_init_array+0xc>
 800171e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001722:	4798      	blx	r3
 8001724:	3601      	adds	r6, #1
 8001726:	e7f2      	b.n	800170e <__libc_init_array+0x1e>
 8001728:	08003c48 	.word	0x08003c48
 800172c:	08003c48 	.word	0x08003c48
 8001730:	08003c48 	.word	0x08003c48
 8001734:	08003c4c 	.word	0x08003c4c

08001738 <memset>:
 8001738:	4402      	add	r2, r0
 800173a:	4603      	mov	r3, r0
 800173c:	4293      	cmp	r3, r2
 800173e:	d100      	bne.n	8001742 <memset+0xa>
 8001740:	4770      	bx	lr
 8001742:	f803 1b01 	strb.w	r1, [r3], #1
 8001746:	e7f9      	b.n	800173c <memset+0x4>

08001748 <siprintf>:
 8001748:	b40e      	push	{r1, r2, r3}
 800174a:	b500      	push	{lr}
 800174c:	b09c      	sub	sp, #112	; 0x70
 800174e:	ab1d      	add	r3, sp, #116	; 0x74
 8001750:	9002      	str	r0, [sp, #8]
 8001752:	9006      	str	r0, [sp, #24]
 8001754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <siprintf+0x38>)
 800175a:	9107      	str	r1, [sp, #28]
 800175c:	9104      	str	r1, [sp, #16]
 800175e:	4909      	ldr	r1, [pc, #36]	; (8001784 <siprintf+0x3c>)
 8001760:	f853 2b04 	ldr.w	r2, [r3], #4
 8001764:	9105      	str	r1, [sp, #20]
 8001766:	6800      	ldr	r0, [r0, #0]
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	a902      	add	r1, sp, #8
 800176c:	f000 f868 	bl	8001840 <_svfiprintf_r>
 8001770:	9b02      	ldr	r3, [sp, #8]
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	b01c      	add	sp, #112	; 0x70
 8001778:	f85d eb04 	ldr.w	lr, [sp], #4
 800177c:	b003      	add	sp, #12
 800177e:	4770      	bx	lr
 8001780:	20000018 	.word	0x20000018
 8001784:	ffff0208 	.word	0xffff0208

08001788 <__ssputs_r>:
 8001788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800178c:	688e      	ldr	r6, [r1, #8]
 800178e:	429e      	cmp	r6, r3
 8001790:	4682      	mov	sl, r0
 8001792:	460c      	mov	r4, r1
 8001794:	4690      	mov	r8, r2
 8001796:	461f      	mov	r7, r3
 8001798:	d838      	bhi.n	800180c <__ssputs_r+0x84>
 800179a:	898a      	ldrh	r2, [r1, #12]
 800179c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017a0:	d032      	beq.n	8001808 <__ssputs_r+0x80>
 80017a2:	6825      	ldr	r5, [r4, #0]
 80017a4:	6909      	ldr	r1, [r1, #16]
 80017a6:	eba5 0901 	sub.w	r9, r5, r1
 80017aa:	6965      	ldr	r5, [r4, #20]
 80017ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80017b4:	3301      	adds	r3, #1
 80017b6:	444b      	add	r3, r9
 80017b8:	106d      	asrs	r5, r5, #1
 80017ba:	429d      	cmp	r5, r3
 80017bc:	bf38      	it	cc
 80017be:	461d      	movcc	r5, r3
 80017c0:	0553      	lsls	r3, r2, #21
 80017c2:	d531      	bpl.n	8001828 <__ssputs_r+0xa0>
 80017c4:	4629      	mov	r1, r5
 80017c6:	f000 fb47 	bl	8001e58 <_malloc_r>
 80017ca:	4606      	mov	r6, r0
 80017cc:	b950      	cbnz	r0, 80017e4 <__ssputs_r+0x5c>
 80017ce:	230c      	movs	r3, #12
 80017d0:	f8ca 3000 	str.w	r3, [sl]
 80017d4:	89a3      	ldrh	r3, [r4, #12]
 80017d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017da:	81a3      	strh	r3, [r4, #12]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e4:	6921      	ldr	r1, [r4, #16]
 80017e6:	464a      	mov	r2, r9
 80017e8:	f000 fabe 	bl	8001d68 <memcpy>
 80017ec:	89a3      	ldrh	r3, [r4, #12]
 80017ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80017f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f6:	81a3      	strh	r3, [r4, #12]
 80017f8:	6126      	str	r6, [r4, #16]
 80017fa:	6165      	str	r5, [r4, #20]
 80017fc:	444e      	add	r6, r9
 80017fe:	eba5 0509 	sub.w	r5, r5, r9
 8001802:	6026      	str	r6, [r4, #0]
 8001804:	60a5      	str	r5, [r4, #8]
 8001806:	463e      	mov	r6, r7
 8001808:	42be      	cmp	r6, r7
 800180a:	d900      	bls.n	800180e <__ssputs_r+0x86>
 800180c:	463e      	mov	r6, r7
 800180e:	4632      	mov	r2, r6
 8001810:	6820      	ldr	r0, [r4, #0]
 8001812:	4641      	mov	r1, r8
 8001814:	f000 fab6 	bl	8001d84 <memmove>
 8001818:	68a3      	ldr	r3, [r4, #8]
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	1b9b      	subs	r3, r3, r6
 800181e:	4432      	add	r2, r6
 8001820:	60a3      	str	r3, [r4, #8]
 8001822:	6022      	str	r2, [r4, #0]
 8001824:	2000      	movs	r0, #0
 8001826:	e7db      	b.n	80017e0 <__ssputs_r+0x58>
 8001828:	462a      	mov	r2, r5
 800182a:	f000 fb6f 	bl	8001f0c <_realloc_r>
 800182e:	4606      	mov	r6, r0
 8001830:	2800      	cmp	r0, #0
 8001832:	d1e1      	bne.n	80017f8 <__ssputs_r+0x70>
 8001834:	6921      	ldr	r1, [r4, #16]
 8001836:	4650      	mov	r0, sl
 8001838:	f000 fabe 	bl	8001db8 <_free_r>
 800183c:	e7c7      	b.n	80017ce <__ssputs_r+0x46>
	...

08001840 <_svfiprintf_r>:
 8001840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001844:	4698      	mov	r8, r3
 8001846:	898b      	ldrh	r3, [r1, #12]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	b09d      	sub	sp, #116	; 0x74
 800184c:	4607      	mov	r7, r0
 800184e:	460d      	mov	r5, r1
 8001850:	4614      	mov	r4, r2
 8001852:	d50e      	bpl.n	8001872 <_svfiprintf_r+0x32>
 8001854:	690b      	ldr	r3, [r1, #16]
 8001856:	b963      	cbnz	r3, 8001872 <_svfiprintf_r+0x32>
 8001858:	2140      	movs	r1, #64	; 0x40
 800185a:	f000 fafd 	bl	8001e58 <_malloc_r>
 800185e:	6028      	str	r0, [r5, #0]
 8001860:	6128      	str	r0, [r5, #16]
 8001862:	b920      	cbnz	r0, 800186e <_svfiprintf_r+0x2e>
 8001864:	230c      	movs	r3, #12
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	e0d1      	b.n	8001a12 <_svfiprintf_r+0x1d2>
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	616b      	str	r3, [r5, #20]
 8001872:	2300      	movs	r3, #0
 8001874:	9309      	str	r3, [sp, #36]	; 0x24
 8001876:	2320      	movs	r3, #32
 8001878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800187c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001880:	2330      	movs	r3, #48	; 0x30
 8001882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001a2c <_svfiprintf_r+0x1ec>
 8001886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800188a:	f04f 0901 	mov.w	r9, #1
 800188e:	4623      	mov	r3, r4
 8001890:	469a      	mov	sl, r3
 8001892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001896:	b10a      	cbz	r2, 800189c <_svfiprintf_r+0x5c>
 8001898:	2a25      	cmp	r2, #37	; 0x25
 800189a:	d1f9      	bne.n	8001890 <_svfiprintf_r+0x50>
 800189c:	ebba 0b04 	subs.w	fp, sl, r4
 80018a0:	d00b      	beq.n	80018ba <_svfiprintf_r+0x7a>
 80018a2:	465b      	mov	r3, fp
 80018a4:	4622      	mov	r2, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	4638      	mov	r0, r7
 80018aa:	f7ff ff6d 	bl	8001788 <__ssputs_r>
 80018ae:	3001      	adds	r0, #1
 80018b0:	f000 80aa 	beq.w	8001a08 <_svfiprintf_r+0x1c8>
 80018b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018b6:	445a      	add	r2, fp
 80018b8:	9209      	str	r2, [sp, #36]	; 0x24
 80018ba:	f89a 3000 	ldrb.w	r3, [sl]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80a2 	beq.w	8001a08 <_svfiprintf_r+0x1c8>
 80018c4:	2300      	movs	r3, #0
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018ce:	f10a 0a01 	add.w	sl, sl, #1
 80018d2:	9304      	str	r3, [sp, #16]
 80018d4:	9307      	str	r3, [sp, #28]
 80018d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018da:	931a      	str	r3, [sp, #104]	; 0x68
 80018dc:	4654      	mov	r4, sl
 80018de:	2205      	movs	r2, #5
 80018e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e4:	4851      	ldr	r0, [pc, #324]	; (8001a2c <_svfiprintf_r+0x1ec>)
 80018e6:	f7fe fc93 	bl	8000210 <memchr>
 80018ea:	9a04      	ldr	r2, [sp, #16]
 80018ec:	b9d8      	cbnz	r0, 8001926 <_svfiprintf_r+0xe6>
 80018ee:	06d0      	lsls	r0, r2, #27
 80018f0:	bf44      	itt	mi
 80018f2:	2320      	movmi	r3, #32
 80018f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018f8:	0711      	lsls	r1, r2, #28
 80018fa:	bf44      	itt	mi
 80018fc:	232b      	movmi	r3, #43	; 0x2b
 80018fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001902:	f89a 3000 	ldrb.w	r3, [sl]
 8001906:	2b2a      	cmp	r3, #42	; 0x2a
 8001908:	d015      	beq.n	8001936 <_svfiprintf_r+0xf6>
 800190a:	9a07      	ldr	r2, [sp, #28]
 800190c:	4654      	mov	r4, sl
 800190e:	2000      	movs	r0, #0
 8001910:	f04f 0c0a 	mov.w	ip, #10
 8001914:	4621      	mov	r1, r4
 8001916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800191a:	3b30      	subs	r3, #48	; 0x30
 800191c:	2b09      	cmp	r3, #9
 800191e:	d94e      	bls.n	80019be <_svfiprintf_r+0x17e>
 8001920:	b1b0      	cbz	r0, 8001950 <_svfiprintf_r+0x110>
 8001922:	9207      	str	r2, [sp, #28]
 8001924:	e014      	b.n	8001950 <_svfiprintf_r+0x110>
 8001926:	eba0 0308 	sub.w	r3, r0, r8
 800192a:	fa09 f303 	lsl.w	r3, r9, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	9304      	str	r3, [sp, #16]
 8001932:	46a2      	mov	sl, r4
 8001934:	e7d2      	b.n	80018dc <_svfiprintf_r+0x9c>
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	1d19      	adds	r1, r3, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	9103      	str	r1, [sp, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	bfbb      	ittet	lt
 8001942:	425b      	neglt	r3, r3
 8001944:	f042 0202 	orrlt.w	r2, r2, #2
 8001948:	9307      	strge	r3, [sp, #28]
 800194a:	9307      	strlt	r3, [sp, #28]
 800194c:	bfb8      	it	lt
 800194e:	9204      	strlt	r2, [sp, #16]
 8001950:	7823      	ldrb	r3, [r4, #0]
 8001952:	2b2e      	cmp	r3, #46	; 0x2e
 8001954:	d10c      	bne.n	8001970 <_svfiprintf_r+0x130>
 8001956:	7863      	ldrb	r3, [r4, #1]
 8001958:	2b2a      	cmp	r3, #42	; 0x2a
 800195a:	d135      	bne.n	80019c8 <_svfiprintf_r+0x188>
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	1d1a      	adds	r2, r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	9203      	str	r2, [sp, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfb8      	it	lt
 8001968:	f04f 33ff 	movlt.w	r3, #4294967295
 800196c:	3402      	adds	r4, #2
 800196e:	9305      	str	r3, [sp, #20]
 8001970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001a3c <_svfiprintf_r+0x1fc>
 8001974:	7821      	ldrb	r1, [r4, #0]
 8001976:	2203      	movs	r2, #3
 8001978:	4650      	mov	r0, sl
 800197a:	f7fe fc49 	bl	8000210 <memchr>
 800197e:	b140      	cbz	r0, 8001992 <_svfiprintf_r+0x152>
 8001980:	2340      	movs	r3, #64	; 0x40
 8001982:	eba0 000a 	sub.w	r0, r0, sl
 8001986:	fa03 f000 	lsl.w	r0, r3, r0
 800198a:	9b04      	ldr	r3, [sp, #16]
 800198c:	4303      	orrs	r3, r0
 800198e:	3401      	adds	r4, #1
 8001990:	9304      	str	r3, [sp, #16]
 8001992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001996:	4826      	ldr	r0, [pc, #152]	; (8001a30 <_svfiprintf_r+0x1f0>)
 8001998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800199c:	2206      	movs	r2, #6
 800199e:	f7fe fc37 	bl	8000210 <memchr>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d038      	beq.n	8001a18 <_svfiprintf_r+0x1d8>
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <_svfiprintf_r+0x1f4>)
 80019a8:	bb1b      	cbnz	r3, 80019f2 <_svfiprintf_r+0x1b2>
 80019aa:	9b03      	ldr	r3, [sp, #12]
 80019ac:	3307      	adds	r3, #7
 80019ae:	f023 0307 	bic.w	r3, r3, #7
 80019b2:	3308      	adds	r3, #8
 80019b4:	9303      	str	r3, [sp, #12]
 80019b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019b8:	4433      	add	r3, r6
 80019ba:	9309      	str	r3, [sp, #36]	; 0x24
 80019bc:	e767      	b.n	800188e <_svfiprintf_r+0x4e>
 80019be:	fb0c 3202 	mla	r2, ip, r2, r3
 80019c2:	460c      	mov	r4, r1
 80019c4:	2001      	movs	r0, #1
 80019c6:	e7a5      	b.n	8001914 <_svfiprintf_r+0xd4>
 80019c8:	2300      	movs	r3, #0
 80019ca:	3401      	adds	r4, #1
 80019cc:	9305      	str	r3, [sp, #20]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 0c0a 	mov.w	ip, #10
 80019d4:	4620      	mov	r0, r4
 80019d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019da:	3a30      	subs	r2, #48	; 0x30
 80019dc:	2a09      	cmp	r2, #9
 80019de:	d903      	bls.n	80019e8 <_svfiprintf_r+0x1a8>
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0c5      	beq.n	8001970 <_svfiprintf_r+0x130>
 80019e4:	9105      	str	r1, [sp, #20]
 80019e6:	e7c3      	b.n	8001970 <_svfiprintf_r+0x130>
 80019e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80019ec:	4604      	mov	r4, r0
 80019ee:	2301      	movs	r3, #1
 80019f0:	e7f0      	b.n	80019d4 <_svfiprintf_r+0x194>
 80019f2:	ab03      	add	r3, sp, #12
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	462a      	mov	r2, r5
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <_svfiprintf_r+0x1f8>)
 80019fa:	a904      	add	r1, sp, #16
 80019fc:	4638      	mov	r0, r7
 80019fe:	f3af 8000 	nop.w
 8001a02:	1c42      	adds	r2, r0, #1
 8001a04:	4606      	mov	r6, r0
 8001a06:	d1d6      	bne.n	80019b6 <_svfiprintf_r+0x176>
 8001a08:	89ab      	ldrh	r3, [r5, #12]
 8001a0a:	065b      	lsls	r3, r3, #25
 8001a0c:	f53f af2c 	bmi.w	8001868 <_svfiprintf_r+0x28>
 8001a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a12:	b01d      	add	sp, #116	; 0x74
 8001a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a18:	ab03      	add	r3, sp, #12
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	462a      	mov	r2, r5
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <_svfiprintf_r+0x1f8>)
 8001a20:	a904      	add	r1, sp, #16
 8001a22:	4638      	mov	r0, r7
 8001a24:	f000 f87a 	bl	8001b1c <_printf_i>
 8001a28:	e7eb      	b.n	8001a02 <_svfiprintf_r+0x1c2>
 8001a2a:	bf00      	nop
 8001a2c:	08003c15 	.word	0x08003c15
 8001a30:	08003c1f 	.word	0x08003c1f
 8001a34:	00000000 	.word	0x00000000
 8001a38:	08001789 	.word	0x08001789
 8001a3c:	08003c1b 	.word	0x08003c1b

08001a40 <_printf_common>:
 8001a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a44:	4616      	mov	r6, r2
 8001a46:	4699      	mov	r9, r3
 8001a48:	688a      	ldr	r2, [r1, #8]
 8001a4a:	690b      	ldr	r3, [r1, #16]
 8001a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bfb8      	it	lt
 8001a54:	4613      	movlt	r3, r2
 8001a56:	6033      	str	r3, [r6, #0]
 8001a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a5c:	4607      	mov	r7, r0
 8001a5e:	460c      	mov	r4, r1
 8001a60:	b10a      	cbz	r2, 8001a66 <_printf_common+0x26>
 8001a62:	3301      	adds	r3, #1
 8001a64:	6033      	str	r3, [r6, #0]
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	0699      	lsls	r1, r3, #26
 8001a6a:	bf42      	ittt	mi
 8001a6c:	6833      	ldrmi	r3, [r6, #0]
 8001a6e:	3302      	addmi	r3, #2
 8001a70:	6033      	strmi	r3, [r6, #0]
 8001a72:	6825      	ldr	r5, [r4, #0]
 8001a74:	f015 0506 	ands.w	r5, r5, #6
 8001a78:	d106      	bne.n	8001a88 <_printf_common+0x48>
 8001a7a:	f104 0a19 	add.w	sl, r4, #25
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	6832      	ldr	r2, [r6, #0]
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	42ab      	cmp	r3, r5
 8001a86:	dc26      	bgt.n	8001ad6 <_printf_common+0x96>
 8001a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a8c:	1e13      	subs	r3, r2, #0
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	bf18      	it	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	0692      	lsls	r2, r2, #26
 8001a96:	d42b      	bmi.n	8001af0 <_printf_common+0xb0>
 8001a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	4638      	mov	r0, r7
 8001aa0:	47c0      	blx	r8
 8001aa2:	3001      	adds	r0, #1
 8001aa4:	d01e      	beq.n	8001ae4 <_printf_common+0xa4>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	68e5      	ldr	r5, [r4, #12]
 8001aaa:	6832      	ldr	r2, [r6, #0]
 8001aac:	f003 0306 	and.w	r3, r3, #6
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	bf08      	it	eq
 8001ab4:	1aad      	subeq	r5, r5, r2
 8001ab6:	68a3      	ldr	r3, [r4, #8]
 8001ab8:	6922      	ldr	r2, [r4, #16]
 8001aba:	bf0c      	ite	eq
 8001abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ac0:	2500      	movne	r5, #0
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	bfc4      	itt	gt
 8001ac6:	1a9b      	subgt	r3, r3, r2
 8001ac8:	18ed      	addgt	r5, r5, r3
 8001aca:	2600      	movs	r6, #0
 8001acc:	341a      	adds	r4, #26
 8001ace:	42b5      	cmp	r5, r6
 8001ad0:	d11a      	bne.n	8001b08 <_printf_common+0xc8>
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	e008      	b.n	8001ae8 <_printf_common+0xa8>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	4652      	mov	r2, sl
 8001ada:	4649      	mov	r1, r9
 8001adc:	4638      	mov	r0, r7
 8001ade:	47c0      	blx	r8
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d103      	bne.n	8001aec <_printf_common+0xac>
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aec:	3501      	adds	r5, #1
 8001aee:	e7c6      	b.n	8001a7e <_printf_common+0x3e>
 8001af0:	18e1      	adds	r1, r4, r3
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	2030      	movs	r0, #48	; 0x30
 8001af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001afa:	4422      	add	r2, r4
 8001afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b04:	3302      	adds	r3, #2
 8001b06:	e7c7      	b.n	8001a98 <_printf_common+0x58>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	4638      	mov	r0, r7
 8001b10:	47c0      	blx	r8
 8001b12:	3001      	adds	r0, #1
 8001b14:	d0e6      	beq.n	8001ae4 <_printf_common+0xa4>
 8001b16:	3601      	adds	r6, #1
 8001b18:	e7d9      	b.n	8001ace <_printf_common+0x8e>
	...

08001b1c <_printf_i>:
 8001b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b20:	460c      	mov	r4, r1
 8001b22:	4691      	mov	r9, r2
 8001b24:	7e27      	ldrb	r7, [r4, #24]
 8001b26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b28:	2f78      	cmp	r7, #120	; 0x78
 8001b2a:	4680      	mov	r8, r0
 8001b2c:	469a      	mov	sl, r3
 8001b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b32:	d807      	bhi.n	8001b44 <_printf_i+0x28>
 8001b34:	2f62      	cmp	r7, #98	; 0x62
 8001b36:	d80a      	bhi.n	8001b4e <_printf_i+0x32>
 8001b38:	2f00      	cmp	r7, #0
 8001b3a:	f000 80d8 	beq.w	8001cee <_printf_i+0x1d2>
 8001b3e:	2f58      	cmp	r7, #88	; 0x58
 8001b40:	f000 80a3 	beq.w	8001c8a <_printf_i+0x16e>
 8001b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b4c:	e03a      	b.n	8001bc4 <_printf_i+0xa8>
 8001b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b52:	2b15      	cmp	r3, #21
 8001b54:	d8f6      	bhi.n	8001b44 <_printf_i+0x28>
 8001b56:	a001      	add	r0, pc, #4	; (adr r0, 8001b5c <_printf_i+0x40>)
 8001b58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001b5c:	08001bb5 	.word	0x08001bb5
 8001b60:	08001bc9 	.word	0x08001bc9
 8001b64:	08001b45 	.word	0x08001b45
 8001b68:	08001b45 	.word	0x08001b45
 8001b6c:	08001b45 	.word	0x08001b45
 8001b70:	08001b45 	.word	0x08001b45
 8001b74:	08001bc9 	.word	0x08001bc9
 8001b78:	08001b45 	.word	0x08001b45
 8001b7c:	08001b45 	.word	0x08001b45
 8001b80:	08001b45 	.word	0x08001b45
 8001b84:	08001b45 	.word	0x08001b45
 8001b88:	08001cd5 	.word	0x08001cd5
 8001b8c:	08001bf9 	.word	0x08001bf9
 8001b90:	08001cb7 	.word	0x08001cb7
 8001b94:	08001b45 	.word	0x08001b45
 8001b98:	08001b45 	.word	0x08001b45
 8001b9c:	08001cf7 	.word	0x08001cf7
 8001ba0:	08001b45 	.word	0x08001b45
 8001ba4:	08001bf9 	.word	0x08001bf9
 8001ba8:	08001b45 	.word	0x08001b45
 8001bac:	08001b45 	.word	0x08001b45
 8001bb0:	08001cbf 	.word	0x08001cbf
 8001bb4:	680b      	ldr	r3, [r1, #0]
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	600a      	str	r2, [r1, #0]
 8001bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0a3      	b.n	8001d10 <_printf_i+0x1f4>
 8001bc8:	6825      	ldr	r5, [r4, #0]
 8001bca:	6808      	ldr	r0, [r1, #0]
 8001bcc:	062e      	lsls	r6, r5, #24
 8001bce:	f100 0304 	add.w	r3, r0, #4
 8001bd2:	d50a      	bpl.n	8001bea <_printf_i+0xce>
 8001bd4:	6805      	ldr	r5, [r0, #0]
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	2d00      	cmp	r5, #0
 8001bda:	da03      	bge.n	8001be4 <_printf_i+0xc8>
 8001bdc:	232d      	movs	r3, #45	; 0x2d
 8001bde:	426d      	negs	r5, r5
 8001be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001be4:	485e      	ldr	r0, [pc, #376]	; (8001d60 <_printf_i+0x244>)
 8001be6:	230a      	movs	r3, #10
 8001be8:	e019      	b.n	8001c1e <_printf_i+0x102>
 8001bea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001bee:	6805      	ldr	r5, [r0, #0]
 8001bf0:	600b      	str	r3, [r1, #0]
 8001bf2:	bf18      	it	ne
 8001bf4:	b22d      	sxthne	r5, r5
 8001bf6:	e7ef      	b.n	8001bd8 <_printf_i+0xbc>
 8001bf8:	680b      	ldr	r3, [r1, #0]
 8001bfa:	6825      	ldr	r5, [r4, #0]
 8001bfc:	1d18      	adds	r0, r3, #4
 8001bfe:	6008      	str	r0, [r1, #0]
 8001c00:	0628      	lsls	r0, r5, #24
 8001c02:	d501      	bpl.n	8001c08 <_printf_i+0xec>
 8001c04:	681d      	ldr	r5, [r3, #0]
 8001c06:	e002      	b.n	8001c0e <_printf_i+0xf2>
 8001c08:	0669      	lsls	r1, r5, #25
 8001c0a:	d5fb      	bpl.n	8001c04 <_printf_i+0xe8>
 8001c0c:	881d      	ldrh	r5, [r3, #0]
 8001c0e:	4854      	ldr	r0, [pc, #336]	; (8001d60 <_printf_i+0x244>)
 8001c10:	2f6f      	cmp	r7, #111	; 0x6f
 8001c12:	bf0c      	ite	eq
 8001c14:	2308      	moveq	r3, #8
 8001c16:	230a      	movne	r3, #10
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c1e:	6866      	ldr	r6, [r4, #4]
 8001c20:	60a6      	str	r6, [r4, #8]
 8001c22:	2e00      	cmp	r6, #0
 8001c24:	bfa2      	ittt	ge
 8001c26:	6821      	ldrge	r1, [r4, #0]
 8001c28:	f021 0104 	bicge.w	r1, r1, #4
 8001c2c:	6021      	strge	r1, [r4, #0]
 8001c2e:	b90d      	cbnz	r5, 8001c34 <_printf_i+0x118>
 8001c30:	2e00      	cmp	r6, #0
 8001c32:	d04d      	beq.n	8001cd0 <_printf_i+0x1b4>
 8001c34:	4616      	mov	r6, r2
 8001c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8001c3e:	5dc7      	ldrb	r7, [r0, r7]
 8001c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c44:	462f      	mov	r7, r5
 8001c46:	42bb      	cmp	r3, r7
 8001c48:	460d      	mov	r5, r1
 8001c4a:	d9f4      	bls.n	8001c36 <_printf_i+0x11a>
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d10b      	bne.n	8001c68 <_printf_i+0x14c>
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	07df      	lsls	r7, r3, #31
 8001c54:	d508      	bpl.n	8001c68 <_printf_i+0x14c>
 8001c56:	6923      	ldr	r3, [r4, #16]
 8001c58:	6861      	ldr	r1, [r4, #4]
 8001c5a:	4299      	cmp	r1, r3
 8001c5c:	bfde      	ittt	le
 8001c5e:	2330      	movle	r3, #48	; 0x30
 8001c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c68:	1b92      	subs	r2, r2, r6
 8001c6a:	6122      	str	r2, [r4, #16]
 8001c6c:	f8cd a000 	str.w	sl, [sp]
 8001c70:	464b      	mov	r3, r9
 8001c72:	aa03      	add	r2, sp, #12
 8001c74:	4621      	mov	r1, r4
 8001c76:	4640      	mov	r0, r8
 8001c78:	f7ff fee2 	bl	8001a40 <_printf_common>
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	d14c      	bne.n	8001d1a <_printf_i+0x1fe>
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	b004      	add	sp, #16
 8001c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c8a:	4835      	ldr	r0, [pc, #212]	; (8001d60 <_printf_i+0x244>)
 8001c8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	680e      	ldr	r6, [r1, #0]
 8001c94:	061f      	lsls	r7, r3, #24
 8001c96:	f856 5b04 	ldr.w	r5, [r6], #4
 8001c9a:	600e      	str	r6, [r1, #0]
 8001c9c:	d514      	bpl.n	8001cc8 <_printf_i+0x1ac>
 8001c9e:	07d9      	lsls	r1, r3, #31
 8001ca0:	bf44      	itt	mi
 8001ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8001ca6:	6023      	strmi	r3, [r4, #0]
 8001ca8:	b91d      	cbnz	r5, 8001cb2 <_printf_i+0x196>
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f023 0320 	bic.w	r3, r3, #32
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	e7b0      	b.n	8001c18 <_printf_i+0xfc>
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	2378      	movs	r3, #120	; 0x78
 8001cc0:	4828      	ldr	r0, [pc, #160]	; (8001d64 <_printf_i+0x248>)
 8001cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cc6:	e7e3      	b.n	8001c90 <_printf_i+0x174>
 8001cc8:	065e      	lsls	r6, r3, #25
 8001cca:	bf48      	it	mi
 8001ccc:	b2ad      	uxthmi	r5, r5
 8001cce:	e7e6      	b.n	8001c9e <_printf_i+0x182>
 8001cd0:	4616      	mov	r6, r2
 8001cd2:	e7bb      	b.n	8001c4c <_printf_i+0x130>
 8001cd4:	680b      	ldr	r3, [r1, #0]
 8001cd6:	6826      	ldr	r6, [r4, #0]
 8001cd8:	6960      	ldr	r0, [r4, #20]
 8001cda:	1d1d      	adds	r5, r3, #4
 8001cdc:	600d      	str	r5, [r1, #0]
 8001cde:	0635      	lsls	r5, r6, #24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	d501      	bpl.n	8001ce8 <_printf_i+0x1cc>
 8001ce4:	6018      	str	r0, [r3, #0]
 8001ce6:	e002      	b.n	8001cee <_printf_i+0x1d2>
 8001ce8:	0671      	lsls	r1, r6, #25
 8001cea:	d5fb      	bpl.n	8001ce4 <_printf_i+0x1c8>
 8001cec:	8018      	strh	r0, [r3, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	6123      	str	r3, [r4, #16]
 8001cf2:	4616      	mov	r6, r2
 8001cf4:	e7ba      	b.n	8001c6c <_printf_i+0x150>
 8001cf6:	680b      	ldr	r3, [r1, #0]
 8001cf8:	1d1a      	adds	r2, r3, #4
 8001cfa:	600a      	str	r2, [r1, #0]
 8001cfc:	681e      	ldr	r6, [r3, #0]
 8001cfe:	6862      	ldr	r2, [r4, #4]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4630      	mov	r0, r6
 8001d04:	f7fe fa84 	bl	8000210 <memchr>
 8001d08:	b108      	cbz	r0, 8001d0e <_printf_i+0x1f2>
 8001d0a:	1b80      	subs	r0, r0, r6
 8001d0c:	6060      	str	r0, [r4, #4]
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	6123      	str	r3, [r4, #16]
 8001d12:	2300      	movs	r3, #0
 8001d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d18:	e7a8      	b.n	8001c6c <_printf_i+0x150>
 8001d1a:	6923      	ldr	r3, [r4, #16]
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	4649      	mov	r1, r9
 8001d20:	4640      	mov	r0, r8
 8001d22:	47d0      	blx	sl
 8001d24:	3001      	adds	r0, #1
 8001d26:	d0ab      	beq.n	8001c80 <_printf_i+0x164>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	079b      	lsls	r3, r3, #30
 8001d2c:	d413      	bmi.n	8001d56 <_printf_i+0x23a>
 8001d2e:	68e0      	ldr	r0, [r4, #12]
 8001d30:	9b03      	ldr	r3, [sp, #12]
 8001d32:	4298      	cmp	r0, r3
 8001d34:	bfb8      	it	lt
 8001d36:	4618      	movlt	r0, r3
 8001d38:	e7a4      	b.n	8001c84 <_printf_i+0x168>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4632      	mov	r2, r6
 8001d3e:	4649      	mov	r1, r9
 8001d40:	4640      	mov	r0, r8
 8001d42:	47d0      	blx	sl
 8001d44:	3001      	adds	r0, #1
 8001d46:	d09b      	beq.n	8001c80 <_printf_i+0x164>
 8001d48:	3501      	adds	r5, #1
 8001d4a:	68e3      	ldr	r3, [r4, #12]
 8001d4c:	9903      	ldr	r1, [sp, #12]
 8001d4e:	1a5b      	subs	r3, r3, r1
 8001d50:	42ab      	cmp	r3, r5
 8001d52:	dcf2      	bgt.n	8001d3a <_printf_i+0x21e>
 8001d54:	e7eb      	b.n	8001d2e <_printf_i+0x212>
 8001d56:	2500      	movs	r5, #0
 8001d58:	f104 0619 	add.w	r6, r4, #25
 8001d5c:	e7f5      	b.n	8001d4a <_printf_i+0x22e>
 8001d5e:	bf00      	nop
 8001d60:	08003c26 	.word	0x08003c26
 8001d64:	08003c37 	.word	0x08003c37

08001d68 <memcpy>:
 8001d68:	440a      	add	r2, r1
 8001d6a:	4291      	cmp	r1, r2
 8001d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d70:	d100      	bne.n	8001d74 <memcpy+0xc>
 8001d72:	4770      	bx	lr
 8001d74:	b510      	push	{r4, lr}
 8001d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d7e:	4291      	cmp	r1, r2
 8001d80:	d1f9      	bne.n	8001d76 <memcpy+0xe>
 8001d82:	bd10      	pop	{r4, pc}

08001d84 <memmove>:
 8001d84:	4288      	cmp	r0, r1
 8001d86:	b510      	push	{r4, lr}
 8001d88:	eb01 0402 	add.w	r4, r1, r2
 8001d8c:	d902      	bls.n	8001d94 <memmove+0x10>
 8001d8e:	4284      	cmp	r4, r0
 8001d90:	4623      	mov	r3, r4
 8001d92:	d807      	bhi.n	8001da4 <memmove+0x20>
 8001d94:	1e43      	subs	r3, r0, #1
 8001d96:	42a1      	cmp	r1, r4
 8001d98:	d008      	beq.n	8001dac <memmove+0x28>
 8001d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001da2:	e7f8      	b.n	8001d96 <memmove+0x12>
 8001da4:	4402      	add	r2, r0
 8001da6:	4601      	mov	r1, r0
 8001da8:	428a      	cmp	r2, r1
 8001daa:	d100      	bne.n	8001dae <memmove+0x2a>
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001db6:	e7f7      	b.n	8001da8 <memmove+0x24>

08001db8 <_free_r>:
 8001db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dba:	2900      	cmp	r1, #0
 8001dbc:	d048      	beq.n	8001e50 <_free_r+0x98>
 8001dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dc2:	9001      	str	r0, [sp, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8001dca:	bfb8      	it	lt
 8001dcc:	18e4      	addlt	r4, r4, r3
 8001dce:	f000 f8d3 	bl	8001f78 <__malloc_lock>
 8001dd2:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <_free_r+0x9c>)
 8001dd4:	9801      	ldr	r0, [sp, #4]
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	4615      	mov	r5, r2
 8001dda:	b933      	cbnz	r3, 8001dea <_free_r+0x32>
 8001ddc:	6063      	str	r3, [r4, #4]
 8001dde:	6014      	str	r4, [r2, #0]
 8001de0:	b003      	add	sp, #12
 8001de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001de6:	f000 b8cd 	b.w	8001f84 <__malloc_unlock>
 8001dea:	42a3      	cmp	r3, r4
 8001dec:	d90b      	bls.n	8001e06 <_free_r+0x4e>
 8001dee:	6821      	ldr	r1, [r4, #0]
 8001df0:	1862      	adds	r2, r4, r1
 8001df2:	4293      	cmp	r3, r2
 8001df4:	bf04      	itt	eq
 8001df6:	681a      	ldreq	r2, [r3, #0]
 8001df8:	685b      	ldreq	r3, [r3, #4]
 8001dfa:	6063      	str	r3, [r4, #4]
 8001dfc:	bf04      	itt	eq
 8001dfe:	1852      	addeq	r2, r2, r1
 8001e00:	6022      	streq	r2, [r4, #0]
 8001e02:	602c      	str	r4, [r5, #0]
 8001e04:	e7ec      	b.n	8001de0 <_free_r+0x28>
 8001e06:	461a      	mov	r2, r3
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	b10b      	cbz	r3, 8001e10 <_free_r+0x58>
 8001e0c:	42a3      	cmp	r3, r4
 8001e0e:	d9fa      	bls.n	8001e06 <_free_r+0x4e>
 8001e10:	6811      	ldr	r1, [r2, #0]
 8001e12:	1855      	adds	r5, r2, r1
 8001e14:	42a5      	cmp	r5, r4
 8001e16:	d10b      	bne.n	8001e30 <_free_r+0x78>
 8001e18:	6824      	ldr	r4, [r4, #0]
 8001e1a:	4421      	add	r1, r4
 8001e1c:	1854      	adds	r4, r2, r1
 8001e1e:	42a3      	cmp	r3, r4
 8001e20:	6011      	str	r1, [r2, #0]
 8001e22:	d1dd      	bne.n	8001de0 <_free_r+0x28>
 8001e24:	681c      	ldr	r4, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	6053      	str	r3, [r2, #4]
 8001e2a:	4421      	add	r1, r4
 8001e2c:	6011      	str	r1, [r2, #0]
 8001e2e:	e7d7      	b.n	8001de0 <_free_r+0x28>
 8001e30:	d902      	bls.n	8001e38 <_free_r+0x80>
 8001e32:	230c      	movs	r3, #12
 8001e34:	6003      	str	r3, [r0, #0]
 8001e36:	e7d3      	b.n	8001de0 <_free_r+0x28>
 8001e38:	6825      	ldr	r5, [r4, #0]
 8001e3a:	1961      	adds	r1, r4, r5
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	bf04      	itt	eq
 8001e40:	6819      	ldreq	r1, [r3, #0]
 8001e42:	685b      	ldreq	r3, [r3, #4]
 8001e44:	6063      	str	r3, [r4, #4]
 8001e46:	bf04      	itt	eq
 8001e48:	1949      	addeq	r1, r1, r5
 8001e4a:	6021      	streq	r1, [r4, #0]
 8001e4c:	6054      	str	r4, [r2, #4]
 8001e4e:	e7c7      	b.n	8001de0 <_free_r+0x28>
 8001e50:	b003      	add	sp, #12
 8001e52:	bd30      	pop	{r4, r5, pc}
 8001e54:	200008c0 	.word	0x200008c0

08001e58 <_malloc_r>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	1ccd      	adds	r5, r1, #3
 8001e5c:	f025 0503 	bic.w	r5, r5, #3
 8001e60:	3508      	adds	r5, #8
 8001e62:	2d0c      	cmp	r5, #12
 8001e64:	bf38      	it	cc
 8001e66:	250c      	movcc	r5, #12
 8001e68:	2d00      	cmp	r5, #0
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	db01      	blt.n	8001e72 <_malloc_r+0x1a>
 8001e6e:	42a9      	cmp	r1, r5
 8001e70:	d903      	bls.n	8001e7a <_malloc_r+0x22>
 8001e72:	230c      	movs	r3, #12
 8001e74:	6033      	str	r3, [r6, #0]
 8001e76:	2000      	movs	r0, #0
 8001e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e7a:	f000 f87d 	bl	8001f78 <__malloc_lock>
 8001e7e:	4921      	ldr	r1, [pc, #132]	; (8001f04 <_malloc_r+0xac>)
 8001e80:	680a      	ldr	r2, [r1, #0]
 8001e82:	4614      	mov	r4, r2
 8001e84:	b99c      	cbnz	r4, 8001eae <_malloc_r+0x56>
 8001e86:	4f20      	ldr	r7, [pc, #128]	; (8001f08 <_malloc_r+0xb0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b923      	cbnz	r3, 8001e96 <_malloc_r+0x3e>
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	4630      	mov	r0, r6
 8001e90:	f000 f862 	bl	8001f58 <_sbrk_r>
 8001e94:	6038      	str	r0, [r7, #0]
 8001e96:	4629      	mov	r1, r5
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f85d 	bl	8001f58 <_sbrk_r>
 8001e9e:	1c43      	adds	r3, r0, #1
 8001ea0:	d123      	bne.n	8001eea <_malloc_r+0x92>
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	6033      	str	r3, [r6, #0]
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f000 f86c 	bl	8001f84 <__malloc_unlock>
 8001eac:	e7e3      	b.n	8001e76 <_malloc_r+0x1e>
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	1b5b      	subs	r3, r3, r5
 8001eb2:	d417      	bmi.n	8001ee4 <_malloc_r+0x8c>
 8001eb4:	2b0b      	cmp	r3, #11
 8001eb6:	d903      	bls.n	8001ec0 <_malloc_r+0x68>
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	441c      	add	r4, r3
 8001ebc:	6025      	str	r5, [r4, #0]
 8001ebe:	e004      	b.n	8001eca <_malloc_r+0x72>
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	42a2      	cmp	r2, r4
 8001ec4:	bf0c      	ite	eq
 8001ec6:	600b      	streq	r3, [r1, #0]
 8001ec8:	6053      	strne	r3, [r2, #4]
 8001eca:	4630      	mov	r0, r6
 8001ecc:	f000 f85a 	bl	8001f84 <__malloc_unlock>
 8001ed0:	f104 000b 	add.w	r0, r4, #11
 8001ed4:	1d23      	adds	r3, r4, #4
 8001ed6:	f020 0007 	bic.w	r0, r0, #7
 8001eda:	1ac2      	subs	r2, r0, r3
 8001edc:	d0cc      	beq.n	8001e78 <_malloc_r+0x20>
 8001ede:	1a1b      	subs	r3, r3, r0
 8001ee0:	50a3      	str	r3, [r4, r2]
 8001ee2:	e7c9      	b.n	8001e78 <_malloc_r+0x20>
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	6864      	ldr	r4, [r4, #4]
 8001ee8:	e7cc      	b.n	8001e84 <_malloc_r+0x2c>
 8001eea:	1cc4      	adds	r4, r0, #3
 8001eec:	f024 0403 	bic.w	r4, r4, #3
 8001ef0:	42a0      	cmp	r0, r4
 8001ef2:	d0e3      	beq.n	8001ebc <_malloc_r+0x64>
 8001ef4:	1a21      	subs	r1, r4, r0
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 f82e 	bl	8001f58 <_sbrk_r>
 8001efc:	3001      	adds	r0, #1
 8001efe:	d1dd      	bne.n	8001ebc <_malloc_r+0x64>
 8001f00:	e7cf      	b.n	8001ea2 <_malloc_r+0x4a>
 8001f02:	bf00      	nop
 8001f04:	200008c0 	.word	0x200008c0
 8001f08:	200008c4 	.word	0x200008c4

08001f0c <_realloc_r>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	4607      	mov	r7, r0
 8001f10:	4614      	mov	r4, r2
 8001f12:	460e      	mov	r6, r1
 8001f14:	b921      	cbnz	r1, 8001f20 <_realloc_r+0x14>
 8001f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	f7ff bf9c 	b.w	8001e58 <_malloc_r>
 8001f20:	b922      	cbnz	r2, 8001f2c <_realloc_r+0x20>
 8001f22:	f7ff ff49 	bl	8001db8 <_free_r>
 8001f26:	4625      	mov	r5, r4
 8001f28:	4628      	mov	r0, r5
 8001f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f2c:	f000 f830 	bl	8001f90 <_malloc_usable_size_r>
 8001f30:	42a0      	cmp	r0, r4
 8001f32:	d20f      	bcs.n	8001f54 <_realloc_r+0x48>
 8001f34:	4621      	mov	r1, r4
 8001f36:	4638      	mov	r0, r7
 8001f38:	f7ff ff8e 	bl	8001e58 <_malloc_r>
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d0f2      	beq.n	8001f28 <_realloc_r+0x1c>
 8001f42:	4631      	mov	r1, r6
 8001f44:	4622      	mov	r2, r4
 8001f46:	f7ff ff0f 	bl	8001d68 <memcpy>
 8001f4a:	4631      	mov	r1, r6
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	f7ff ff33 	bl	8001db8 <_free_r>
 8001f52:	e7e9      	b.n	8001f28 <_realloc_r+0x1c>
 8001f54:	4635      	mov	r5, r6
 8001f56:	e7e7      	b.n	8001f28 <_realloc_r+0x1c>

08001f58 <_sbrk_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4d06      	ldr	r5, [pc, #24]	; (8001f74 <_sbrk_r+0x1c>)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	602b      	str	r3, [r5, #0]
 8001f64:	f7ff fb5e 	bl	8001624 <_sbrk>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d102      	bne.n	8001f72 <_sbrk_r+0x1a>
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	b103      	cbz	r3, 8001f72 <_sbrk_r+0x1a>
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	200008d8 	.word	0x200008d8

08001f78 <__malloc_lock>:
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <__malloc_lock+0x8>)
 8001f7a:	f000 b811 	b.w	8001fa0 <__retarget_lock_acquire_recursive>
 8001f7e:	bf00      	nop
 8001f80:	200008e0 	.word	0x200008e0

08001f84 <__malloc_unlock>:
 8001f84:	4801      	ldr	r0, [pc, #4]	; (8001f8c <__malloc_unlock+0x8>)
 8001f86:	f000 b80c 	b.w	8001fa2 <__retarget_lock_release_recursive>
 8001f8a:	bf00      	nop
 8001f8c:	200008e0 	.word	0x200008e0

08001f90 <_malloc_usable_size_r>:
 8001f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f94:	1f18      	subs	r0, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bfbc      	itt	lt
 8001f9a:	580b      	ldrlt	r3, [r1, r0]
 8001f9c:	18c0      	addlt	r0, r0, r3
 8001f9e:	4770      	bx	lr

08001fa0 <__retarget_lock_acquire_recursive>:
 8001fa0:	4770      	bx	lr

08001fa2 <__retarget_lock_release_recursive>:
 8001fa2:	4770      	bx	lr

08001fa4 <_init>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

08001fb0 <_fini>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr
