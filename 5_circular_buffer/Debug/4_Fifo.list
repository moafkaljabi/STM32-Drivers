
4_Fifo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001820  08001820  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001820  08001820  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001820  08001820  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  20000064  0800188c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  0800188c  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f4e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000918  00000000  00000000  00022fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00023900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00023ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb0a  00000000  00000000  00023c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fdf  00000000  00000000  00033722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055865  00000000  00000000  00035701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008af66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d58  00000000  00000000  0008afbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016dc 	.word	0x080016dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080016dc 	.word	0x080016dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);



int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f87d 	bl	8000388 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f82f 	bl	80003b8 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <debug_uart_write>:

}


void debug_uart_write(int ch)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000390:	bf00      	nop
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <debug_uart_write+0x2c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR  =  (ch & 0xFF);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <debug_uart_write+0x2c>)
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	6053      	str	r3, [r2, #4]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40004400 	.word	0x40004400

080003b8 <compute_uart_bd>:
	SysTick->CTRL = 0;


}
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	085a      	lsrs	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	441a      	add	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d0:	b29b      	uxth	r3, r3
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
	...

080003e0 <tx_fifo_init>:
uint32_t volatile rx_get_itr;


/*Initialize tx fifo*/
void tx_fifo_init(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <tx_fifo_init+0x1c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <tx_fifo_init+0x20>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	20000898 	.word	0x20000898
 8000400:	20000894 	.word	0x20000894

08000404 <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t  tx_fifo_put(tx_dataType data)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <tx_fifo_put+0x4c>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <tx_fifo_put+0x50>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800041c:	f023 0303 	bic.w	r3, r3, #3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <tx_fifo_put+0x24>
	{
		/*Fifo is full*/
		return(TXFAIL);
 8000424:	2300      	movs	r3, #0
 8000426:	e00c      	b.n	8000442 <tx_fifo_put+0x3e>
	}

	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE -1)] = data;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <tx_fifo_put+0x4c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000430:	4909      	ldr	r1, [pc, #36]	; (8000458 <tx_fifo_put+0x54>)
 8000432:	79fa      	ldrb	r2, [r7, #7]
 8000434:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <tx_fifo_put+0x4c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <tx_fifo_put+0x4c>)
 800043e:	6013      	str	r3, [r2, #0]
	return(TXSUCCESS);
 8000440:	2301      	movs	r3, #1

}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000898 	.word	0x20000898
 8000454:	20000894 	.word	0x20000894
 8000458:	20000080 	.word	0x20000080

0800045c <tx_fifo_get>:

uint8_t  tx_fifo_get(tx_dataType *pdata)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	/*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr){
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <tx_fifo_get+0x40>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <tx_fifo_get+0x44>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d101      	bne.n	8000474 <tx_fifo_get+0x18>

		/*Fifo empty*/
		return(TXFAIL);
 8000470:	2300      	movs	r3, #0
 8000472:	e00d      	b.n	8000490 <tx_fifo_get+0x34>

	}
	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE -1)];
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <tx_fifo_get+0x44>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <tx_fifo_get+0x48>)
 800047e:	5cd2      	ldrb	r2, [r2, r3]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <tx_fifo_get+0x44>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <tx_fifo_get+0x44>)
 800048c:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 800048e:	2301      	movs	r3, #1
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	20000898 	.word	0x20000898
 80004a0:	20000894 	.word	0x20000894
 80004a4:	20000080 	.word	0x20000080

080004a8 <rx_fifo_init>:
}


/*Initialize rx fifo*/
void rx_fifo_init(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <rx_fifo_init+0x1c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <rx_fifo_init+0x20>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	2000088c 	.word	0x2000088c
 80004c8:	20000890 	.word	0x20000890

080004cc <rx_fifo_put>:

/*Put data into rx fifo*/

uint8_t  rx_fifo_put(rx_dataType data)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	/*Check if fifo is full*/
	if((rx_put_itr - rx_get_itr) & ~(RXFIFOSIZE -1))
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <rx_fifo_put+0x4c>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <rx_fifo_put+0x50>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80004e4:	f023 0303 	bic.w	r3, r3, #3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <rx_fifo_put+0x24>
	{
		/*Fifo is full*/
		return(RXFAIL);
 80004ec:	2300      	movs	r3, #0
 80004ee:	e00c      	b.n	800050a <rx_fifo_put+0x3e>
	}

	/*Put data into fifo*/
	RX_FIFO[rx_put_itr & (RXFIFOSIZE -1)] = data;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <rx_fifo_put+0x4c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f8:	4909      	ldr	r1, [pc, #36]	; (8000520 <rx_fifo_put+0x54>)
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	rx_put_itr++;
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <rx_fifo_put+0x4c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <rx_fifo_put+0x4c>)
 8000506:	6013      	str	r3, [r2, #0]
	return(RXSUCCESS);
 8000508:	2301      	movs	r3, #1

}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000088c 	.word	0x2000088c
 800051c:	20000890 	.word	0x20000890
 8000520:	20000480 	.word	0x20000480

08000524 <rx_fifo_get>:

uint8_t  rx_fifo_get(rx_dataType *pdata)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	/*Check if fifo is empty*/
	if(rx_put_itr == rx_get_itr){
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <rx_fifo_get+0x40>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <rx_fifo_get+0x44>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d101      	bne.n	800053c <rx_fifo_get+0x18>

		/*Fifo empty*/
		return(RXFAIL);
 8000538:	2300      	movs	r3, #0
 800053a:	e00d      	b.n	8000558 <rx_fifo_get+0x34>

	}
	/*Get the data*/
	*pdata =  RX_FIFO[rx_get_itr & (RXFIFOSIZE -1)];
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <rx_fifo_get+0x44>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <rx_fifo_get+0x48>)
 8000546:	5cd2      	ldrb	r2, [r2, r3]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	rx_get_itr++;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <rx_fifo_get+0x44>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <rx_fifo_get+0x44>)
 8000554:	6013      	str	r3, [r2, #0]

	return(RXSUCCESS);
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	2000088c 	.word	0x2000088c
 8000568:	20000890 	.word	0x20000890
 800056c:	20000480 	.word	0x20000480

08000570 <main>:
int my_tx_data[100];
int my_rx_data[100];


int main()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
	char tx_data,rx_data;
	debug_uart_init();
 8000576:	f7ff fe8f 	bl	8000298 <debug_uart_init>

	tx_fifo_init();
 800057a:	f7ff ff31 	bl	80003e0 <tx_fifo_init>
	rx_fifo_init();
 800057e:	f7ff ff93 	bl	80004a8 <rx_fifo_init>

	for(int i=0;i<100;i++)
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e010      	b.n	80005aa <main+0x3a>
	{
		tx_fifo_put(i*2);
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff37 	bl	8000404 <tx_fifo_put>
		rx_fifo_put(i+3);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3303      	adds	r3, #3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff94 	bl	80004cc <rx_fifo_put>
	for(int i=0;i<100;i++)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b63      	cmp	r3, #99	; 0x63
 80005ae:	ddeb      	ble.n	8000588 <main+0x18>

	}

	for(int i=0;i<100;i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	e016      	b.n	80005e4 <main+0x74>
	{
		tx_fifo_get(&tx_data);
 80005b6:	1cfb      	adds	r3, r7, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff4f 	bl	800045c <tx_fifo_get>
		rx_fifo_get(&rx_data);
 80005be:	1cbb      	adds	r3, r7, #2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffaf 	bl	8000524 <rx_fifo_get>

		my_tx_data[i] = tx_data;
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <main+0xac>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		my_rx_data[i] = rx_data;
 80005d2:	78bb      	ldrb	r3, [r7, #2]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <main+0xb0>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<100;i++)
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b63      	cmp	r3, #99	; 0x63
 80005e8:	dde5      	ble.n	80005b6 <main+0x46>


	}

	printf("-------------------TX Test------------------------\n\r");
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0xb4>)
 80005ec:	f000 f920 	bl	8000830 <iprintf>

	for(int i =0;i<100;i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e00b      	b.n	800060e <main+0x9e>
	{
		printf("Data at my_tx_data  idx %d  = %d \n\r",i,my_tx_data[i]);
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <main+0xac>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fe:	461a      	mov	r2, r3
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <main+0xb8>)
 8000604:	f000 f914 	bl	8000830 <iprintf>
	for(int i =0;i<100;i++)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3301      	adds	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b63      	cmp	r3, #99	; 0x63
 8000612:	ddf0      	ble.n	80005f6 <main+0x86>
	}

	printf("-------------------RX Test------------------------\n\r");
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0xbc>)
 8000616:	f000 f90b 	bl	8000830 <iprintf>
//
//		printf("Data at my_rx_data idx %d  = %d \n\r",i,my_rx_data[i]);
//	}


	while(1)
 800061a:	e7fe      	b.n	800061a <main+0xaa>
 800061c:	20000a2c 	.word	0x20000a2c
 8000620:	2000089c 	.word	0x2000089c
 8000624:	080016f4 	.word	0x080016f4
 8000628:	0800172c 	.word	0x0800172c
 800062c:	08001750 	.word	0x08001750

08000630 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	e00a      	b.n	8000658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000642:	f3af 8000 	nop.w
 8000646:	4601      	mov	r1, r0
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	60ba      	str	r2, [r7, #8]
 800064e:	b2ca      	uxtb	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf0      	blt.n	8000642 <_read+0x12>
	}

return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e009      	b.n	8000690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	60ba      	str	r2, [r7, #8]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdfb 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbf1      	blt.n	800067c <_write+0x12>
	}
	return len;
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_close>:

int _close(int file)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	return -1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ca:	605a      	str	r2, [r3, #4]
	return 0;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <_isatty>:

int _isatty(int file)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	return 1;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
	return 0;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <_sbrk+0x5c>)
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <_sbrk+0x60>)
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d102      	bne.n	800072e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <_sbrk+0x64>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <_sbrk+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d207      	bcs.n	800074c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800073c:	f000 f846 	bl	80007cc <__errno>
 8000740:	4603      	mov	r3, r0
 8000742:	220c      	movs	r2, #12
 8000744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	e009      	b.n	8000760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <_sbrk+0x64>)
 800075c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20020000 	.word	0x20020000
 800076c:	00000400 	.word	0x00000400
 8000770:	20000880 	.word	0x20000880
 8000774:	20000bd0 	.word	0x20000bd0

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f000 f817 	bl	80007d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff fee1 	bl	8000570 <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007bc:	08001828 	.word	0x08001828
  ldr r2, =_sbss
 80007c0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007c4:	20000bcc 	.word	0x20000bcc

080007c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>
	...

080007cc <__errno>:
 80007cc:	4b01      	ldr	r3, [pc, #4]	; (80007d4 <__errno+0x8>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000

080007d8 <__libc_init_array>:
 80007d8:	b570      	push	{r4, r5, r6, lr}
 80007da:	4d0d      	ldr	r5, [pc, #52]	; (8000810 <__libc_init_array+0x38>)
 80007dc:	4c0d      	ldr	r4, [pc, #52]	; (8000814 <__libc_init_array+0x3c>)
 80007de:	1b64      	subs	r4, r4, r5
 80007e0:	10a4      	asrs	r4, r4, #2
 80007e2:	2600      	movs	r6, #0
 80007e4:	42a6      	cmp	r6, r4
 80007e6:	d109      	bne.n	80007fc <__libc_init_array+0x24>
 80007e8:	4d0b      	ldr	r5, [pc, #44]	; (8000818 <__libc_init_array+0x40>)
 80007ea:	4c0c      	ldr	r4, [pc, #48]	; (800081c <__libc_init_array+0x44>)
 80007ec:	f000 ff76 	bl	80016dc <_init>
 80007f0:	1b64      	subs	r4, r4, r5
 80007f2:	10a4      	asrs	r4, r4, #2
 80007f4:	2600      	movs	r6, #0
 80007f6:	42a6      	cmp	r6, r4
 80007f8:	d105      	bne.n	8000806 <__libc_init_array+0x2e>
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000800:	4798      	blx	r3
 8000802:	3601      	adds	r6, #1
 8000804:	e7ee      	b.n	80007e4 <__libc_init_array+0xc>
 8000806:	f855 3b04 	ldr.w	r3, [r5], #4
 800080a:	4798      	blx	r3
 800080c:	3601      	adds	r6, #1
 800080e:	e7f2      	b.n	80007f6 <__libc_init_array+0x1e>
 8000810:	08001820 	.word	0x08001820
 8000814:	08001820 	.word	0x08001820
 8000818:	08001820 	.word	0x08001820
 800081c:	08001824 	.word	0x08001824

08000820 <memset>:
 8000820:	4402      	add	r2, r0
 8000822:	4603      	mov	r3, r0
 8000824:	4293      	cmp	r3, r2
 8000826:	d100      	bne.n	800082a <memset+0xa>
 8000828:	4770      	bx	lr
 800082a:	f803 1b01 	strb.w	r1, [r3], #1
 800082e:	e7f9      	b.n	8000824 <memset+0x4>

08000830 <iprintf>:
 8000830:	b40f      	push	{r0, r1, r2, r3}
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <iprintf+0x2c>)
 8000834:	b513      	push	{r0, r1, r4, lr}
 8000836:	681c      	ldr	r4, [r3, #0]
 8000838:	b124      	cbz	r4, 8000844 <iprintf+0x14>
 800083a:	69a3      	ldr	r3, [r4, #24]
 800083c:	b913      	cbnz	r3, 8000844 <iprintf+0x14>
 800083e:	4620      	mov	r0, r4
 8000840:	f000 f866 	bl	8000910 <__sinit>
 8000844:	ab05      	add	r3, sp, #20
 8000846:	9a04      	ldr	r2, [sp, #16]
 8000848:	68a1      	ldr	r1, [r4, #8]
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	4620      	mov	r0, r4
 800084e:	f000 f983 	bl	8000b58 <_vfiprintf_r>
 8000852:	b002      	add	sp, #8
 8000854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr
 800085c:	20000000 	.word	0x20000000

08000860 <std>:
 8000860:	2300      	movs	r3, #0
 8000862:	b510      	push	{r4, lr}
 8000864:	4604      	mov	r4, r0
 8000866:	e9c0 3300 	strd	r3, r3, [r0]
 800086a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800086e:	6083      	str	r3, [r0, #8]
 8000870:	8181      	strh	r1, [r0, #12]
 8000872:	6643      	str	r3, [r0, #100]	; 0x64
 8000874:	81c2      	strh	r2, [r0, #14]
 8000876:	6183      	str	r3, [r0, #24]
 8000878:	4619      	mov	r1, r3
 800087a:	2208      	movs	r2, #8
 800087c:	305c      	adds	r0, #92	; 0x5c
 800087e:	f7ff ffcf 	bl	8000820 <memset>
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <std+0x38>)
 8000884:	6263      	str	r3, [r4, #36]	; 0x24
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <std+0x3c>)
 8000888:	62a3      	str	r3, [r4, #40]	; 0x28
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <std+0x40>)
 800088c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <std+0x44>)
 8000890:	6224      	str	r4, [r4, #32]
 8000892:	6323      	str	r3, [r4, #48]	; 0x30
 8000894:	bd10      	pop	{r4, pc}
 8000896:	bf00      	nop
 8000898:	08001101 	.word	0x08001101
 800089c:	08001123 	.word	0x08001123
 80008a0:	0800115b 	.word	0x0800115b
 80008a4:	0800117f 	.word	0x0800117f

080008a8 <_cleanup_r>:
 80008a8:	4901      	ldr	r1, [pc, #4]	; (80008b0 <_cleanup_r+0x8>)
 80008aa:	f000 b8af 	b.w	8000a0c <_fwalk_reent>
 80008ae:	bf00      	nop
 80008b0:	08001459 	.word	0x08001459

080008b4 <__sfmoreglue>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	1e4a      	subs	r2, r1, #1
 80008b8:	2568      	movs	r5, #104	; 0x68
 80008ba:	4355      	muls	r5, r2
 80008bc:	460e      	mov	r6, r1
 80008be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008c2:	f000 f8c5 	bl	8000a50 <_malloc_r>
 80008c6:	4604      	mov	r4, r0
 80008c8:	b140      	cbz	r0, 80008dc <__sfmoreglue+0x28>
 80008ca:	2100      	movs	r1, #0
 80008cc:	e9c0 1600 	strd	r1, r6, [r0]
 80008d0:	300c      	adds	r0, #12
 80008d2:	60a0      	str	r0, [r4, #8]
 80008d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008d8:	f7ff ffa2 	bl	8000820 <memset>
 80008dc:	4620      	mov	r0, r4
 80008de:	bd70      	pop	{r4, r5, r6, pc}

080008e0 <__sfp_lock_acquire>:
 80008e0:	4801      	ldr	r0, [pc, #4]	; (80008e8 <__sfp_lock_acquire+0x8>)
 80008e2:	f000 b8b3 	b.w	8000a4c <__retarget_lock_acquire_recursive>
 80008e6:	bf00      	nop
 80008e8:	20000bc4 	.word	0x20000bc4

080008ec <__sfp_lock_release>:
 80008ec:	4801      	ldr	r0, [pc, #4]	; (80008f4 <__sfp_lock_release+0x8>)
 80008ee:	f000 b8ae 	b.w	8000a4e <__retarget_lock_release_recursive>
 80008f2:	bf00      	nop
 80008f4:	20000bc4 	.word	0x20000bc4

080008f8 <__sinit_lock_acquire>:
 80008f8:	4801      	ldr	r0, [pc, #4]	; (8000900 <__sinit_lock_acquire+0x8>)
 80008fa:	f000 b8a7 	b.w	8000a4c <__retarget_lock_acquire_recursive>
 80008fe:	bf00      	nop
 8000900:	20000bbf 	.word	0x20000bbf

08000904 <__sinit_lock_release>:
 8000904:	4801      	ldr	r0, [pc, #4]	; (800090c <__sinit_lock_release+0x8>)
 8000906:	f000 b8a2 	b.w	8000a4e <__retarget_lock_release_recursive>
 800090a:	bf00      	nop
 800090c:	20000bbf 	.word	0x20000bbf

08000910 <__sinit>:
 8000910:	b510      	push	{r4, lr}
 8000912:	4604      	mov	r4, r0
 8000914:	f7ff fff0 	bl	80008f8 <__sinit_lock_acquire>
 8000918:	69a3      	ldr	r3, [r4, #24]
 800091a:	b11b      	cbz	r3, 8000924 <__sinit+0x14>
 800091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000920:	f7ff bff0 	b.w	8000904 <__sinit_lock_release>
 8000924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000928:	6523      	str	r3, [r4, #80]	; 0x50
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <__sinit+0x68>)
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <__sinit+0x6c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	62a2      	str	r2, [r4, #40]	; 0x28
 8000932:	42a3      	cmp	r3, r4
 8000934:	bf04      	itt	eq
 8000936:	2301      	moveq	r3, #1
 8000938:	61a3      	streq	r3, [r4, #24]
 800093a:	4620      	mov	r0, r4
 800093c:	f000 f820 	bl	8000980 <__sfp>
 8000940:	6060      	str	r0, [r4, #4]
 8000942:	4620      	mov	r0, r4
 8000944:	f000 f81c 	bl	8000980 <__sfp>
 8000948:	60a0      	str	r0, [r4, #8]
 800094a:	4620      	mov	r0, r4
 800094c:	f000 f818 	bl	8000980 <__sfp>
 8000950:	2200      	movs	r2, #0
 8000952:	60e0      	str	r0, [r4, #12]
 8000954:	2104      	movs	r1, #4
 8000956:	6860      	ldr	r0, [r4, #4]
 8000958:	f7ff ff82 	bl	8000860 <std>
 800095c:	68a0      	ldr	r0, [r4, #8]
 800095e:	2201      	movs	r2, #1
 8000960:	2109      	movs	r1, #9
 8000962:	f7ff ff7d 	bl	8000860 <std>
 8000966:	68e0      	ldr	r0, [r4, #12]
 8000968:	2202      	movs	r2, #2
 800096a:	2112      	movs	r1, #18
 800096c:	f7ff ff78 	bl	8000860 <std>
 8000970:	2301      	movs	r3, #1
 8000972:	61a3      	str	r3, [r4, #24]
 8000974:	e7d2      	b.n	800091c <__sinit+0xc>
 8000976:	bf00      	nop
 8000978:	08001788 	.word	0x08001788
 800097c:	080008a9 	.word	0x080008a9

08000980 <__sfp>:
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	4607      	mov	r7, r0
 8000984:	f7ff ffac 	bl	80008e0 <__sfp_lock_acquire>
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <__sfp+0x84>)
 800098a:	681e      	ldr	r6, [r3, #0]
 800098c:	69b3      	ldr	r3, [r6, #24]
 800098e:	b913      	cbnz	r3, 8000996 <__sfp+0x16>
 8000990:	4630      	mov	r0, r6
 8000992:	f7ff ffbd 	bl	8000910 <__sinit>
 8000996:	3648      	adds	r6, #72	; 0x48
 8000998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800099c:	3b01      	subs	r3, #1
 800099e:	d503      	bpl.n	80009a8 <__sfp+0x28>
 80009a0:	6833      	ldr	r3, [r6, #0]
 80009a2:	b30b      	cbz	r3, 80009e8 <__sfp+0x68>
 80009a4:	6836      	ldr	r6, [r6, #0]
 80009a6:	e7f7      	b.n	8000998 <__sfp+0x18>
 80009a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009ac:	b9d5      	cbnz	r5, 80009e4 <__sfp+0x64>
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <__sfp+0x88>)
 80009b0:	60e3      	str	r3, [r4, #12]
 80009b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009b6:	6665      	str	r5, [r4, #100]	; 0x64
 80009b8:	f000 f847 	bl	8000a4a <__retarget_lock_init_recursive>
 80009bc:	f7ff ff96 	bl	80008ec <__sfp_lock_release>
 80009c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80009c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80009c8:	6025      	str	r5, [r4, #0]
 80009ca:	61a5      	str	r5, [r4, #24]
 80009cc:	2208      	movs	r2, #8
 80009ce:	4629      	mov	r1, r5
 80009d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009d4:	f7ff ff24 	bl	8000820 <memset>
 80009d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009e0:	4620      	mov	r0, r4
 80009e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e4:	3468      	adds	r4, #104	; 0x68
 80009e6:	e7d9      	b.n	800099c <__sfp+0x1c>
 80009e8:	2104      	movs	r1, #4
 80009ea:	4638      	mov	r0, r7
 80009ec:	f7ff ff62 	bl	80008b4 <__sfmoreglue>
 80009f0:	4604      	mov	r4, r0
 80009f2:	6030      	str	r0, [r6, #0]
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d1d5      	bne.n	80009a4 <__sfp+0x24>
 80009f8:	f7ff ff78 	bl	80008ec <__sfp_lock_release>
 80009fc:	230c      	movs	r3, #12
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	e7ee      	b.n	80009e0 <__sfp+0x60>
 8000a02:	bf00      	nop
 8000a04:	08001788 	.word	0x08001788
 8000a08:	ffff0001 	.word	0xffff0001

08000a0c <_fwalk_reent>:
 8000a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a10:	4606      	mov	r6, r0
 8000a12:	4688      	mov	r8, r1
 8000a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a18:	2700      	movs	r7, #0
 8000a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8000a22:	d505      	bpl.n	8000a30 <_fwalk_reent+0x24>
 8000a24:	6824      	ldr	r4, [r4, #0]
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d1f7      	bne.n	8000a1a <_fwalk_reent+0xe>
 8000a2a:	4638      	mov	r0, r7
 8000a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a30:	89ab      	ldrh	r3, [r5, #12]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d907      	bls.n	8000a46 <_fwalk_reent+0x3a>
 8000a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	d003      	beq.n	8000a46 <_fwalk_reent+0x3a>
 8000a3e:	4629      	mov	r1, r5
 8000a40:	4630      	mov	r0, r6
 8000a42:	47c0      	blx	r8
 8000a44:	4307      	orrs	r7, r0
 8000a46:	3568      	adds	r5, #104	; 0x68
 8000a48:	e7e9      	b.n	8000a1e <_fwalk_reent+0x12>

08000a4a <__retarget_lock_init_recursive>:
 8000a4a:	4770      	bx	lr

08000a4c <__retarget_lock_acquire_recursive>:
 8000a4c:	4770      	bx	lr

08000a4e <__retarget_lock_release_recursive>:
 8000a4e:	4770      	bx	lr

08000a50 <_malloc_r>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	1ccd      	adds	r5, r1, #3
 8000a54:	f025 0503 	bic.w	r5, r5, #3
 8000a58:	3508      	adds	r5, #8
 8000a5a:	2d0c      	cmp	r5, #12
 8000a5c:	bf38      	it	cc
 8000a5e:	250c      	movcc	r5, #12
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	4606      	mov	r6, r0
 8000a64:	db01      	blt.n	8000a6a <_malloc_r+0x1a>
 8000a66:	42a9      	cmp	r1, r5
 8000a68:	d903      	bls.n	8000a72 <_malloc_r+0x22>
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	6033      	str	r3, [r6, #0]
 8000a6e:	2000      	movs	r0, #0
 8000a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a72:	f000 fda3 	bl	80015bc <__malloc_lock>
 8000a76:	4921      	ldr	r1, [pc, #132]	; (8000afc <_malloc_r+0xac>)
 8000a78:	680a      	ldr	r2, [r1, #0]
 8000a7a:	4614      	mov	r4, r2
 8000a7c:	b99c      	cbnz	r4, 8000aa6 <_malloc_r+0x56>
 8000a7e:	4f20      	ldr	r7, [pc, #128]	; (8000b00 <_malloc_r+0xb0>)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b923      	cbnz	r3, 8000a8e <_malloc_r+0x3e>
 8000a84:	4621      	mov	r1, r4
 8000a86:	4630      	mov	r0, r6
 8000a88:	f000 fb2a 	bl	80010e0 <_sbrk_r>
 8000a8c:	6038      	str	r0, [r7, #0]
 8000a8e:	4629      	mov	r1, r5
 8000a90:	4630      	mov	r0, r6
 8000a92:	f000 fb25 	bl	80010e0 <_sbrk_r>
 8000a96:	1c43      	adds	r3, r0, #1
 8000a98:	d123      	bne.n	8000ae2 <_malloc_r+0x92>
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	6033      	str	r3, [r6, #0]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	f000 fd92 	bl	80015c8 <__malloc_unlock>
 8000aa4:	e7e3      	b.n	8000a6e <_malloc_r+0x1e>
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	1b5b      	subs	r3, r3, r5
 8000aaa:	d417      	bmi.n	8000adc <_malloc_r+0x8c>
 8000aac:	2b0b      	cmp	r3, #11
 8000aae:	d903      	bls.n	8000ab8 <_malloc_r+0x68>
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	441c      	add	r4, r3
 8000ab4:	6025      	str	r5, [r4, #0]
 8000ab6:	e004      	b.n	8000ac2 <_malloc_r+0x72>
 8000ab8:	6863      	ldr	r3, [r4, #4]
 8000aba:	42a2      	cmp	r2, r4
 8000abc:	bf0c      	ite	eq
 8000abe:	600b      	streq	r3, [r1, #0]
 8000ac0:	6053      	strne	r3, [r2, #4]
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	f000 fd80 	bl	80015c8 <__malloc_unlock>
 8000ac8:	f104 000b 	add.w	r0, r4, #11
 8000acc:	1d23      	adds	r3, r4, #4
 8000ace:	f020 0007 	bic.w	r0, r0, #7
 8000ad2:	1ac2      	subs	r2, r0, r3
 8000ad4:	d0cc      	beq.n	8000a70 <_malloc_r+0x20>
 8000ad6:	1a1b      	subs	r3, r3, r0
 8000ad8:	50a3      	str	r3, [r4, r2]
 8000ada:	e7c9      	b.n	8000a70 <_malloc_r+0x20>
 8000adc:	4622      	mov	r2, r4
 8000ade:	6864      	ldr	r4, [r4, #4]
 8000ae0:	e7cc      	b.n	8000a7c <_malloc_r+0x2c>
 8000ae2:	1cc4      	adds	r4, r0, #3
 8000ae4:	f024 0403 	bic.w	r4, r4, #3
 8000ae8:	42a0      	cmp	r0, r4
 8000aea:	d0e3      	beq.n	8000ab4 <_malloc_r+0x64>
 8000aec:	1a21      	subs	r1, r4, r0
 8000aee:	4630      	mov	r0, r6
 8000af0:	f000 faf6 	bl	80010e0 <_sbrk_r>
 8000af4:	3001      	adds	r0, #1
 8000af6:	d1dd      	bne.n	8000ab4 <_malloc_r+0x64>
 8000af8:	e7cf      	b.n	8000a9a <_malloc_r+0x4a>
 8000afa:	bf00      	nop
 8000afc:	20000884 	.word	0x20000884
 8000b00:	20000888 	.word	0x20000888

08000b04 <__sfputc_r>:
 8000b04:	6893      	ldr	r3, [r2, #8]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	b410      	push	{r4}
 8000b0c:	6093      	str	r3, [r2, #8]
 8000b0e:	da08      	bge.n	8000b22 <__sfputc_r+0x1e>
 8000b10:	6994      	ldr	r4, [r2, #24]
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	db01      	blt.n	8000b1a <__sfputc_r+0x16>
 8000b16:	290a      	cmp	r1, #10
 8000b18:	d103      	bne.n	8000b22 <__sfputc_r+0x1e>
 8000b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b1e:	f000 bb33 	b.w	8001188 <__swbuf_r>
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	1c58      	adds	r0, r3, #1
 8000b26:	6010      	str	r0, [r2, #0]
 8000b28:	7019      	strb	r1, [r3, #0]
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <__sfputs_r>:
 8000b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b34:	4606      	mov	r6, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	4614      	mov	r4, r2
 8000b3a:	18d5      	adds	r5, r2, r3
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d101      	bne.n	8000b44 <__sfputs_r+0x12>
 8000b40:	2000      	movs	r0, #0
 8000b42:	e007      	b.n	8000b54 <__sfputs_r+0x22>
 8000b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b48:	463a      	mov	r2, r7
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f7ff ffda 	bl	8000b04 <__sfputc_r>
 8000b50:	1c43      	adds	r3, r0, #1
 8000b52:	d1f3      	bne.n	8000b3c <__sfputs_r+0xa>
 8000b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b58 <_vfiprintf_r>:
 8000b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5c:	460d      	mov	r5, r1
 8000b5e:	b09d      	sub	sp, #116	; 0x74
 8000b60:	4614      	mov	r4, r2
 8000b62:	4698      	mov	r8, r3
 8000b64:	4606      	mov	r6, r0
 8000b66:	b118      	cbz	r0, 8000b70 <_vfiprintf_r+0x18>
 8000b68:	6983      	ldr	r3, [r0, #24]
 8000b6a:	b90b      	cbnz	r3, 8000b70 <_vfiprintf_r+0x18>
 8000b6c:	f7ff fed0 	bl	8000910 <__sinit>
 8000b70:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <_vfiprintf_r+0x240>)
 8000b72:	429d      	cmp	r5, r3
 8000b74:	d11b      	bne.n	8000bae <_vfiprintf_r+0x56>
 8000b76:	6875      	ldr	r5, [r6, #4]
 8000b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b7a:	07d9      	lsls	r1, r3, #31
 8000b7c:	d405      	bmi.n	8000b8a <_vfiprintf_r+0x32>
 8000b7e:	89ab      	ldrh	r3, [r5, #12]
 8000b80:	059a      	lsls	r2, r3, #22
 8000b82:	d402      	bmi.n	8000b8a <_vfiprintf_r+0x32>
 8000b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b86:	f7ff ff61 	bl	8000a4c <__retarget_lock_acquire_recursive>
 8000b8a:	89ab      	ldrh	r3, [r5, #12]
 8000b8c:	071b      	lsls	r3, r3, #28
 8000b8e:	d501      	bpl.n	8000b94 <_vfiprintf_r+0x3c>
 8000b90:	692b      	ldr	r3, [r5, #16]
 8000b92:	b9eb      	cbnz	r3, 8000bd0 <_vfiprintf_r+0x78>
 8000b94:	4629      	mov	r1, r5
 8000b96:	4630      	mov	r0, r6
 8000b98:	f000 fb5a 	bl	8001250 <__swsetup_r>
 8000b9c:	b1c0      	cbz	r0, 8000bd0 <_vfiprintf_r+0x78>
 8000b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba0:	07dc      	lsls	r4, r3, #31
 8000ba2:	d50e      	bpl.n	8000bc2 <_vfiprintf_r+0x6a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	b01d      	add	sp, #116	; 0x74
 8000baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bae:	4b7b      	ldr	r3, [pc, #492]	; (8000d9c <_vfiprintf_r+0x244>)
 8000bb0:	429d      	cmp	r5, r3
 8000bb2:	d101      	bne.n	8000bb8 <_vfiprintf_r+0x60>
 8000bb4:	68b5      	ldr	r5, [r6, #8]
 8000bb6:	e7df      	b.n	8000b78 <_vfiprintf_r+0x20>
 8000bb8:	4b79      	ldr	r3, [pc, #484]	; (8000da0 <_vfiprintf_r+0x248>)
 8000bba:	429d      	cmp	r5, r3
 8000bbc:	bf08      	it	eq
 8000bbe:	68f5      	ldreq	r5, [r6, #12]
 8000bc0:	e7da      	b.n	8000b78 <_vfiprintf_r+0x20>
 8000bc2:	89ab      	ldrh	r3, [r5, #12]
 8000bc4:	0598      	lsls	r0, r3, #22
 8000bc6:	d4ed      	bmi.n	8000ba4 <_vfiprintf_r+0x4c>
 8000bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bca:	f7ff ff40 	bl	8000a4e <__retarget_lock_release_recursive>
 8000bce:	e7e9      	b.n	8000ba4 <_vfiprintf_r+0x4c>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bde:	2330      	movs	r3, #48	; 0x30
 8000be0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000da4 <_vfiprintf_r+0x24c>
 8000be4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000be8:	f04f 0901 	mov.w	r9, #1
 8000bec:	4623      	mov	r3, r4
 8000bee:	469a      	mov	sl, r3
 8000bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bf4:	b10a      	cbz	r2, 8000bfa <_vfiprintf_r+0xa2>
 8000bf6:	2a25      	cmp	r2, #37	; 0x25
 8000bf8:	d1f9      	bne.n	8000bee <_vfiprintf_r+0x96>
 8000bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8000bfe:	d00b      	beq.n	8000c18 <_vfiprintf_r+0xc0>
 8000c00:	465b      	mov	r3, fp
 8000c02:	4622      	mov	r2, r4
 8000c04:	4629      	mov	r1, r5
 8000c06:	4630      	mov	r0, r6
 8000c08:	f7ff ff93 	bl	8000b32 <__sfputs_r>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	f000 80aa 	beq.w	8000d66 <_vfiprintf_r+0x20e>
 8000c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c14:	445a      	add	r2, fp
 8000c16:	9209      	str	r2, [sp, #36]	; 0x24
 8000c18:	f89a 3000 	ldrb.w	r3, [sl]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 80a2 	beq.w	8000d66 <_vfiprintf_r+0x20e>
 8000c22:	2300      	movs	r3, #0
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c2c:	f10a 0a01 	add.w	sl, sl, #1
 8000c30:	9304      	str	r3, [sp, #16]
 8000c32:	9307      	str	r3, [sp, #28]
 8000c34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c38:	931a      	str	r3, [sp, #104]	; 0x68
 8000c3a:	4654      	mov	r4, sl
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c42:	4858      	ldr	r0, [pc, #352]	; (8000da4 <_vfiprintf_r+0x24c>)
 8000c44:	f7ff facc 	bl	80001e0 <memchr>
 8000c48:	9a04      	ldr	r2, [sp, #16]
 8000c4a:	b9d8      	cbnz	r0, 8000c84 <_vfiprintf_r+0x12c>
 8000c4c:	06d1      	lsls	r1, r2, #27
 8000c4e:	bf44      	itt	mi
 8000c50:	2320      	movmi	r3, #32
 8000c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c56:	0713      	lsls	r3, r2, #28
 8000c58:	bf44      	itt	mi
 8000c5a:	232b      	movmi	r3, #43	; 0x2b
 8000c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c60:	f89a 3000 	ldrb.w	r3, [sl]
 8000c64:	2b2a      	cmp	r3, #42	; 0x2a
 8000c66:	d015      	beq.n	8000c94 <_vfiprintf_r+0x13c>
 8000c68:	9a07      	ldr	r2, [sp, #28]
 8000c6a:	4654      	mov	r4, sl
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f04f 0c0a 	mov.w	ip, #10
 8000c72:	4621      	mov	r1, r4
 8000c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c78:	3b30      	subs	r3, #48	; 0x30
 8000c7a:	2b09      	cmp	r3, #9
 8000c7c:	d94e      	bls.n	8000d1c <_vfiprintf_r+0x1c4>
 8000c7e:	b1b0      	cbz	r0, 8000cae <_vfiprintf_r+0x156>
 8000c80:	9207      	str	r2, [sp, #28]
 8000c82:	e014      	b.n	8000cae <_vfiprintf_r+0x156>
 8000c84:	eba0 0308 	sub.w	r3, r0, r8
 8000c88:	fa09 f303 	lsl.w	r3, r9, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	9304      	str	r3, [sp, #16]
 8000c90:	46a2      	mov	sl, r4
 8000c92:	e7d2      	b.n	8000c3a <_vfiprintf_r+0xe2>
 8000c94:	9b03      	ldr	r3, [sp, #12]
 8000c96:	1d19      	adds	r1, r3, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	9103      	str	r1, [sp, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bfbb      	ittet	lt
 8000ca0:	425b      	neglt	r3, r3
 8000ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ca6:	9307      	strge	r3, [sp, #28]
 8000ca8:	9307      	strlt	r3, [sp, #28]
 8000caa:	bfb8      	it	lt
 8000cac:	9204      	strlt	r2, [sp, #16]
 8000cae:	7823      	ldrb	r3, [r4, #0]
 8000cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb2:	d10c      	bne.n	8000cce <_vfiprintf_r+0x176>
 8000cb4:	7863      	ldrb	r3, [r4, #1]
 8000cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb8:	d135      	bne.n	8000d26 <_vfiprintf_r+0x1ce>
 8000cba:	9b03      	ldr	r3, [sp, #12]
 8000cbc:	1d1a      	adds	r2, r3, #4
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	9203      	str	r2, [sp, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfb8      	it	lt
 8000cc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cca:	3402      	adds	r4, #2
 8000ccc:	9305      	str	r3, [sp, #20]
 8000cce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000db4 <_vfiprintf_r+0x25c>
 8000cd2:	7821      	ldrb	r1, [r4, #0]
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	4650      	mov	r0, sl
 8000cd8:	f7ff fa82 	bl	80001e0 <memchr>
 8000cdc:	b140      	cbz	r0, 8000cf0 <_vfiprintf_r+0x198>
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	eba0 000a 	sub.w	r0, r0, sl
 8000ce4:	fa03 f000 	lsl.w	r0, r3, r0
 8000ce8:	9b04      	ldr	r3, [sp, #16]
 8000cea:	4303      	orrs	r3, r0
 8000cec:	3401      	adds	r4, #1
 8000cee:	9304      	str	r3, [sp, #16]
 8000cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <_vfiprintf_r+0x250>)
 8000cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cfa:	2206      	movs	r2, #6
 8000cfc:	f7ff fa70 	bl	80001e0 <memchr>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d03f      	beq.n	8000d84 <_vfiprintf_r+0x22c>
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <_vfiprintf_r+0x254>)
 8000d06:	bb1b      	cbnz	r3, 8000d50 <_vfiprintf_r+0x1f8>
 8000d08:	9b03      	ldr	r3, [sp, #12]
 8000d0a:	3307      	adds	r3, #7
 8000d0c:	f023 0307 	bic.w	r3, r3, #7
 8000d10:	3308      	adds	r3, #8
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d16:	443b      	add	r3, r7
 8000d18:	9309      	str	r3, [sp, #36]	; 0x24
 8000d1a:	e767      	b.n	8000bec <_vfiprintf_r+0x94>
 8000d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d20:	460c      	mov	r4, r1
 8000d22:	2001      	movs	r0, #1
 8000d24:	e7a5      	b.n	8000c72 <_vfiprintf_r+0x11a>
 8000d26:	2300      	movs	r3, #0
 8000d28:	3401      	adds	r4, #1
 8000d2a:	9305      	str	r3, [sp, #20]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 0c0a 	mov.w	ip, #10
 8000d32:	4620      	mov	r0, r4
 8000d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d38:	3a30      	subs	r2, #48	; 0x30
 8000d3a:	2a09      	cmp	r2, #9
 8000d3c:	d903      	bls.n	8000d46 <_vfiprintf_r+0x1ee>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0c5      	beq.n	8000cce <_vfiprintf_r+0x176>
 8000d42:	9105      	str	r1, [sp, #20]
 8000d44:	e7c3      	b.n	8000cce <_vfiprintf_r+0x176>
 8000d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e7f0      	b.n	8000d32 <_vfiprintf_r+0x1da>
 8000d50:	ab03      	add	r3, sp, #12
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	462a      	mov	r2, r5
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <_vfiprintf_r+0x258>)
 8000d58:	a904      	add	r1, sp, #16
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f3af 8000 	nop.w
 8000d60:	4607      	mov	r7, r0
 8000d62:	1c78      	adds	r0, r7, #1
 8000d64:	d1d6      	bne.n	8000d14 <_vfiprintf_r+0x1bc>
 8000d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d68:	07d9      	lsls	r1, r3, #31
 8000d6a:	d405      	bmi.n	8000d78 <_vfiprintf_r+0x220>
 8000d6c:	89ab      	ldrh	r3, [r5, #12]
 8000d6e:	059a      	lsls	r2, r3, #22
 8000d70:	d402      	bmi.n	8000d78 <_vfiprintf_r+0x220>
 8000d72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d74:	f7ff fe6b 	bl	8000a4e <__retarget_lock_release_recursive>
 8000d78:	89ab      	ldrh	r3, [r5, #12]
 8000d7a:	065b      	lsls	r3, r3, #25
 8000d7c:	f53f af12 	bmi.w	8000ba4 <_vfiprintf_r+0x4c>
 8000d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d82:	e711      	b.n	8000ba8 <_vfiprintf_r+0x50>
 8000d84:	ab03      	add	r3, sp, #12
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	462a      	mov	r2, r5
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <_vfiprintf_r+0x258>)
 8000d8c:	a904      	add	r1, sp, #16
 8000d8e:	4630      	mov	r0, r6
 8000d90:	f000 f880 	bl	8000e94 <_printf_i>
 8000d94:	e7e4      	b.n	8000d60 <_vfiprintf_r+0x208>
 8000d96:	bf00      	nop
 8000d98:	080017ac 	.word	0x080017ac
 8000d9c:	080017cc 	.word	0x080017cc
 8000da0:	0800178c 	.word	0x0800178c
 8000da4:	080017ec 	.word	0x080017ec
 8000da8:	080017f6 	.word	0x080017f6
 8000dac:	00000000 	.word	0x00000000
 8000db0:	08000b33 	.word	0x08000b33
 8000db4:	080017f2 	.word	0x080017f2

08000db8 <_printf_common>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	4616      	mov	r6, r2
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	688a      	ldr	r2, [r1, #8]
 8000dc2:	690b      	ldr	r3, [r1, #16]
 8000dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	bfb8      	it	lt
 8000dcc:	4613      	movlt	r3, r2
 8000dce:	6033      	str	r3, [r6, #0]
 8000dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	b10a      	cbz	r2, 8000dde <_printf_common+0x26>
 8000dda:	3301      	adds	r3, #1
 8000ddc:	6033      	str	r3, [r6, #0]
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	0699      	lsls	r1, r3, #26
 8000de2:	bf42      	ittt	mi
 8000de4:	6833      	ldrmi	r3, [r6, #0]
 8000de6:	3302      	addmi	r3, #2
 8000de8:	6033      	strmi	r3, [r6, #0]
 8000dea:	6825      	ldr	r5, [r4, #0]
 8000dec:	f015 0506 	ands.w	r5, r5, #6
 8000df0:	d106      	bne.n	8000e00 <_printf_common+0x48>
 8000df2:	f104 0a19 	add.w	sl, r4, #25
 8000df6:	68e3      	ldr	r3, [r4, #12]
 8000df8:	6832      	ldr	r2, [r6, #0]
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	dc26      	bgt.n	8000e4e <_printf_common+0x96>
 8000e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e04:	1e13      	subs	r3, r2, #0
 8000e06:	6822      	ldr	r2, [r4, #0]
 8000e08:	bf18      	it	ne
 8000e0a:	2301      	movne	r3, #1
 8000e0c:	0692      	lsls	r2, r2, #26
 8000e0e:	d42b      	bmi.n	8000e68 <_printf_common+0xb0>
 8000e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e14:	4649      	mov	r1, r9
 8000e16:	4638      	mov	r0, r7
 8000e18:	47c0      	blx	r8
 8000e1a:	3001      	adds	r0, #1
 8000e1c:	d01e      	beq.n	8000e5c <_printf_common+0xa4>
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	68e5      	ldr	r5, [r4, #12]
 8000e22:	6832      	ldr	r2, [r6, #0]
 8000e24:	f003 0306 	and.w	r3, r3, #6
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	bf08      	it	eq
 8000e2c:	1aad      	subeq	r5, r5, r2
 8000e2e:	68a3      	ldr	r3, [r4, #8]
 8000e30:	6922      	ldr	r2, [r4, #16]
 8000e32:	bf0c      	ite	eq
 8000e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e38:	2500      	movne	r5, #0
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	bfc4      	itt	gt
 8000e3e:	1a9b      	subgt	r3, r3, r2
 8000e40:	18ed      	addgt	r5, r5, r3
 8000e42:	2600      	movs	r6, #0
 8000e44:	341a      	adds	r4, #26
 8000e46:	42b5      	cmp	r5, r6
 8000e48:	d11a      	bne.n	8000e80 <_printf_common+0xc8>
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	e008      	b.n	8000e60 <_printf_common+0xa8>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	4652      	mov	r2, sl
 8000e52:	4649      	mov	r1, r9
 8000e54:	4638      	mov	r0, r7
 8000e56:	47c0      	blx	r8
 8000e58:	3001      	adds	r0, #1
 8000e5a:	d103      	bne.n	8000e64 <_printf_common+0xac>
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e64:	3501      	adds	r5, #1
 8000e66:	e7c6      	b.n	8000df6 <_printf_common+0x3e>
 8000e68:	18e1      	adds	r1, r4, r3
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	2030      	movs	r0, #48	; 0x30
 8000e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e72:	4422      	add	r2, r4
 8000e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	e7c7      	b.n	8000e10 <_printf_common+0x58>
 8000e80:	2301      	movs	r3, #1
 8000e82:	4622      	mov	r2, r4
 8000e84:	4649      	mov	r1, r9
 8000e86:	4638      	mov	r0, r7
 8000e88:	47c0      	blx	r8
 8000e8a:	3001      	adds	r0, #1
 8000e8c:	d0e6      	beq.n	8000e5c <_printf_common+0xa4>
 8000e8e:	3601      	adds	r6, #1
 8000e90:	e7d9      	b.n	8000e46 <_printf_common+0x8e>
	...

08000e94 <_printf_i>:
 8000e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	460c      	mov	r4, r1
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	7e27      	ldrb	r7, [r4, #24]
 8000e9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ea0:	2f78      	cmp	r7, #120	; 0x78
 8000ea2:	4680      	mov	r8, r0
 8000ea4:	469a      	mov	sl, r3
 8000ea6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000eaa:	d807      	bhi.n	8000ebc <_printf_i+0x28>
 8000eac:	2f62      	cmp	r7, #98	; 0x62
 8000eae:	d80a      	bhi.n	8000ec6 <_printf_i+0x32>
 8000eb0:	2f00      	cmp	r7, #0
 8000eb2:	f000 80d8 	beq.w	8001066 <_printf_i+0x1d2>
 8000eb6:	2f58      	cmp	r7, #88	; 0x58
 8000eb8:	f000 80a3 	beq.w	8001002 <_printf_i+0x16e>
 8000ebc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ec4:	e03a      	b.n	8000f3c <_printf_i+0xa8>
 8000ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000eca:	2b15      	cmp	r3, #21
 8000ecc:	d8f6      	bhi.n	8000ebc <_printf_i+0x28>
 8000ece:	a001      	add	r0, pc, #4	; (adr r0, 8000ed4 <_printf_i+0x40>)
 8000ed0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000ed4:	08000f2d 	.word	0x08000f2d
 8000ed8:	08000f41 	.word	0x08000f41
 8000edc:	08000ebd 	.word	0x08000ebd
 8000ee0:	08000ebd 	.word	0x08000ebd
 8000ee4:	08000ebd 	.word	0x08000ebd
 8000ee8:	08000ebd 	.word	0x08000ebd
 8000eec:	08000f41 	.word	0x08000f41
 8000ef0:	08000ebd 	.word	0x08000ebd
 8000ef4:	08000ebd 	.word	0x08000ebd
 8000ef8:	08000ebd 	.word	0x08000ebd
 8000efc:	08000ebd 	.word	0x08000ebd
 8000f00:	0800104d 	.word	0x0800104d
 8000f04:	08000f71 	.word	0x08000f71
 8000f08:	0800102f 	.word	0x0800102f
 8000f0c:	08000ebd 	.word	0x08000ebd
 8000f10:	08000ebd 	.word	0x08000ebd
 8000f14:	0800106f 	.word	0x0800106f
 8000f18:	08000ebd 	.word	0x08000ebd
 8000f1c:	08000f71 	.word	0x08000f71
 8000f20:	08000ebd 	.word	0x08000ebd
 8000f24:	08000ebd 	.word	0x08000ebd
 8000f28:	08001037 	.word	0x08001037
 8000f2c:	680b      	ldr	r3, [r1, #0]
 8000f2e:	1d1a      	adds	r2, r3, #4
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	600a      	str	r2, [r1, #0]
 8000f34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0a3      	b.n	8001088 <_printf_i+0x1f4>
 8000f40:	6825      	ldr	r5, [r4, #0]
 8000f42:	6808      	ldr	r0, [r1, #0]
 8000f44:	062e      	lsls	r6, r5, #24
 8000f46:	f100 0304 	add.w	r3, r0, #4
 8000f4a:	d50a      	bpl.n	8000f62 <_printf_i+0xce>
 8000f4c:	6805      	ldr	r5, [r0, #0]
 8000f4e:	600b      	str	r3, [r1, #0]
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	da03      	bge.n	8000f5c <_printf_i+0xc8>
 8000f54:	232d      	movs	r3, #45	; 0x2d
 8000f56:	426d      	negs	r5, r5
 8000f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f5c:	485e      	ldr	r0, [pc, #376]	; (80010d8 <_printf_i+0x244>)
 8000f5e:	230a      	movs	r3, #10
 8000f60:	e019      	b.n	8000f96 <_printf_i+0x102>
 8000f62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000f66:	6805      	ldr	r5, [r0, #0]
 8000f68:	600b      	str	r3, [r1, #0]
 8000f6a:	bf18      	it	ne
 8000f6c:	b22d      	sxthne	r5, r5
 8000f6e:	e7ef      	b.n	8000f50 <_printf_i+0xbc>
 8000f70:	680b      	ldr	r3, [r1, #0]
 8000f72:	6825      	ldr	r5, [r4, #0]
 8000f74:	1d18      	adds	r0, r3, #4
 8000f76:	6008      	str	r0, [r1, #0]
 8000f78:	0628      	lsls	r0, r5, #24
 8000f7a:	d501      	bpl.n	8000f80 <_printf_i+0xec>
 8000f7c:	681d      	ldr	r5, [r3, #0]
 8000f7e:	e002      	b.n	8000f86 <_printf_i+0xf2>
 8000f80:	0669      	lsls	r1, r5, #25
 8000f82:	d5fb      	bpl.n	8000f7c <_printf_i+0xe8>
 8000f84:	881d      	ldrh	r5, [r3, #0]
 8000f86:	4854      	ldr	r0, [pc, #336]	; (80010d8 <_printf_i+0x244>)
 8000f88:	2f6f      	cmp	r7, #111	; 0x6f
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2308      	moveq	r3, #8
 8000f8e:	230a      	movne	r3, #10
 8000f90:	2100      	movs	r1, #0
 8000f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f96:	6866      	ldr	r6, [r4, #4]
 8000f98:	60a6      	str	r6, [r4, #8]
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	bfa2      	ittt	ge
 8000f9e:	6821      	ldrge	r1, [r4, #0]
 8000fa0:	f021 0104 	bicge.w	r1, r1, #4
 8000fa4:	6021      	strge	r1, [r4, #0]
 8000fa6:	b90d      	cbnz	r5, 8000fac <_printf_i+0x118>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d04d      	beq.n	8001048 <_printf_i+0x1b4>
 8000fac:	4616      	mov	r6, r2
 8000fae:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fb2:	fb03 5711 	mls	r7, r3, r1, r5
 8000fb6:	5dc7      	ldrb	r7, [r0, r7]
 8000fb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fbc:	462f      	mov	r7, r5
 8000fbe:	42bb      	cmp	r3, r7
 8000fc0:	460d      	mov	r5, r1
 8000fc2:	d9f4      	bls.n	8000fae <_printf_i+0x11a>
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d10b      	bne.n	8000fe0 <_printf_i+0x14c>
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	07df      	lsls	r7, r3, #31
 8000fcc:	d508      	bpl.n	8000fe0 <_printf_i+0x14c>
 8000fce:	6923      	ldr	r3, [r4, #16]
 8000fd0:	6861      	ldr	r1, [r4, #4]
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	bfde      	ittt	le
 8000fd6:	2330      	movle	r3, #48	; 0x30
 8000fd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fe0:	1b92      	subs	r2, r2, r6
 8000fe2:	6122      	str	r2, [r4, #16]
 8000fe4:	f8cd a000 	str.w	sl, [sp]
 8000fe8:	464b      	mov	r3, r9
 8000fea:	aa03      	add	r2, sp, #12
 8000fec:	4621      	mov	r1, r4
 8000fee:	4640      	mov	r0, r8
 8000ff0:	f7ff fee2 	bl	8000db8 <_printf_common>
 8000ff4:	3001      	adds	r0, #1
 8000ff6:	d14c      	bne.n	8001092 <_printf_i+0x1fe>
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	b004      	add	sp, #16
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	4835      	ldr	r0, [pc, #212]	; (80010d8 <_printf_i+0x244>)
 8001004:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	680e      	ldr	r6, [r1, #0]
 800100c:	061f      	lsls	r7, r3, #24
 800100e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001012:	600e      	str	r6, [r1, #0]
 8001014:	d514      	bpl.n	8001040 <_printf_i+0x1ac>
 8001016:	07d9      	lsls	r1, r3, #31
 8001018:	bf44      	itt	mi
 800101a:	f043 0320 	orrmi.w	r3, r3, #32
 800101e:	6023      	strmi	r3, [r4, #0]
 8001020:	b91d      	cbnz	r5, 800102a <_printf_i+0x196>
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	f023 0320 	bic.w	r3, r3, #32
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	2310      	movs	r3, #16
 800102c:	e7b0      	b.n	8000f90 <_printf_i+0xfc>
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	2378      	movs	r3, #120	; 0x78
 8001038:	4828      	ldr	r0, [pc, #160]	; (80010dc <_printf_i+0x248>)
 800103a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800103e:	e7e3      	b.n	8001008 <_printf_i+0x174>
 8001040:	065e      	lsls	r6, r3, #25
 8001042:	bf48      	it	mi
 8001044:	b2ad      	uxthmi	r5, r5
 8001046:	e7e6      	b.n	8001016 <_printf_i+0x182>
 8001048:	4616      	mov	r6, r2
 800104a:	e7bb      	b.n	8000fc4 <_printf_i+0x130>
 800104c:	680b      	ldr	r3, [r1, #0]
 800104e:	6826      	ldr	r6, [r4, #0]
 8001050:	6960      	ldr	r0, [r4, #20]
 8001052:	1d1d      	adds	r5, r3, #4
 8001054:	600d      	str	r5, [r1, #0]
 8001056:	0635      	lsls	r5, r6, #24
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	d501      	bpl.n	8001060 <_printf_i+0x1cc>
 800105c:	6018      	str	r0, [r3, #0]
 800105e:	e002      	b.n	8001066 <_printf_i+0x1d2>
 8001060:	0671      	lsls	r1, r6, #25
 8001062:	d5fb      	bpl.n	800105c <_printf_i+0x1c8>
 8001064:	8018      	strh	r0, [r3, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	6123      	str	r3, [r4, #16]
 800106a:	4616      	mov	r6, r2
 800106c:	e7ba      	b.n	8000fe4 <_printf_i+0x150>
 800106e:	680b      	ldr	r3, [r1, #0]
 8001070:	1d1a      	adds	r2, r3, #4
 8001072:	600a      	str	r2, [r1, #0]
 8001074:	681e      	ldr	r6, [r3, #0]
 8001076:	6862      	ldr	r2, [r4, #4]
 8001078:	2100      	movs	r1, #0
 800107a:	4630      	mov	r0, r6
 800107c:	f7ff f8b0 	bl	80001e0 <memchr>
 8001080:	b108      	cbz	r0, 8001086 <_printf_i+0x1f2>
 8001082:	1b80      	subs	r0, r0, r6
 8001084:	6060      	str	r0, [r4, #4]
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	6123      	str	r3, [r4, #16]
 800108a:	2300      	movs	r3, #0
 800108c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001090:	e7a8      	b.n	8000fe4 <_printf_i+0x150>
 8001092:	6923      	ldr	r3, [r4, #16]
 8001094:	4632      	mov	r2, r6
 8001096:	4649      	mov	r1, r9
 8001098:	4640      	mov	r0, r8
 800109a:	47d0      	blx	sl
 800109c:	3001      	adds	r0, #1
 800109e:	d0ab      	beq.n	8000ff8 <_printf_i+0x164>
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	079b      	lsls	r3, r3, #30
 80010a4:	d413      	bmi.n	80010ce <_printf_i+0x23a>
 80010a6:	68e0      	ldr	r0, [r4, #12]
 80010a8:	9b03      	ldr	r3, [sp, #12]
 80010aa:	4298      	cmp	r0, r3
 80010ac:	bfb8      	it	lt
 80010ae:	4618      	movlt	r0, r3
 80010b0:	e7a4      	b.n	8000ffc <_printf_i+0x168>
 80010b2:	2301      	movs	r3, #1
 80010b4:	4632      	mov	r2, r6
 80010b6:	4649      	mov	r1, r9
 80010b8:	4640      	mov	r0, r8
 80010ba:	47d0      	blx	sl
 80010bc:	3001      	adds	r0, #1
 80010be:	d09b      	beq.n	8000ff8 <_printf_i+0x164>
 80010c0:	3501      	adds	r5, #1
 80010c2:	68e3      	ldr	r3, [r4, #12]
 80010c4:	9903      	ldr	r1, [sp, #12]
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	42ab      	cmp	r3, r5
 80010ca:	dcf2      	bgt.n	80010b2 <_printf_i+0x21e>
 80010cc:	e7eb      	b.n	80010a6 <_printf_i+0x212>
 80010ce:	2500      	movs	r5, #0
 80010d0:	f104 0619 	add.w	r6, r4, #25
 80010d4:	e7f5      	b.n	80010c2 <_printf_i+0x22e>
 80010d6:	bf00      	nop
 80010d8:	080017fd 	.word	0x080017fd
 80010dc:	0800180e 	.word	0x0800180e

080010e0 <_sbrk_r>:
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	4d06      	ldr	r5, [pc, #24]	; (80010fc <_sbrk_r+0x1c>)
 80010e4:	2300      	movs	r3, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	602b      	str	r3, [r5, #0]
 80010ec:	f7ff fb0e 	bl	800070c <_sbrk>
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	d102      	bne.n	80010fa <_sbrk_r+0x1a>
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	b103      	cbz	r3, 80010fa <_sbrk_r+0x1a>
 80010f8:	6023      	str	r3, [r4, #0]
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	20000bc8 	.word	0x20000bc8

08001100 <__sread>:
 8001100:	b510      	push	{r4, lr}
 8001102:	460c      	mov	r4, r1
 8001104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001108:	f000 fab4 	bl	8001674 <_read_r>
 800110c:	2800      	cmp	r0, #0
 800110e:	bfab      	itete	ge
 8001110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001112:	89a3      	ldrhlt	r3, [r4, #12]
 8001114:	181b      	addge	r3, r3, r0
 8001116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800111a:	bfac      	ite	ge
 800111c:	6563      	strge	r3, [r4, #84]	; 0x54
 800111e:	81a3      	strhlt	r3, [r4, #12]
 8001120:	bd10      	pop	{r4, pc}

08001122 <__swrite>:
 8001122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001126:	461f      	mov	r7, r3
 8001128:	898b      	ldrh	r3, [r1, #12]
 800112a:	05db      	lsls	r3, r3, #23
 800112c:	4605      	mov	r5, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4616      	mov	r6, r2
 8001132:	d505      	bpl.n	8001140 <__swrite+0x1e>
 8001134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001138:	2302      	movs	r3, #2
 800113a:	2200      	movs	r2, #0
 800113c:	f000 f9c8 	bl	80014d0 <_lseek_r>
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800114a:	81a3      	strh	r3, [r4, #12]
 800114c:	4632      	mov	r2, r6
 800114e:	463b      	mov	r3, r7
 8001150:	4628      	mov	r0, r5
 8001152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001156:	f000 b869 	b.w	800122c <_write_r>

0800115a <__sseek>:
 800115a:	b510      	push	{r4, lr}
 800115c:	460c      	mov	r4, r1
 800115e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001162:	f000 f9b5 	bl	80014d0 <_lseek_r>
 8001166:	1c43      	adds	r3, r0, #1
 8001168:	89a3      	ldrh	r3, [r4, #12]
 800116a:	bf15      	itete	ne
 800116c:	6560      	strne	r0, [r4, #84]	; 0x54
 800116e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001176:	81a3      	strheq	r3, [r4, #12]
 8001178:	bf18      	it	ne
 800117a:	81a3      	strhne	r3, [r4, #12]
 800117c:	bd10      	pop	{r4, pc}

0800117e <__sclose>:
 800117e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001182:	f000 b8d3 	b.w	800132c <_close_r>
	...

08001188 <__swbuf_r>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	460e      	mov	r6, r1
 800118c:	4614      	mov	r4, r2
 800118e:	4605      	mov	r5, r0
 8001190:	b118      	cbz	r0, 800119a <__swbuf_r+0x12>
 8001192:	6983      	ldr	r3, [r0, #24]
 8001194:	b90b      	cbnz	r3, 800119a <__swbuf_r+0x12>
 8001196:	f7ff fbbb 	bl	8000910 <__sinit>
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <__swbuf_r+0x98>)
 800119c:	429c      	cmp	r4, r3
 800119e:	d12b      	bne.n	80011f8 <__swbuf_r+0x70>
 80011a0:	686c      	ldr	r4, [r5, #4]
 80011a2:	69a3      	ldr	r3, [r4, #24]
 80011a4:	60a3      	str	r3, [r4, #8]
 80011a6:	89a3      	ldrh	r3, [r4, #12]
 80011a8:	071a      	lsls	r2, r3, #28
 80011aa:	d52f      	bpl.n	800120c <__swbuf_r+0x84>
 80011ac:	6923      	ldr	r3, [r4, #16]
 80011ae:	b36b      	cbz	r3, 800120c <__swbuf_r+0x84>
 80011b0:	6923      	ldr	r3, [r4, #16]
 80011b2:	6820      	ldr	r0, [r4, #0]
 80011b4:	1ac0      	subs	r0, r0, r3
 80011b6:	6963      	ldr	r3, [r4, #20]
 80011b8:	b2f6      	uxtb	r6, r6
 80011ba:	4283      	cmp	r3, r0
 80011bc:	4637      	mov	r7, r6
 80011be:	dc04      	bgt.n	80011ca <__swbuf_r+0x42>
 80011c0:	4621      	mov	r1, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f000 f948 	bl	8001458 <_fflush_r>
 80011c8:	bb30      	cbnz	r0, 8001218 <__swbuf_r+0x90>
 80011ca:	68a3      	ldr	r3, [r4, #8]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60a3      	str	r3, [r4, #8]
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	6022      	str	r2, [r4, #0]
 80011d6:	701e      	strb	r6, [r3, #0]
 80011d8:	6963      	ldr	r3, [r4, #20]
 80011da:	3001      	adds	r0, #1
 80011dc:	4283      	cmp	r3, r0
 80011de:	d004      	beq.n	80011ea <__swbuf_r+0x62>
 80011e0:	89a3      	ldrh	r3, [r4, #12]
 80011e2:	07db      	lsls	r3, r3, #31
 80011e4:	d506      	bpl.n	80011f4 <__swbuf_r+0x6c>
 80011e6:	2e0a      	cmp	r6, #10
 80011e8:	d104      	bne.n	80011f4 <__swbuf_r+0x6c>
 80011ea:	4621      	mov	r1, r4
 80011ec:	4628      	mov	r0, r5
 80011ee:	f000 f933 	bl	8001458 <_fflush_r>
 80011f2:	b988      	cbnz	r0, 8001218 <__swbuf_r+0x90>
 80011f4:	4638      	mov	r0, r7
 80011f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <__swbuf_r+0x9c>)
 80011fa:	429c      	cmp	r4, r3
 80011fc:	d101      	bne.n	8001202 <__swbuf_r+0x7a>
 80011fe:	68ac      	ldr	r4, [r5, #8]
 8001200:	e7cf      	b.n	80011a2 <__swbuf_r+0x1a>
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <__swbuf_r+0xa0>)
 8001204:	429c      	cmp	r4, r3
 8001206:	bf08      	it	eq
 8001208:	68ec      	ldreq	r4, [r5, #12]
 800120a:	e7ca      	b.n	80011a2 <__swbuf_r+0x1a>
 800120c:	4621      	mov	r1, r4
 800120e:	4628      	mov	r0, r5
 8001210:	f000 f81e 	bl	8001250 <__swsetup_r>
 8001214:	2800      	cmp	r0, #0
 8001216:	d0cb      	beq.n	80011b0 <__swbuf_r+0x28>
 8001218:	f04f 37ff 	mov.w	r7, #4294967295
 800121c:	e7ea      	b.n	80011f4 <__swbuf_r+0x6c>
 800121e:	bf00      	nop
 8001220:	080017ac 	.word	0x080017ac
 8001224:	080017cc 	.word	0x080017cc
 8001228:	0800178c 	.word	0x0800178c

0800122c <_write_r>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4d07      	ldr	r5, [pc, #28]	; (800124c <_write_r+0x20>)
 8001230:	4604      	mov	r4, r0
 8001232:	4608      	mov	r0, r1
 8001234:	4611      	mov	r1, r2
 8001236:	2200      	movs	r2, #0
 8001238:	602a      	str	r2, [r5, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	f7ff fa15 	bl	800066a <_write>
 8001240:	1c43      	adds	r3, r0, #1
 8001242:	d102      	bne.n	800124a <_write_r+0x1e>
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	b103      	cbz	r3, 800124a <_write_r+0x1e>
 8001248:	6023      	str	r3, [r4, #0]
 800124a:	bd38      	pop	{r3, r4, r5, pc}
 800124c:	20000bc8 	.word	0x20000bc8

08001250 <__swsetup_r>:
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <__swsetup_r+0xcc>)
 8001252:	b570      	push	{r4, r5, r6, lr}
 8001254:	681d      	ldr	r5, [r3, #0]
 8001256:	4606      	mov	r6, r0
 8001258:	460c      	mov	r4, r1
 800125a:	b125      	cbz	r5, 8001266 <__swsetup_r+0x16>
 800125c:	69ab      	ldr	r3, [r5, #24]
 800125e:	b913      	cbnz	r3, 8001266 <__swsetup_r+0x16>
 8001260:	4628      	mov	r0, r5
 8001262:	f7ff fb55 	bl	8000910 <__sinit>
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <__swsetup_r+0xd0>)
 8001268:	429c      	cmp	r4, r3
 800126a:	d10f      	bne.n	800128c <__swsetup_r+0x3c>
 800126c:	686c      	ldr	r4, [r5, #4]
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001274:	0719      	lsls	r1, r3, #28
 8001276:	d42c      	bmi.n	80012d2 <__swsetup_r+0x82>
 8001278:	06dd      	lsls	r5, r3, #27
 800127a:	d411      	bmi.n	80012a0 <__swsetup_r+0x50>
 800127c:	2309      	movs	r3, #9
 800127e:	6033      	str	r3, [r6, #0]
 8001280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001284:	81a3      	strh	r3, [r4, #12]
 8001286:	f04f 30ff 	mov.w	r0, #4294967295
 800128a:	e03e      	b.n	800130a <__swsetup_r+0xba>
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <__swsetup_r+0xd4>)
 800128e:	429c      	cmp	r4, r3
 8001290:	d101      	bne.n	8001296 <__swsetup_r+0x46>
 8001292:	68ac      	ldr	r4, [r5, #8]
 8001294:	e7eb      	b.n	800126e <__swsetup_r+0x1e>
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <__swsetup_r+0xd8>)
 8001298:	429c      	cmp	r4, r3
 800129a:	bf08      	it	eq
 800129c:	68ec      	ldreq	r4, [r5, #12]
 800129e:	e7e6      	b.n	800126e <__swsetup_r+0x1e>
 80012a0:	0758      	lsls	r0, r3, #29
 80012a2:	d512      	bpl.n	80012ca <__swsetup_r+0x7a>
 80012a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012a6:	b141      	cbz	r1, 80012ba <__swsetup_r+0x6a>
 80012a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ac:	4299      	cmp	r1, r3
 80012ae:	d002      	beq.n	80012b6 <__swsetup_r+0x66>
 80012b0:	4630      	mov	r0, r6
 80012b2:	f000 f98f 	bl	80015d4 <_free_r>
 80012b6:	2300      	movs	r3, #0
 80012b8:	6363      	str	r3, [r4, #52]	; 0x34
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012c0:	81a3      	strh	r3, [r4, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	6063      	str	r3, [r4, #4]
 80012c6:	6923      	ldr	r3, [r4, #16]
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	81a3      	strh	r3, [r4, #12]
 80012d2:	6923      	ldr	r3, [r4, #16]
 80012d4:	b94b      	cbnz	r3, 80012ea <__swsetup_r+0x9a>
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e0:	d003      	beq.n	80012ea <__swsetup_r+0x9a>
 80012e2:	4621      	mov	r1, r4
 80012e4:	4630      	mov	r0, r6
 80012e6:	f000 f929 	bl	800153c <__smakebuf_r>
 80012ea:	89a0      	ldrh	r0, [r4, #12]
 80012ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012f0:	f010 0301 	ands.w	r3, r0, #1
 80012f4:	d00a      	beq.n	800130c <__swsetup_r+0xbc>
 80012f6:	2300      	movs	r3, #0
 80012f8:	60a3      	str	r3, [r4, #8]
 80012fa:	6963      	ldr	r3, [r4, #20]
 80012fc:	425b      	negs	r3, r3
 80012fe:	61a3      	str	r3, [r4, #24]
 8001300:	6923      	ldr	r3, [r4, #16]
 8001302:	b943      	cbnz	r3, 8001316 <__swsetup_r+0xc6>
 8001304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001308:	d1ba      	bne.n	8001280 <__swsetup_r+0x30>
 800130a:	bd70      	pop	{r4, r5, r6, pc}
 800130c:	0781      	lsls	r1, r0, #30
 800130e:	bf58      	it	pl
 8001310:	6963      	ldrpl	r3, [r4, #20]
 8001312:	60a3      	str	r3, [r4, #8]
 8001314:	e7f4      	b.n	8001300 <__swsetup_r+0xb0>
 8001316:	2000      	movs	r0, #0
 8001318:	e7f7      	b.n	800130a <__swsetup_r+0xba>
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000
 8001320:	080017ac 	.word	0x080017ac
 8001324:	080017cc 	.word	0x080017cc
 8001328:	0800178c 	.word	0x0800178c

0800132c <_close_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	4d06      	ldr	r5, [pc, #24]	; (8001348 <_close_r+0x1c>)
 8001330:	2300      	movs	r3, #0
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	f7ff f9b3 	bl	80006a2 <_close>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_close_r+0x1a>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_close_r+0x1a>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	20000bc8 	.word	0x20000bc8

0800134c <__sflush_r>:
 800134c:	898a      	ldrh	r2, [r1, #12]
 800134e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001352:	4605      	mov	r5, r0
 8001354:	0710      	lsls	r0, r2, #28
 8001356:	460c      	mov	r4, r1
 8001358:	d458      	bmi.n	800140c <__sflush_r+0xc0>
 800135a:	684b      	ldr	r3, [r1, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	dc05      	bgt.n	800136c <__sflush_r+0x20>
 8001360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	dc02      	bgt.n	800136c <__sflush_r+0x20>
 8001366:	2000      	movs	r0, #0
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800136e:	2e00      	cmp	r6, #0
 8001370:	d0f9      	beq.n	8001366 <__sflush_r+0x1a>
 8001372:	2300      	movs	r3, #0
 8001374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001378:	682f      	ldr	r7, [r5, #0]
 800137a:	602b      	str	r3, [r5, #0]
 800137c:	d032      	beq.n	80013e4 <__sflush_r+0x98>
 800137e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001380:	89a3      	ldrh	r3, [r4, #12]
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d505      	bpl.n	8001392 <__sflush_r+0x46>
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	1ac0      	subs	r0, r0, r3
 800138a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800138c:	b10b      	cbz	r3, 8001392 <__sflush_r+0x46>
 800138e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001390:	1ac0      	subs	r0, r0, r3
 8001392:	2300      	movs	r3, #0
 8001394:	4602      	mov	r2, r0
 8001396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001398:	6a21      	ldr	r1, [r4, #32]
 800139a:	4628      	mov	r0, r5
 800139c:	47b0      	blx	r6
 800139e:	1c43      	adds	r3, r0, #1
 80013a0:	89a3      	ldrh	r3, [r4, #12]
 80013a2:	d106      	bne.n	80013b2 <__sflush_r+0x66>
 80013a4:	6829      	ldr	r1, [r5, #0]
 80013a6:	291d      	cmp	r1, #29
 80013a8:	d82c      	bhi.n	8001404 <__sflush_r+0xb8>
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <__sflush_r+0x108>)
 80013ac:	40ca      	lsrs	r2, r1
 80013ae:	07d6      	lsls	r6, r2, #31
 80013b0:	d528      	bpl.n	8001404 <__sflush_r+0xb8>
 80013b2:	2200      	movs	r2, #0
 80013b4:	6062      	str	r2, [r4, #4]
 80013b6:	04d9      	lsls	r1, r3, #19
 80013b8:	6922      	ldr	r2, [r4, #16]
 80013ba:	6022      	str	r2, [r4, #0]
 80013bc:	d504      	bpl.n	80013c8 <__sflush_r+0x7c>
 80013be:	1c42      	adds	r2, r0, #1
 80013c0:	d101      	bne.n	80013c6 <__sflush_r+0x7a>
 80013c2:	682b      	ldr	r3, [r5, #0]
 80013c4:	b903      	cbnz	r3, 80013c8 <__sflush_r+0x7c>
 80013c6:	6560      	str	r0, [r4, #84]	; 0x54
 80013c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013ca:	602f      	str	r7, [r5, #0]
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d0ca      	beq.n	8001366 <__sflush_r+0x1a>
 80013d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013d4:	4299      	cmp	r1, r3
 80013d6:	d002      	beq.n	80013de <__sflush_r+0x92>
 80013d8:	4628      	mov	r0, r5
 80013da:	f000 f8fb 	bl	80015d4 <_free_r>
 80013de:	2000      	movs	r0, #0
 80013e0:	6360      	str	r0, [r4, #52]	; 0x34
 80013e2:	e7c1      	b.n	8001368 <__sflush_r+0x1c>
 80013e4:	6a21      	ldr	r1, [r4, #32]
 80013e6:	2301      	movs	r3, #1
 80013e8:	4628      	mov	r0, r5
 80013ea:	47b0      	blx	r6
 80013ec:	1c41      	adds	r1, r0, #1
 80013ee:	d1c7      	bne.n	8001380 <__sflush_r+0x34>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0c4      	beq.n	8001380 <__sflush_r+0x34>
 80013f6:	2b1d      	cmp	r3, #29
 80013f8:	d001      	beq.n	80013fe <__sflush_r+0xb2>
 80013fa:	2b16      	cmp	r3, #22
 80013fc:	d101      	bne.n	8001402 <__sflush_r+0xb6>
 80013fe:	602f      	str	r7, [r5, #0]
 8001400:	e7b1      	b.n	8001366 <__sflush_r+0x1a>
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001408:	81a3      	strh	r3, [r4, #12]
 800140a:	e7ad      	b.n	8001368 <__sflush_r+0x1c>
 800140c:	690f      	ldr	r7, [r1, #16]
 800140e:	2f00      	cmp	r7, #0
 8001410:	d0a9      	beq.n	8001366 <__sflush_r+0x1a>
 8001412:	0793      	lsls	r3, r2, #30
 8001414:	680e      	ldr	r6, [r1, #0]
 8001416:	bf08      	it	eq
 8001418:	694b      	ldreq	r3, [r1, #20]
 800141a:	600f      	str	r7, [r1, #0]
 800141c:	bf18      	it	ne
 800141e:	2300      	movne	r3, #0
 8001420:	eba6 0807 	sub.w	r8, r6, r7
 8001424:	608b      	str	r3, [r1, #8]
 8001426:	f1b8 0f00 	cmp.w	r8, #0
 800142a:	dd9c      	ble.n	8001366 <__sflush_r+0x1a>
 800142c:	6a21      	ldr	r1, [r4, #32]
 800142e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001430:	4643      	mov	r3, r8
 8001432:	463a      	mov	r2, r7
 8001434:	4628      	mov	r0, r5
 8001436:	47b0      	blx	r6
 8001438:	2800      	cmp	r0, #0
 800143a:	dc06      	bgt.n	800144a <__sflush_r+0xfe>
 800143c:	89a3      	ldrh	r3, [r4, #12]
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	e78e      	b.n	8001368 <__sflush_r+0x1c>
 800144a:	4407      	add	r7, r0
 800144c:	eba8 0800 	sub.w	r8, r8, r0
 8001450:	e7e9      	b.n	8001426 <__sflush_r+0xda>
 8001452:	bf00      	nop
 8001454:	20400001 	.word	0x20400001

08001458 <_fflush_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	690b      	ldr	r3, [r1, #16]
 800145c:	4605      	mov	r5, r0
 800145e:	460c      	mov	r4, r1
 8001460:	b913      	cbnz	r3, 8001468 <_fflush_r+0x10>
 8001462:	2500      	movs	r5, #0
 8001464:	4628      	mov	r0, r5
 8001466:	bd38      	pop	{r3, r4, r5, pc}
 8001468:	b118      	cbz	r0, 8001472 <_fflush_r+0x1a>
 800146a:	6983      	ldr	r3, [r0, #24]
 800146c:	b90b      	cbnz	r3, 8001472 <_fflush_r+0x1a>
 800146e:	f7ff fa4f 	bl	8000910 <__sinit>
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <_fflush_r+0x6c>)
 8001474:	429c      	cmp	r4, r3
 8001476:	d11b      	bne.n	80014b0 <_fflush_r+0x58>
 8001478:	686c      	ldr	r4, [r5, #4]
 800147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0ef      	beq.n	8001462 <_fflush_r+0xa>
 8001482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001484:	07d0      	lsls	r0, r2, #31
 8001486:	d404      	bmi.n	8001492 <_fflush_r+0x3a>
 8001488:	0599      	lsls	r1, r3, #22
 800148a:	d402      	bmi.n	8001492 <_fflush_r+0x3a>
 800148c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800148e:	f7ff fadd 	bl	8000a4c <__retarget_lock_acquire_recursive>
 8001492:	4628      	mov	r0, r5
 8001494:	4621      	mov	r1, r4
 8001496:	f7ff ff59 	bl	800134c <__sflush_r>
 800149a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800149c:	07da      	lsls	r2, r3, #31
 800149e:	4605      	mov	r5, r0
 80014a0:	d4e0      	bmi.n	8001464 <_fflush_r+0xc>
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	059b      	lsls	r3, r3, #22
 80014a6:	d4dd      	bmi.n	8001464 <_fflush_r+0xc>
 80014a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014aa:	f7ff fad0 	bl	8000a4e <__retarget_lock_release_recursive>
 80014ae:	e7d9      	b.n	8001464 <_fflush_r+0xc>
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <_fflush_r+0x70>)
 80014b2:	429c      	cmp	r4, r3
 80014b4:	d101      	bne.n	80014ba <_fflush_r+0x62>
 80014b6:	68ac      	ldr	r4, [r5, #8]
 80014b8:	e7df      	b.n	800147a <_fflush_r+0x22>
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <_fflush_r+0x74>)
 80014bc:	429c      	cmp	r4, r3
 80014be:	bf08      	it	eq
 80014c0:	68ec      	ldreq	r4, [r5, #12]
 80014c2:	e7da      	b.n	800147a <_fflush_r+0x22>
 80014c4:	080017ac 	.word	0x080017ac
 80014c8:	080017cc 	.word	0x080017cc
 80014cc:	0800178c 	.word	0x0800178c

080014d0 <_lseek_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4d07      	ldr	r5, [pc, #28]	; (80014f0 <_lseek_r+0x20>)
 80014d4:	4604      	mov	r4, r0
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	2200      	movs	r2, #0
 80014dc:	602a      	str	r2, [r5, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	f7ff f906 	bl	80006f0 <_lseek>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_lseek_r+0x1e>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_lseek_r+0x1e>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	20000bc8 	.word	0x20000bc8

080014f4 <__swhatbuf_r>:
 80014f4:	b570      	push	{r4, r5, r6, lr}
 80014f6:	460e      	mov	r6, r1
 80014f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014fc:	2900      	cmp	r1, #0
 80014fe:	b096      	sub	sp, #88	; 0x58
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	da07      	bge.n	8001516 <__swhatbuf_r+0x22>
 8001506:	2300      	movs	r3, #0
 8001508:	602b      	str	r3, [r5, #0]
 800150a:	89b3      	ldrh	r3, [r6, #12]
 800150c:	061a      	lsls	r2, r3, #24
 800150e:	d410      	bmi.n	8001532 <__swhatbuf_r+0x3e>
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	e00e      	b.n	8001534 <__swhatbuf_r+0x40>
 8001516:	466a      	mov	r2, sp
 8001518:	f000 f8be 	bl	8001698 <_fstat_r>
 800151c:	2800      	cmp	r0, #0
 800151e:	dbf2      	blt.n	8001506 <__swhatbuf_r+0x12>
 8001520:	9a01      	ldr	r2, [sp, #4]
 8001522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800152a:	425a      	negs	r2, r3
 800152c:	415a      	adcs	r2, r3
 800152e:	602a      	str	r2, [r5, #0]
 8001530:	e7ee      	b.n	8001510 <__swhatbuf_r+0x1c>
 8001532:	2340      	movs	r3, #64	; 0x40
 8001534:	2000      	movs	r0, #0
 8001536:	6023      	str	r3, [r4, #0]
 8001538:	b016      	add	sp, #88	; 0x58
 800153a:	bd70      	pop	{r4, r5, r6, pc}

0800153c <__smakebuf_r>:
 800153c:	898b      	ldrh	r3, [r1, #12]
 800153e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001540:	079d      	lsls	r5, r3, #30
 8001542:	4606      	mov	r6, r0
 8001544:	460c      	mov	r4, r1
 8001546:	d507      	bpl.n	8001558 <__smakebuf_r+0x1c>
 8001548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	6123      	str	r3, [r4, #16]
 8001550:	2301      	movs	r3, #1
 8001552:	6163      	str	r3, [r4, #20]
 8001554:	b002      	add	sp, #8
 8001556:	bd70      	pop	{r4, r5, r6, pc}
 8001558:	ab01      	add	r3, sp, #4
 800155a:	466a      	mov	r2, sp
 800155c:	f7ff ffca 	bl	80014f4 <__swhatbuf_r>
 8001560:	9900      	ldr	r1, [sp, #0]
 8001562:	4605      	mov	r5, r0
 8001564:	4630      	mov	r0, r6
 8001566:	f7ff fa73 	bl	8000a50 <_malloc_r>
 800156a:	b948      	cbnz	r0, 8001580 <__smakebuf_r+0x44>
 800156c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001570:	059a      	lsls	r2, r3, #22
 8001572:	d4ef      	bmi.n	8001554 <__smakebuf_r+0x18>
 8001574:	f023 0303 	bic.w	r3, r3, #3
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	81a3      	strh	r3, [r4, #12]
 800157e:	e7e3      	b.n	8001548 <__smakebuf_r+0xc>
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <__smakebuf_r+0x7c>)
 8001582:	62b3      	str	r3, [r6, #40]	; 0x28
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	6020      	str	r0, [r4, #0]
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	81a3      	strh	r3, [r4, #12]
 800158e:	9b00      	ldr	r3, [sp, #0]
 8001590:	6163      	str	r3, [r4, #20]
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	6120      	str	r0, [r4, #16]
 8001596:	b15b      	cbz	r3, 80015b0 <__smakebuf_r+0x74>
 8001598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800159c:	4630      	mov	r0, r6
 800159e:	f000 f88d 	bl	80016bc <_isatty_r>
 80015a2:	b128      	cbz	r0, 80015b0 <__smakebuf_r+0x74>
 80015a4:	89a3      	ldrh	r3, [r4, #12]
 80015a6:	f023 0303 	bic.w	r3, r3, #3
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	81a3      	strh	r3, [r4, #12]
 80015b0:	89a0      	ldrh	r0, [r4, #12]
 80015b2:	4305      	orrs	r5, r0
 80015b4:	81a5      	strh	r5, [r4, #12]
 80015b6:	e7cd      	b.n	8001554 <__smakebuf_r+0x18>
 80015b8:	080008a9 	.word	0x080008a9

080015bc <__malloc_lock>:
 80015bc:	4801      	ldr	r0, [pc, #4]	; (80015c4 <__malloc_lock+0x8>)
 80015be:	f7ff ba45 	b.w	8000a4c <__retarget_lock_acquire_recursive>
 80015c2:	bf00      	nop
 80015c4:	20000bc0 	.word	0x20000bc0

080015c8 <__malloc_unlock>:
 80015c8:	4801      	ldr	r0, [pc, #4]	; (80015d0 <__malloc_unlock+0x8>)
 80015ca:	f7ff ba40 	b.w	8000a4e <__retarget_lock_release_recursive>
 80015ce:	bf00      	nop
 80015d0:	20000bc0 	.word	0x20000bc0

080015d4 <_free_r>:
 80015d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d048      	beq.n	800166c <_free_r+0x98>
 80015da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015de:	9001      	str	r0, [sp, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f1a1 0404 	sub.w	r4, r1, #4
 80015e6:	bfb8      	it	lt
 80015e8:	18e4      	addlt	r4, r4, r3
 80015ea:	f7ff ffe7 	bl	80015bc <__malloc_lock>
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <_free_r+0x9c>)
 80015f0:	9801      	ldr	r0, [sp, #4]
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	4615      	mov	r5, r2
 80015f6:	b933      	cbnz	r3, 8001606 <_free_r+0x32>
 80015f8:	6063      	str	r3, [r4, #4]
 80015fa:	6014      	str	r4, [r2, #0]
 80015fc:	b003      	add	sp, #12
 80015fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001602:	f7ff bfe1 	b.w	80015c8 <__malloc_unlock>
 8001606:	42a3      	cmp	r3, r4
 8001608:	d90b      	bls.n	8001622 <_free_r+0x4e>
 800160a:	6821      	ldr	r1, [r4, #0]
 800160c:	1862      	adds	r2, r4, r1
 800160e:	4293      	cmp	r3, r2
 8001610:	bf04      	itt	eq
 8001612:	681a      	ldreq	r2, [r3, #0]
 8001614:	685b      	ldreq	r3, [r3, #4]
 8001616:	6063      	str	r3, [r4, #4]
 8001618:	bf04      	itt	eq
 800161a:	1852      	addeq	r2, r2, r1
 800161c:	6022      	streq	r2, [r4, #0]
 800161e:	602c      	str	r4, [r5, #0]
 8001620:	e7ec      	b.n	80015fc <_free_r+0x28>
 8001622:	461a      	mov	r2, r3
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	b10b      	cbz	r3, 800162c <_free_r+0x58>
 8001628:	42a3      	cmp	r3, r4
 800162a:	d9fa      	bls.n	8001622 <_free_r+0x4e>
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	1855      	adds	r5, r2, r1
 8001630:	42a5      	cmp	r5, r4
 8001632:	d10b      	bne.n	800164c <_free_r+0x78>
 8001634:	6824      	ldr	r4, [r4, #0]
 8001636:	4421      	add	r1, r4
 8001638:	1854      	adds	r4, r2, r1
 800163a:	42a3      	cmp	r3, r4
 800163c:	6011      	str	r1, [r2, #0]
 800163e:	d1dd      	bne.n	80015fc <_free_r+0x28>
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	6053      	str	r3, [r2, #4]
 8001646:	4421      	add	r1, r4
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	e7d7      	b.n	80015fc <_free_r+0x28>
 800164c:	d902      	bls.n	8001654 <_free_r+0x80>
 800164e:	230c      	movs	r3, #12
 8001650:	6003      	str	r3, [r0, #0]
 8001652:	e7d3      	b.n	80015fc <_free_r+0x28>
 8001654:	6825      	ldr	r5, [r4, #0]
 8001656:	1961      	adds	r1, r4, r5
 8001658:	428b      	cmp	r3, r1
 800165a:	bf04      	itt	eq
 800165c:	6819      	ldreq	r1, [r3, #0]
 800165e:	685b      	ldreq	r3, [r3, #4]
 8001660:	6063      	str	r3, [r4, #4]
 8001662:	bf04      	itt	eq
 8001664:	1949      	addeq	r1, r1, r5
 8001666:	6021      	streq	r1, [r4, #0]
 8001668:	6054      	str	r4, [r2, #4]
 800166a:	e7c7      	b.n	80015fc <_free_r+0x28>
 800166c:	b003      	add	sp, #12
 800166e:	bd30      	pop	{r4, r5, pc}
 8001670:	20000884 	.word	0x20000884

08001674 <_read_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	4d07      	ldr	r5, [pc, #28]	; (8001694 <_read_r+0x20>)
 8001678:	4604      	mov	r4, r0
 800167a:	4608      	mov	r0, r1
 800167c:	4611      	mov	r1, r2
 800167e:	2200      	movs	r2, #0
 8001680:	602a      	str	r2, [r5, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	f7fe ffd4 	bl	8000630 <_read>
 8001688:	1c43      	adds	r3, r0, #1
 800168a:	d102      	bne.n	8001692 <_read_r+0x1e>
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	b103      	cbz	r3, 8001692 <_read_r+0x1e>
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	bd38      	pop	{r3, r4, r5, pc}
 8001694:	20000bc8 	.word	0x20000bc8

08001698 <_fstat_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4d07      	ldr	r5, [pc, #28]	; (80016b8 <_fstat_r+0x20>)
 800169c:	2300      	movs	r3, #0
 800169e:	4604      	mov	r4, r0
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	602b      	str	r3, [r5, #0]
 80016a6:	f7ff f808 	bl	80006ba <_fstat>
 80016aa:	1c43      	adds	r3, r0, #1
 80016ac:	d102      	bne.n	80016b4 <_fstat_r+0x1c>
 80016ae:	682b      	ldr	r3, [r5, #0]
 80016b0:	b103      	cbz	r3, 80016b4 <_fstat_r+0x1c>
 80016b2:	6023      	str	r3, [r4, #0]
 80016b4:	bd38      	pop	{r3, r4, r5, pc}
 80016b6:	bf00      	nop
 80016b8:	20000bc8 	.word	0x20000bc8

080016bc <_isatty_r>:
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4d06      	ldr	r5, [pc, #24]	; (80016d8 <_isatty_r+0x1c>)
 80016c0:	2300      	movs	r3, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	f7ff f807 	bl	80006da <_isatty>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_isatty_r+0x1a>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_isatty_r+0x1a>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	20000bc8 	.word	0x20000bc8

080016dc <_init>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	bf00      	nop
 80016e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e2:	bc08      	pop	{r3}
 80016e4:	469e      	mov	lr, r3
 80016e6:	4770      	bx	lr

080016e8 <_fini>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr
