
6_esp82xx_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001858  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c10  08001c10  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001c10  08001c10  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c10  08001c10  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c10  08001c10  00011c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c14  08001c14  00011c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000068  08001c80  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08001c80  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000151b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000762  00000000  00000000  000215b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  00021ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f52f  00000000  00000000  00022040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002928  00000000  00000000  0003156f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054452  00000000  00000000  00033e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000882e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000994  00000000  00000000  0008833c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080019e0 	.word	0x080019e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080019e0 	.word	0x080019e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <circular_buffer_init>:
circular_buffer *_rx_buffer2;
circular_buffer *_tx_buffer2;


void circular_buffer_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/*Initial buffers*/
	_rx_buffer1 = &rx_buffer1;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <circular_buffer_init+0x40>)
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <circular_buffer_init+0x44>)
 8000298:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <circular_buffer_init+0x48>)
 800029c:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <circular_buffer_init+0x4c>)
 800029e:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <circular_buffer_init+0x50>)
 80002a2:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <circular_buffer_init+0x54>)
 80002a4:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <circular_buffer_init+0x58>)
 80002a8:	4a10      	ldr	r2, [pc, #64]	; (80002ec <circular_buffer_init+0x5c>)
 80002aa:	601a      	str	r2, [r3, #0]

	/*Initial UART interrupts*/
	USART1->CR1 |=CR1_RXNEIE;  				/*esp_uart*/
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <circular_buffer_init+0x60>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <circular_buffer_init+0x60>)
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=CR1_RXNEIE;  				/*debug_uart*/
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <circular_buffer_init+0x64>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <circular_buffer_init+0x64>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	60d3      	str	r3, [r2, #12]


}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	200008a8 	.word	0x200008a8
 80002d4:	20000088 	.word	0x20000088
 80002d8:	200008ac 	.word	0x200008ac
 80002dc:	20000290 	.word	0x20000290
 80002e0:	200008b0 	.word	0x200008b0
 80002e4:	20000498 	.word	0x20000498
 80002e8:	200008b4 	.word	0x200008b4
 80002ec:	200006a0 	.word	0x200006a0
 80002f0:	40011000 	.word	0x40011000
 80002f4:	40004400 	.word	0x40004400

080002f8 <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
	 int loc =  (uint32_t)(buffer->head +1)% UART_BUFFER_SIZE;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800030a:	3301      	adds	r3, #1
 800030c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000310:	60fb      	str	r3, [r7, #12]

	/*Check if no overflow will occur*/

	 if(loc != buffer->tail){
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	429a      	cmp	r2, r3
 800031c:	d009      	beq.n	8000332 <buff_store_char+0x3a>
		 /*Store character*/
		 buffer->buffer[buffer->head]  = c ;
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	79f9      	ldrb	r1, [r7, #7]
 8000328:	54d1      	strb	r1, [r2, r3]
		 /*Update head*/
		 buffer->head = loc;
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	 }
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <buffer_clear>:

}


void buffer_clear(portType uart)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <buffer_clear+0x5c>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	429a      	cmp	r2, r3
 8000352:	d10c      	bne.n	800036e <buffer_clear+0x2e>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer1->buffer,'\0',UART_BUFFER_SIZE);
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <buffer_clear+0x60>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fec8 	bl	80010f4 <memset>
		_rx_buffer1->head = 0 ;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <buffer_clear+0x60>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2200      	movs	r2, #0
 800036a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	if(uart == debug_port )
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <buffer_clear+0x64>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	79fa      	ldrb	r2, [r7, #7]
 8000374:	429a      	cmp	r2, r3
 8000376:	d10c      	bne.n	8000392 <buffer_clear+0x52>
	{
		/*Set buffer content to  '\0'*/
		memset(_rx_buffer2->buffer,'\0',UART_BUFFER_SIZE);
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <buffer_clear+0x68>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 feb6 	bl	80010f4 <memset>
		_rx_buffer2->head = 0 ;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <buffer_clear+0x68>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2200      	movs	r2, #0
 800038e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000
 80003a0:	200008a8 	.word	0x200008a8
 80003a4:	20000084 	.word	0x20000084
 80003a8:	200008b0 	.word	0x200008b0

080003ac <buffer_peek>:


int32_t buffer_peek(portType uart)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <buffer_peek+0x84>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	79fa      	ldrb	r2, [r7, #7]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d114      	bne.n	80003ea <buffer_peek+0x3e>
	{
	   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <buffer_peek+0x88>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <buffer_peek+0x88>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d102      	bne.n	80003da <buffer_peek+0x2e>
	   {
		   return -1;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003d8:	e023      	b.n	8000422 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer1->buffer[_rx_buffer1->tail];
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <buffer_peek+0x88>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <buffer_peek+0x88>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	e01b      	b.n	8000422 <buffer_peek+0x76>
	   }
	}

	else if(uart == debug_port )
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <buffer_peek+0x8c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	79fa      	ldrb	r2, [r7, #7]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d114      	bne.n	800041e <buffer_peek+0x72>
	{
	   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <buffer_peek+0x90>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <buffer_peek+0x90>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000404:	429a      	cmp	r2, r3
 8000406:	d102      	bne.n	800040e <buffer_peek+0x62>
	   {
		   return -1;
 8000408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800040c:	e009      	b.n	8000422 <buffer_peek+0x76>
	   }
	   else
	   {
		   return _rx_buffer2->buffer[_rx_buffer2->tail];
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <buffer_peek+0x90>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <buffer_peek+0x90>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800041a:	5cd3      	ldrb	r3, [r2, r3]
 800041c:	e001      	b.n	8000422 <buffer_peek+0x76>
	   }
	}

	else
	{
		 return -1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000
 8000434:	200008a8 	.word	0x200008a8
 8000438:	20000084 	.word	0x20000084
 800043c:	200008b0 	.word	0x200008b0

08000440 <buffer_read>:
int32_t buffer_read(portType uart)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
	if(uart == esp82xx_port )
 800044a:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <buffer_read+0xb8>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	79fa      	ldrb	r2, [r7, #7]
 8000450:	429a      	cmp	r2, r3
 8000452:	d121      	bne.n	8000498 <buffer_read+0x58>
	{
		   if(_rx_buffer1->head  ==  _rx_buffer1->tail)
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <buffer_read+0xbc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <buffer_read+0xbc>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000464:	429a      	cmp	r2, r3
 8000466:	d102      	bne.n	800046e <buffer_read+0x2e>
			   {
				   return -1;
 8000468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800046c:	e03d      	b.n	80004ea <buffer_read+0xaa>
			   }
		   else
		   {
			  unsigned char c =  _rx_buffer1->buffer[_rx_buffer1->tail];
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <buffer_read+0xbc>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <buffer_read+0xbc>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800047a:	5cd3      	ldrb	r3, [r2, r3]
 800047c:	73bb      	strb	r3, [r7, #14]
			  _rx_buffer1->tail =  (uint32_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 800047e:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <buffer_read+0xbc>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <buffer_read+0xbc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			  return c;
 8000494:	7bbb      	ldrb	r3, [r7, #14]
 8000496:	e028      	b.n	80004ea <buffer_read+0xaa>
		   }
	}

	else if(uart == debug_port )
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <buffer_read+0xc0>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	79fa      	ldrb	r2, [r7, #7]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d121      	bne.n	80004e6 <buffer_read+0xa6>
	{
		   if(_rx_buffer2->head  ==  _rx_buffer2->tail)
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <buffer_read+0xc4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <buffer_read+0xc4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d102      	bne.n	80004bc <buffer_read+0x7c>
			 {
				   return -1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ba:	e016      	b.n	80004ea <buffer_read+0xaa>
			 }
		   else
		   {
				  unsigned char c =  _rx_buffer2->buffer[_rx_buffer2->tail];
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <buffer_read+0xc4>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <buffer_read+0xc4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004c8:	5cd3      	ldrb	r3, [r2, r3]
 80004ca:	73fb      	strb	r3, [r7, #15]
				  _rx_buffer2->tail =  (uint32_t)(_rx_buffer2->tail +1)%UART_BUFFER_SIZE;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <buffer_read+0xc4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <buffer_read+0xc4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
				  return c;
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	e001      	b.n	80004ea <buffer_read+0xaa>
		   }
	}

	else
	{
		 return -1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200008a8 	.word	0x200008a8
 8000500:	20000084 	.word	0x20000084
 8000504:	200008b0 	.word	0x200008b0

08000508 <buffer_write>:

void buffer_write(unsigned char c, portType uart )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
	if(uart == esp82xx_port )
 8000518:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <buffer_write+0xbc>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	429a      	cmp	r2, r3
 8000520:	d122      	bne.n	8000568 <buffer_write+0x60>
	{
		int loc =  (_tx_buffer1->head +1)%UART_BUFFER_SIZE;
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <buffer_write+0xc0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800052a:	3301      	adds	r3, #1
 800052c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000530:	60fb      	str	r3, [r7, #12]

		while(loc == _tx_buffer1->tail ){}
 8000532:	bf00      	nop
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <buffer_write+0xc0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	429a      	cmp	r2, r3
 8000540:	d0f8      	beq.n	8000534 <buffer_write+0x2c>

		_tx_buffer1->buffer[_tx_buffer1->head]=  c;
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <buffer_write+0xc0>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <buffer_write+0xc0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800054e:	79f9      	ldrb	r1, [r7, #7]
 8000550:	54d1      	strb	r1, [r2, r3]

		_tx_buffer1->head =  loc;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <buffer_write+0xc0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART1->CR1 |= CR1_TXEIE;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <buffer_write+0xc4>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <buffer_write+0xc4>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	60d3      	str	r3, [r2, #12]

	}

	if(uart == debug_port)
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <buffer_write+0xc8>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	429a      	cmp	r2, r3
 8000570:	d122      	bne.n	80005b8 <buffer_write+0xb0>
	{
		int loc =  (_tx_buffer2->head +1)%UART_BUFFER_SIZE;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <buffer_write+0xcc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800057a:	3301      	adds	r3, #1
 800057c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000580:	60bb      	str	r3, [r7, #8]

		while(loc == _tx_buffer2->tail ){}
 8000582:	bf00      	nop
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <buffer_write+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	429a      	cmp	r2, r3
 8000590:	d0f8      	beq.n	8000584 <buffer_write+0x7c>

		_tx_buffer2->buffer[_tx_buffer2->head]=  c;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <buffer_write+0xcc>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <buffer_write+0xcc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800059e:	79f9      	ldrb	r1, [r7, #7]
 80005a0:	54d1      	strb	r1, [r2, r3]

		_tx_buffer2->head =  loc;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <buffer_write+0xcc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		/*Enable UART Transmit interrupt*/
		USART2->CR1 |= CR1_TXEIE;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <buffer_write+0xd0>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <buffer_write+0xd0>)
 80005b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b6:	60d3      	str	r3, [r2, #12]

	  }
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000000 	.word	0x20000000
 80005c8:	200008ac 	.word	0x200008ac
 80005cc:	40011000 	.word	0x40011000
 80005d0:	20000084 	.word	0x20000084
 80005d4:	200008b4 	.word	0x200008b4
 80005d8:	40004400 	.word	0x40004400

080005dc <is_data>:


int32_t is_data(portType uart)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if(uart ==  esp82xx_port)
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <is_data+0x78>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d111      	bne.n	8000614 <is_data+0x38>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <is_data+0x7c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <is_data+0x7c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000602:	b29b      	uxth	r3, r3
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800060c:	b29b      	uxth	r3, r3
 800060e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000612:	e018      	b.n	8000646 <is_data+0x6a>
	}
	else if(uart ==  debug_port)
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <is_data+0x80>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	429a      	cmp	r2, r3
 800061c:	d111      	bne.n	8000642 <is_data+0x66>
	{
		return(uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <is_data+0x84>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <is_data+0x84>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000630:	b29b      	uxth	r3, r3
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800063a:	b29b      	uxth	r3, r3
 800063c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000640:	e001      	b.n	8000646 <is_data+0x6a>

	}
	else
	{
		return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	200008a8 	.word	0x200008a8
 800065c:	20000084 	.word	0x20000084
 8000660:	200008b0 	.word	0x200008b0

08000664 <get_first_char>:
/*Function to find the position of the first character of a string in the
 * the buffer*/


static void get_first_char(char *str)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/*Make sure there is data in the buffer*/
	while(!is_data(esp82xx_port)){}
 800066c:	bf00      	nop
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <get_first_char+0x68>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffb2 	bl	80005dc <is_data>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f7      	beq.n	800066e <get_first_char+0xa>

	while(buffer_peek(esp82xx_port)!= str[0]){
 800067e:	e016      	b.n	80006ae <get_first_char+0x4a>

		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail +1)%UART_BUFFER_SIZE;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <get_first_char+0x6c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000688:	b29b      	uxth	r3, r3
 800068a:	3301      	adds	r3, #1
 800068c:	b29b      	uxth	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <get_first_char+0x6c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000698:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		while(!is_data(esp82xx_port)){}
 800069c:	bf00      	nop
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <get_first_char+0x68>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff9a 	bl	80005dc <is_data>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f7      	beq.n	800069e <get_first_char+0x3a>
	while(buffer_peek(esp82xx_port)!= str[0]){
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <get_first_char+0x68>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fe7a 	bl	80003ac <buffer_peek>
 80006b8:	4602      	mov	r2, r0
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d1de      	bne.n	8000680 <get_first_char+0x1c>

	}
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200008a8 	.word	0x200008a8

080006d4 <is_response>:


int8_t is_response(char *str)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	int curr_pos = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
	int len = strlen(str);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fd7d 	bl	80001e0 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	60bb      	str	r3, [r7, #8]

	while( curr_pos != len)
 80006ea:	e028      	b.n	800073e <is_response+0x6a>
	{
		curr_pos  = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
		get_first_char(str);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffb7 	bl	8000664 <get_first_char>

		while(buffer_peek(esp82xx_port) == str[curr_pos])
 80006f6:	e016      	b.n	8000726 <is_response+0x52>
		{
			curr_pos++;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]

			buffer_read(esp82xx_port);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <is_response+0x8c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe9c 	bl	8000440 <buffer_read>

			if(curr_pos ==  len)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	429a      	cmp	r2, r3
 800070e:	d101      	bne.n	8000714 <is_response+0x40>
			{
				/*success*/
				return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e020      	b.n	8000756 <is_response+0x82>
			}

			while(!is_data(esp82xx_port)){}
 8000714:	bf00      	nop
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <is_response+0x8c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff5e 	bl	80005dc <is_data>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f7      	beq.n	8000716 <is_response+0x42>
		while(buffer_peek(esp82xx_port) == str[curr_pos])
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <is_response+0x8c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe3e 	bl	80003ac <buffer_peek>
 8000730:	4601      	mov	r1, r0
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4299      	cmp	r1, r3
 800073c:	d0dc      	beq.n	80006f8 <is_response+0x24>
	while( curr_pos != len)
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d1d2      	bne.n	80006ec <is_response+0x18>

		}

	}

	if(curr_pos  == len)
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	429a      	cmp	r2, r3
 800074c:	d101      	bne.n	8000752 <is_response+0x7e>
	{
		/*success*/
	   return 1;
 800074e:	2301      	movs	r3, #1
 8000750:	e001      	b.n	8000756 <is_response+0x82>
	}
	else
	{
	   return -1;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000

08000764 <buffer_send_string>:
}



void buffer_send_string(const char *s, portType uart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	while(*s != '\0')
 8000770:	e008      	b.n	8000784 <buffer_send_string+0x20>
	{
		buffer_write(*s++,uart);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fec2 	bl	8000508 <buffer_write>
	while(*s != '\0')
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f2      	bne.n	8000772 <buffer_send_string+0xe>
	}
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <process_copy>:

static int8_t process_copy(char * str, char * dest_buffer, int start_pos)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
	int curr_pos = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
	int len =  strlen(str);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fd19 	bl	80001e0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	617b      	str	r3, [r7, #20]
	int indx = start_pos;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	61bb      	str	r3, [r7, #24]

	while(!is_data(esp82xx_port)){}
 80007b6:	bf00      	nop
 80007b8:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <process_copy+0x11c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff0d 	bl	80005dc <is_data>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f7      	beq.n	80007b8 <process_copy+0x20>

	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 80007c8:	e024      	b.n	8000814 <process_copy+0x7c>
	{
		dest_buffer[indx] =  _rx_buffer1->buffer[_rx_buffer1->tail];
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <process_copy+0x120>)
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <process_copy+0x120>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	68b8      	ldr	r0, [r7, #8]
 80007da:	4403      	add	r3, r0
 80007dc:	5c8a      	ldrb	r2, [r1, r2]
 80007de:	701a      	strb	r2, [r3, #0]
		_rx_buffer1->tail =  (uint16_t)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <process_copy+0x120>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	3301      	adds	r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <process_copy+0x120>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		indx++;
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	3301      	adds	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]

		while(!is_data(esp82xx_port)){}
 8000802:	bf00      	nop
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <process_copy+0x11c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee7 	bl	80005dc <is_data>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f7      	beq.n	8000804 <process_copy+0x6c>
	while(buffer_peek(esp82xx_port) != str[curr_pos] )
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <process_copy+0x11c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fdc7 	bl	80003ac <buffer_peek>
 800081e:	4601      	mov	r1, r0
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4299      	cmp	r1, r3
 800082a:	d1ce      	bne.n	80007ca <process_copy+0x32>


	}

	while(buffer_peek(esp82xx_port) == str[curr_pos])
 800082c:	e01f      	b.n	800086e <process_copy+0xd6>
	{
		curr_pos++;
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3301      	adds	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
		dest_buffer[indx++] = buffer_read(esp82xx_port);
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <process_copy+0x11c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe01 	bl	8000440 <buffer_read>
 800083e:	4601      	mov	r1, r0
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	61ba      	str	r2, [r7, #24]
 8000846:	461a      	mov	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	b2ca      	uxtb	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]

		if(curr_pos == len){
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	429a      	cmp	r2, r3
 8000856:	d101      	bne.n	800085c <process_copy+0xc4>

			return 1;
 8000858:	2301      	movs	r3, #1
 800085a:	e027      	b.n	80008ac <process_copy+0x114>
		}

		while(!is_data(esp82xx_port)){}
 800085c:	bf00      	nop
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <process_copy+0x11c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff feba 	bl	80005dc <is_data>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f7      	beq.n	800085e <process_copy+0xc6>
	while(buffer_peek(esp82xx_port) == str[curr_pos])
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <process_copy+0x11c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd9a 	bl	80003ac <buffer_peek>
 8000878:	4601      	mov	r1, r0
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4299      	cmp	r1, r3
 8000884:	d0d3      	beq.n	800082e <process_copy+0x96>

	}

	if(curr_pos != len)
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	429a      	cmp	r2, r3
 800088c:	d006      	beq.n	800089c <process_copy+0x104>
	{
		curr_pos = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]

		process_copy(str, dest_buffer, indx);
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff ff7e 	bl	8000798 <process_copy>

	}

	if(curr_pos  ==  len)
 800089c:	69fa      	ldr	r2, [r7, #28]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d101      	bne.n	80008a8 <process_copy+0x110>
	{
		return 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e001      	b.n	80008ac <process_copy+0x114>
	}
	else
	{
		return -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}



}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	200008a8 	.word	0x200008a8

080008bc <copy_up_to_string>:
int8_t copy_up_to_string(char * str, char * dest_buffer)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	/*Process copy*/
	return (process_copy(str,dest_buffer, 0));
 80008c6:	2200      	movs	r2, #0
 80008c8:	6839      	ldr	r1, [r7, #0]
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff64 	bl	8000798 <process_copy>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <esp82_uart_callback>:

void esp82_uart_callback(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART1->SR & SR_RXNE) != 0) && ((USART1->CR1 & CR1_RXNEIE) != 0))
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <esp82_uart_callback+0x94>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00f      	beq.n	800090e <esp82_uart_callback+0x32>
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <esp82_uart_callback+0x94>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <esp82_uart_callback+0x32>
	{
		unsigned char c = USART1->DR;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <esp82_uart_callback+0x94>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer1);
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <esp82_uart_callback+0x98>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fcf5 	bl	80002f8 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART1->SR & SR_TXE) != 0) && ((USART1->CR1 & CR1_TXEIE) != 0))
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <esp82_uart_callback+0x94>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	2b00      	cmp	r3, #0
 8000918:	d026      	beq.n	8000968 <esp82_uart_callback+0x8c>
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <esp82_uart_callback+0x94>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	2b00      	cmp	r3, #0
 8000924:	d020      	beq.n	8000968 <esp82_uart_callback+0x8c>
	{
		if(tx_buffer1.head  == tx_buffer1.tail)
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <esp82_uart_callback+0x9c>)
 8000928:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <esp82_uart_callback+0x9c>)
 800092e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000932:	429a      	cmp	r2, r3
 8000934:	d106      	bne.n	8000944 <esp82_uart_callback+0x68>
		{
			USART1->CR1 &=~CR1_TXEIE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <esp82_uart_callback+0x94>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <esp82_uart_callback+0x94>)
 800093c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000940:	60d3      	str	r3, [r2, #12]
			USART1->DR = c;

		}
	}

}
 8000942:	e011      	b.n	8000968 <esp82_uart_callback+0x8c>
			unsigned char c  = tx_buffer1.buffer[tx_buffer1.tail];
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <esp82_uart_callback+0x9c>)
 8000946:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <esp82_uart_callback+0x9c>)
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	71bb      	strb	r3, [r7, #6]
			tx_buffer1.tail =  (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <esp82_uart_callback+0x9c>)
 8000952:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000956:	3301      	adds	r3, #1
 8000958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <esp82_uart_callback+0x9c>)
 800095e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART1->DR = c;
 8000962:	4a03      	ldr	r2, [pc, #12]	; (8000970 <esp82_uart_callback+0x94>)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	6053      	str	r3, [r2, #4]
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40011000 	.word	0x40011000
 8000974:	200008a8 	.word	0x200008a8
 8000978:	20000290 	.word	0x20000290

0800097c <debug_uart_callback>:

void debug_uart_callback(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	/*Check if RXNE is raised and also if RXNEIE is enabled*/
	if(((USART2->SR & SR_RXNE) != 0) && ((USART2->CR1 & CR1_RXNEIE) != 0))
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <debug_uart_callback+0x94>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00f      	beq.n	80009ae <debug_uart_callback+0x32>
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <debug_uart_callback+0x94>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	2b00      	cmp	r3, #0
 8000998:	d009      	beq.n	80009ae <debug_uart_callback+0x32>
	{
		unsigned char c = USART2->DR;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <debug_uart_callback+0x94>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	71fb      	strb	r3, [r7, #7]
		buff_store_char(c,_rx_buffer2);
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <debug_uart_callback+0x98>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fca5 	bl	80002f8 <buff_store_char>

	}

	/*Check if TXE is raised and also if TXEIE is enabled*/

	if(((USART2->SR & SR_TXE) != 0) && ((USART2->CR1 & CR1_TXEIE) != 0))
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <debug_uart_callback+0x94>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d026      	beq.n	8000a08 <debug_uart_callback+0x8c>
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <debug_uart_callback+0x94>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d020      	beq.n	8000a08 <debug_uart_callback+0x8c>
	{
		if(tx_buffer2.head  == tx_buffer2.tail)
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <debug_uart_callback+0x9c>)
 80009c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <debug_uart_callback+0x9c>)
 80009ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d106      	bne.n	80009e4 <debug_uart_callback+0x68>
		{
			USART2->CR1 &=~CR1_TXEIE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <debug_uart_callback+0x94>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <debug_uart_callback+0x94>)
 80009dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009e0:	60d3      	str	r3, [r2, #12]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
			USART2->DR = c;

		}
	}
}
 80009e2:	e011      	b.n	8000a08 <debug_uart_callback+0x8c>
			unsigned char c  = tx_buffer2.buffer[tx_buffer2.tail];
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <debug_uart_callback+0x9c>)
 80009e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <debug_uart_callback+0x9c>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	71bb      	strb	r3, [r7, #6]
			tx_buffer2.tail =  (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <debug_uart_callback+0x9c>)
 80009f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009f6:	3301      	adds	r3, #1
 80009f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <debug_uart_callback+0x9c>)
 80009fe:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			USART2->DR = c;
 8000a02:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <debug_uart_callback+0x94>)
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	6053      	str	r3, [r2, #4]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004400 	.word	0x40004400
 8000a14:	200008b0 	.word	0x200008b0
 8000a18:	200006a0 	.word	0x200006a0

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <debug_uart_init>:
	debug_uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <debug_uart_init+0xe8>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a37      	ldr	r2, [pc, #220]	; (8000b40 <debug_uart_init+0xe8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000a68:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <debug_uart_init+0xec>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <debug_uart_init+0xec>)
 8000a6e:	f023 0310 	bic.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <debug_uart_init+0xec>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <debug_uart_init+0xec>)
 8000a7a:	f043 0320 	orr.w	r3, r3, #32
 8000a7e:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <debug_uart_init+0xec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <debug_uart_init+0xec>)
 8000a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <debug_uart_init+0xec>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <debug_uart_init+0xec>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <debug_uart_init+0xec>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <debug_uart_init+0xec>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <debug_uart_init+0xec>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <debug_uart_init+0xec>)
 8000aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <debug_uart_init+0xec>)
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <debug_uart_init+0xec>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <debug_uart_init+0xec>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <debug_uart_init+0xec>)
 8000ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ac6:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <debug_uart_init+0xec>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <debug_uart_init+0xec>)
 8000ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <debug_uart_init+0xec>)
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <debug_uart_init+0xec>)
 8000ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ade:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <debug_uart_init+0xec>)
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <debug_uart_init+0xec>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <debug_uart_init+0xec>)
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <debug_uart_init+0xec>)
 8000af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000af6:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <debug_uart_init+0xe8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <debug_uart_init+0xe8>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <debug_uart_init+0xf0>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <debug_uart_init+0xf0>)
 8000b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b0e:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000b10:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <debug_uart_init+0xf4>)
 8000b16:	f000 f8c1 	bl	8000c9c <compute_uart_bd>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <debug_uart_init+0xf0>)
 8000b20:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <debug_uart_init+0xf0>)
 8000b24:	220c      	movs	r2, #12
 8000b26:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 8000b28:	2026      	movs	r0, #38	; 0x26
 8000b2a:	f7ff ff77 	bl	8000a1c <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <debug_uart_init+0xf0>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <debug_uart_init+0xf0>)
 8000b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b38:	60d3      	str	r3, [r2, #12]


}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	00f42400 	.word	0x00f42400

08000b50 <esp_uart_init>:
 * */



void esp_uart_init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <esp_uart_init+0xe8>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a37      	ldr	r2, [pc, #220]	; (8000c38 <esp_uart_init+0xe8>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 and PA10 modes to alternate function*/

	/*PA9*/
	GPIOA->MODER &=~(1U<<18);
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <esp_uart_init+0xec>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <esp_uart_init+0xec>)
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000b6c:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <esp_uart_init+0xec>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <esp_uart_init+0xec>)
 8000b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b76:	6013      	str	r3, [r2, #0]

    /*PA10*/
	GPIOA->MODER &=~(1U<<20);
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <esp_uart_init+0xec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <esp_uart_init+0xec>)
 8000b7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b82:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <esp_uart_init+0xec>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <esp_uart_init+0xec>)
 8000b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8e:	6013      	str	r3, [r2, #0]

    /*Set alternate function type to UART1 AF07*/

	/*PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <esp_uart_init+0xec>)
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <esp_uart_init+0xec>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <esp_uart_init+0xec>)
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <esp_uart_init+0xec>)
 8000ba2:	f043 0320 	orr.w	r3, r3, #32
 8000ba6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <esp_uart_init+0xec>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <esp_uart_init+0xec>)
 8000bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <esp_uart_init+0xec>)
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <esp_uart_init+0xec>)
 8000bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bbe:	6253      	str	r3, [r2, #36]	; 0x24

	/*PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <esp_uart_init+0xec>)
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <esp_uart_init+0xec>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <esp_uart_init+0xec>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <esp_uart_init+0xec>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <esp_uart_init+0xec>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <esp_uart_init+0xec>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <esp_uart_init+0xec>)
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <esp_uart_init+0xec>)
 8000bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bee:	6253      	str	r3, [r2, #36]	; 0x24

	/************Configure UART module*****************/

	/*Enable clock access to UART1*/
	RCC->APB2ENR |= UART1EN;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <esp_uart_init+0xe8>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <esp_uart_init+0xe8>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6453      	str	r3, [r2, #68]	; 0x44

	/*Disable UART module*/
	USART1->CR1 &=~CR1_UE;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <esp_uart_init+0xf0>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <esp_uart_init+0xf0>)
 8000c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c06:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART1->BRR =  compute_uart_bd(APB2_CLK,UART_BAUDRATE);
 8000c08:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <esp_uart_init+0xf4>)
 8000c0e:	f000 f845 	bl	8000c9c <compute_uart_bd>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <esp_uart_init+0xf0>)
 8000c18:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <esp_uart_init+0xf0>)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	60da      	str	r2, [r3, #12]

	/*Enable interrupt in the NVIC*/
	NVIC_EnableIRQ(USART1_IRQn);
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f7ff fefb 	bl	8000a1c <__NVIC_EnableIRQ>

	/*Enable UART module*/
	USART1->CR1 |=CR1_UE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <esp_uart_init+0xf0>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <esp_uart_init+0xf0>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c30:	60d3      	str	r3, [r2, #12]



}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40011000 	.word	0x40011000
 8000c44:	00f42400 	.word	0x00f42400

08000c48 <systick_delay_ms>:
	USART2->DR  =  (ch & 0xFF);
}


void systick_delay_ms(uint32_t delay)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <systick_delay_ms+0x50>)
 8000c52:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c56:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <systick_delay_ms+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_CLKSRC |CTRL_ENABLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <systick_delay_ms+0x50>)
 8000c60:	2205      	movs	r2, #5
 8000c62:	601a      	str	r2, [r3, #0]

	for(int i = 0; i< delay ;i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e009      	b.n	8000c7e <systick_delay_ms+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG)== 0){}
 8000c6a:	bf00      	nop
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <systick_delay_ms+0x50>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f9      	beq.n	8000c6c <systick_delay_ms+0x24>
	for(int i = 0; i< delay ;i++)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d8f1      	bhi.n	8000c6a <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <systick_delay_ms+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]


}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	085a      	lsrs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	441a      	add	r2, r3
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb4:	b29b      	uxth	r3, r3
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <esp82xx_sever_init>:
static void esp82xx_multi_conn_en(void);
static void esp82xx_create_tcp_server(void);


void esp82xx_sever_init(char * ssid, char *password)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
	circular_buffer_init();
 8000ccc:	f7ff fae0 	bl	8000290 <circular_buffer_init>
	esp82xx_reset();
 8000cd0:	f000 f812 	bl	8000cf8 <esp82xx_reset>
	esp82xx_startup_test();
 8000cd4:	f000 f836 	bl	8000d44 <esp82xx_startup_test>
	esp82xx_sta_mode();
 8000cd8:	f000 f85a 	bl	8000d90 <esp82xx_sta_mode>
	esp82xx_ap_connect(ssid,password);
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f87c 	bl	8000ddc <esp82xx_ap_connect>
	esp82xx_get_local_ip();
 8000ce4:	f000 f8c0 	bl	8000e68 <esp82xx_get_local_ip>
	esp82xx_multi_conn_en();
 8000ce8:	f000 f912 	bl	8000f10 <esp82xx_multi_conn_en>
	esp82xx_create_tcp_server();
 8000cec:	f000 f936 	bl	8000f5c <esp82xx_create_tcp_server>




}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <esp82xx_reset>:
/*Reset esp82xx*/

 static void esp82xx_reset(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	/*Send reset command*/
	buffer_send_string("AT+RST\r\n",esp82xx_port);
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <esp82xx_reset+0x38>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <esp82xx_reset+0x3c>)
 8000d04:	f7ff fd2e 	bl	8000764 <buffer_send_string>

	/*Delay for 1 second*/
	systick_delay_ms(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f7ff ff9c 	bl	8000c48 <systick_delay_ms>

	/*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000d10:	bf00      	nop
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <esp82xx_reset+0x40>)
 8000d14:	f7ff fcde 	bl	80006d4 <is_response>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <esp82xx_reset+0x1a>

	buffer_send_string("Reset was successful...\n\r",debug_port);
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <esp82xx_reset+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <esp82xx_reset+0x48>)
 8000d26:	f7ff fd1d 	bl	8000764 <buffer_send_string>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000
 8000d34:	080019f8 	.word	0x080019f8
 8000d38:	08001a04 	.word	0x08001a04
 8000d3c:	20000084 	.word	0x20000084
 8000d40:	08001a0c 	.word	0x08001a0c

08000d44 <esp82xx_startup_test>:


 /*Test AT startup*/
 static void esp82xx_startup_test(void)
 {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <esp82xx_startup_test+0x38>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff faf7 	bl	8000340 <buffer_clear>

	 /*Send test command*/
	buffer_send_string("AT\r\n",esp82xx_port);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <esp82xx_startup_test+0x38>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4619      	mov	r1, r3
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <esp82xx_startup_test+0x3c>)
 8000d5a:	f7ff fd03 	bl	8000764 <buffer_send_string>



     /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000d5e:	bf00      	nop
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <esp82xx_startup_test+0x40>)
 8000d62:	f7ff fcb7 	bl	80006d4 <is_response>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f9      	beq.n	8000d60 <esp82xx_startup_test+0x1c>

	buffer_send_string("AT Startup test successful...\n\r",debug_port);
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <esp82xx_startup_test+0x44>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <esp82xx_startup_test+0x48>)
 8000d74:	f7ff fcf6 	bl	8000764 <buffer_send_string>

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	08001a28 	.word	0x08001a28
 8000d84:	08001a04 	.word	0x08001a04
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	08001a30 	.word	0x08001a30

08000d90 <esp82xx_sta_mode>:

 /*Enable station mode*/
 static  void esp82xx_sta_mode(void)
 {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <esp82xx_sta_mode+0x38>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fad1 	bl	8000340 <buffer_clear>

	 /*Send STA command*/
	buffer_send_string("AT+CWMODE=1\r\n",esp82xx_port);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <esp82xx_sta_mode+0x38>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <esp82xx_sta_mode+0x3c>)
 8000da6:	f7ff fcdd 	bl	8000764 <buffer_send_string>

    /*Wait for "OK" response*/
	while(! (is_response("OK\r\n"))){}
 8000daa:	bf00      	nop
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <esp82xx_sta_mode+0x40>)
 8000dae:	f7ff fc91 	bl	80006d4 <is_response>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f9      	beq.n	8000dac <esp82xx_sta_mode+0x1c>

	buffer_send_string("STA Mode set successfully...\n\r",debug_port);
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <esp82xx_sta_mode+0x44>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <esp82xx_sta_mode+0x48>)
 8000dc0:	f7ff fcd0 	bl	8000764 <buffer_send_string>

 }
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	08001a50 	.word	0x08001a50
 8000dd0:	08001a04 	.word	0x08001a04
 8000dd4:	20000084 	.word	0x20000084
 8000dd8:	08001a60 	.word	0x08001a60

08000ddc <esp82xx_ap_connect>:


 /*Connect to Access Apoint (AP)*/

 static  void esp82xx_ap_connect(char *ssid, char *password)
 {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b096      	sub	sp, #88	; 0x58
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	 char data[80];

	 /*Clear esp uart buffer*/
	 buffer_clear(esp82xx_port);
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <esp82xx_ap_connect+0x74>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff faa8 	bl	8000340 <buffer_clear>

	 buffer_send_string("Connecting to access point...\n\r",debug_port);
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <esp82xx_ap_connect+0x78>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <esp82xx_ap_connect+0x7c>)
 8000df8:	f7ff fcb4 	bl	8000764 <buffer_send_string>

	 /*Put ssid,password  and command into one packet*/
	 sprintf(data,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 8000dfc:	f107 0008 	add.w	r0, r7, #8
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4915      	ldr	r1, [pc, #84]	; (8000e5c <esp82xx_ap_connect+0x80>)
 8000e06:	f000 f97d 	bl	8001104 <siprintf>

	 /*Send entire packet to esp uart*/
	 buffer_send_string(data,esp82xx_port);
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <esp82xx_ap_connect+0x74>)
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fca5 	bl	8000764 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000e1a:	bf00      	nop
 8000e1c:	4810      	ldr	r0, [pc, #64]	; (8000e60 <esp82xx_ap_connect+0x84>)
 8000e1e:	f7ff fc59 	bl	80006d4 <is_response>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f9      	beq.n	8000e1c <esp82xx_ap_connect+0x40>

	 sprintf(data, "Connected : \"%s\"\r\n",ssid);
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	490d      	ldr	r1, [pc, #52]	; (8000e64 <esp82xx_ap_connect+0x88>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f967 	bl	8001104 <siprintf>

	 buffer_send_string(data,debug_port);
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <esp82xx_ap_connect+0x78>)
 8000e38:	781a      	ldrb	r2, [r3, #0]
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fc8f 	bl	8000764 <buffer_send_string>

 }
 8000e46:	bf00      	nop
 8000e48:	3758      	adds	r7, #88	; 0x58
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000084 	.word	0x20000084
 8000e58:	08001a80 	.word	0x08001a80
 8000e5c:	08001aa0 	.word	0x08001aa0
 8000e60:	08001a04 	.word	0x08001a04
 8000e64:	08001ab8 	.word	0x08001ab8

08000e68 <esp82xx_get_local_ip>:

 /*Get device local IP address*/

 static void esp82xx_get_local_ip(void)
 {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09a      	sub	sp, #104	; 0x68
 8000e6c:	af00      	add	r7, sp, #0
	 char data[80];
	 char buffer[20];
	 int len;

	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <esp82xx_get_local_ip+0x8c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fa64 	bl	8000340 <buffer_clear>

	 /*Send 'get ip address ' command*/
	 buffer_send_string("AT+CIFSR\r\n",esp82xx_port);
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <esp82xx_get_local_ip+0x8c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <esp82xx_get_local_ip+0x90>)
 8000e80:	f7ff fc70 	bl	8000764 <buffer_send_string>

	 /*Wait for 'Station IP'  response*/
	 while(!(is_response("CIFSR:STAIP,\""))){}
 8000e84:	bf00      	nop
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <esp82xx_get_local_ip+0x94>)
 8000e88:	f7ff fc24 	bl	80006d4 <is_response>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <esp82xx_get_local_ip+0x1e>

	 /*Copy IP address portion*/
	 while(!(copy_up_to_string("\"",buffer))){}
 8000e92:	bf00      	nop
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <esp82xx_get_local_ip+0x98>)
 8000e9a:	f7ff fd0f 	bl	80008bc <copy_up_to_string>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f7      	beq.n	8000e94 <esp82xx_get_local_ip+0x2c>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000ea4:	bf00      	nop
 8000ea6:	4817      	ldr	r0, [pc, #92]	; (8000f04 <esp82xx_get_local_ip+0x9c>)
 8000ea8:	f7ff fc14 	bl	80006d4 <is_response>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f9      	beq.n	8000ea6 <esp82xx_get_local_ip+0x3e>

	 len = strlen(buffer);
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f993 	bl	80001e0 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	667b      	str	r3, [r7, #100]	; 0x64

	 buffer[len - 1] = '\0';
 8000ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	3368      	adds	r3, #104	; 0x68
 8000ec4:	443b      	add	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f803 2c68 	strb.w	r2, [r3, #-104]

	 sprintf(data,"Local IP Address :  %s \r\n",buffer);
 8000ecc:	463a      	mov	r2, r7
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <esp82xx_get_local_ip+0xa0>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f915 	bl	8001104 <siprintf>

	 buffer_send_string(data,debug_port);
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <esp82xx_get_local_ip+0xa4>)
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fc3d 	bl	8000764 <buffer_send_string>


 }
 8000eea:	bf00      	nop
 8000eec:	3768      	adds	r7, #104	; 0x68
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	08001acc 	.word	0x08001acc
 8000efc:	08001ad8 	.word	0x08001ad8
 8000f00:	08001ae8 	.word	0x08001ae8
 8000f04:	08001a04 	.word	0x08001a04
 8000f08:	08001aec 	.word	0x08001aec
 8000f0c:	20000084 	.word	0x20000084

08000f10 <esp82xx_multi_conn_en>:

 /*Enable multiple connections*/
 static void esp82xx_multi_conn_en(void)
 {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <esp82xx_multi_conn_en+0x38>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa11 	bl	8000340 <buffer_clear>

	 /*Send 'enable multi conn cmd'*/
	 buffer_send_string("AT+CIPMUX=1\r\n",esp82xx_port);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <esp82xx_multi_conn_en+0x38>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <esp82xx_multi_conn_en+0x3c>)
 8000f26:	f7ff fc1d 	bl	8000764 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000f2a:	bf00      	nop
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <esp82xx_multi_conn_en+0x40>)
 8000f2e:	f7ff fbd1 	bl	80006d4 <is_response>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f9      	beq.n	8000f2c <esp82xx_multi_conn_en+0x1c>

	 buffer_send_string("Multiple connections enabled....\n\r",debug_port);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <esp82xx_multi_conn_en+0x44>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <esp82xx_multi_conn_en+0x48>)
 8000f40:	f7ff fc10 	bl	8000764 <buffer_send_string>

 }
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	08001b08 	.word	0x08001b08
 8000f50:	08001a04 	.word	0x08001a04
 8000f54:	20000084 	.word	0x20000084
 8000f58:	08001b18 	.word	0x08001b18

08000f5c <esp82xx_create_tcp_server>:


 /*Creat tcp server*/

 static void esp82xx_create_tcp_server(void)
 {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	 /*Clear buffer*/
	 buffer_clear(esp82xx_port);
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <esp82xx_create_tcp_server+0x38>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff f9eb 	bl	8000340 <buffer_clear>

	 /*Send 'create tcp server cmd'*/
	 buffer_send_string("AT+CIPSERVER=1,80\r\n",esp82xx_port);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <esp82xx_create_tcp_server+0x38>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <esp82xx_create_tcp_server+0x3c>)
 8000f72:	f7ff fbf7 	bl	8000764 <buffer_send_string>

	  /*Wait for "OK" response*/
	 while(! (is_response("OK\r\n"))){}
 8000f76:	bf00      	nop
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <esp82xx_create_tcp_server+0x40>)
 8000f7a:	f7ff fbab 	bl	80006d4 <is_response>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f9      	beq.n	8000f78 <esp82xx_create_tcp_server+0x1c>

	 buffer_send_string("Please connect to the Local IP above....\n\r",debug_port);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <esp82xx_create_tcp_server+0x44>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <esp82xx_create_tcp_server+0x48>)
 8000f8c:	f7ff fbea 	bl	8000764 <buffer_send_string>

 }
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08001b3c 	.word	0x08001b3c
 8000f9c:	08001a04 	.word	0x08001a04
 8000fa0:	20000084 	.word	0x20000084
 8000fa4:	08001b50 	.word	0x08001b50

08000fa8 <USART1_IRQHandler>:
	   return 1;

 }

void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	esp82_uart_callback();
 8000fac:	f7ff fc96 	bl	80008dc <esp82_uart_callback>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	debug_uart_callback();
 8000fb8:	f7ff fce0 	bl	800097c <debug_uart_callback>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <main>:

#define SSID_NAME  "FRITZ!Box 6660 Cable BP"
#define PASSKEY    "73307968999628369212"

int main()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    /*Initialize debug uart*/
	debug_uart_init();
 8000fc4:	f7ff fd48 	bl	8000a58 <debug_uart_init>

	/*Initialize esp82xx uart*/
	esp_uart_init();
 8000fc8:	f7ff fdc2 	bl	8000b50 <esp_uart_init>


    /*Initialize server*/
	esp82xx_sever_init(SSID_NAME,PASSKEY);
 8000fcc:	4902      	ldr	r1, [pc, #8]	; (8000fd8 <main+0x18>)
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <main+0x1c>)
 8000fd0:	f7ff fe77 	bl	8000cc2 <esp82xx_sever_init>

	while(1)
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x14>
 8000fd6:	bf00      	nop
 8000fd8:	08001bac 	.word	0x08001bac
 8000fdc:	08001bc4 	.word	0x08001bc4

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f000 f846 	bl	80010a0 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200008b8 	.word	0x200008b8
 8001048:	200008d0 	.word	0x200008d0

0800104c <Reset_Handler>:
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopForever+0x2>)
 800104e:	4685      	mov	sp, r0
 8001050:	f3af 8000 	nop.w
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopForever+0x6>)
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopForever+0xa>)
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopForever+0xe>)
 800105a:	2300      	movs	r3, #0
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:
 800105e:	58d4      	ldr	r4, [r2, r3]
 8001060:	50c4      	str	r4, [r0, r3]
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:
 8001064:	18c4      	adds	r4, r0, r3
 8001066:	428c      	cmp	r4, r1
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopForever+0x12>)
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopForever+0x16>)
 800106e:	2300      	movs	r3, #0
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:
 8001076:	42a2      	cmp	r2, r4
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>
 800107a:	f000 f817 	bl	80010ac <__libc_init_array>
 800107e:	f7ff ff9f 	bl	8000fc0 <main>

08001082 <LoopForever>:
 8001082:	e7fe      	b.n	8001082 <LoopForever>
 8001084:	20020000 	.word	0x20020000
 8001088:	20000000 	.word	0x20000000
 800108c:	20000068 	.word	0x20000068
 8001090:	08001c18 	.word	0x08001c18
 8001094:	20000068 	.word	0x20000068
 8001098:	200008cc 	.word	0x200008cc

0800109c <ADC_IRQHandler>:
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <__errno>:
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <__errno+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000004 	.word	0x20000004

080010ac <__libc_init_array>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	4d0d      	ldr	r5, [pc, #52]	; (80010e4 <__libc_init_array+0x38>)
 80010b0:	4c0d      	ldr	r4, [pc, #52]	; (80010e8 <__libc_init_array+0x3c>)
 80010b2:	1b64      	subs	r4, r4, r5
 80010b4:	10a4      	asrs	r4, r4, #2
 80010b6:	2600      	movs	r6, #0
 80010b8:	42a6      	cmp	r6, r4
 80010ba:	d109      	bne.n	80010d0 <__libc_init_array+0x24>
 80010bc:	4d0b      	ldr	r5, [pc, #44]	; (80010ec <__libc_init_array+0x40>)
 80010be:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <__libc_init_array+0x44>)
 80010c0:	f000 fc8e 	bl	80019e0 <_init>
 80010c4:	1b64      	subs	r4, r4, r5
 80010c6:	10a4      	asrs	r4, r4, #2
 80010c8:	2600      	movs	r6, #0
 80010ca:	42a6      	cmp	r6, r4
 80010cc:	d105      	bne.n	80010da <__libc_init_array+0x2e>
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
 80010d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80010d4:	4798      	blx	r3
 80010d6:	3601      	adds	r6, #1
 80010d8:	e7ee      	b.n	80010b8 <__libc_init_array+0xc>
 80010da:	f855 3b04 	ldr.w	r3, [r5], #4
 80010de:	4798      	blx	r3
 80010e0:	3601      	adds	r6, #1
 80010e2:	e7f2      	b.n	80010ca <__libc_init_array+0x1e>
 80010e4:	08001c10 	.word	0x08001c10
 80010e8:	08001c10 	.word	0x08001c10
 80010ec:	08001c10 	.word	0x08001c10
 80010f0:	08001c14 	.word	0x08001c14

080010f4 <memset>:
 80010f4:	4402      	add	r2, r0
 80010f6:	4603      	mov	r3, r0
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d100      	bne.n	80010fe <memset+0xa>
 80010fc:	4770      	bx	lr
 80010fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001102:	e7f9      	b.n	80010f8 <memset+0x4>

08001104 <siprintf>:
 8001104:	b40e      	push	{r1, r2, r3}
 8001106:	b500      	push	{lr}
 8001108:	b09c      	sub	sp, #112	; 0x70
 800110a:	ab1d      	add	r3, sp, #116	; 0x74
 800110c:	9002      	str	r0, [sp, #8]
 800110e:	9006      	str	r0, [sp, #24]
 8001110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <siprintf+0x38>)
 8001116:	9107      	str	r1, [sp, #28]
 8001118:	9104      	str	r1, [sp, #16]
 800111a:	4909      	ldr	r1, [pc, #36]	; (8001140 <siprintf+0x3c>)
 800111c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001120:	9105      	str	r1, [sp, #20]
 8001122:	6800      	ldr	r0, [r0, #0]
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	a902      	add	r1, sp, #8
 8001128:	f000 f868 	bl	80011fc <_svfiprintf_r>
 800112c:	9b02      	ldr	r3, [sp, #8]
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	b01c      	add	sp, #112	; 0x70
 8001134:	f85d eb04 	ldr.w	lr, [sp], #4
 8001138:	b003      	add	sp, #12
 800113a:	4770      	bx	lr
 800113c:	20000004 	.word	0x20000004
 8001140:	ffff0208 	.word	0xffff0208

08001144 <__ssputs_r>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	688e      	ldr	r6, [r1, #8]
 800114a:	429e      	cmp	r6, r3
 800114c:	4682      	mov	sl, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4690      	mov	r8, r2
 8001152:	461f      	mov	r7, r3
 8001154:	d838      	bhi.n	80011c8 <__ssputs_r+0x84>
 8001156:	898a      	ldrh	r2, [r1, #12]
 8001158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800115c:	d032      	beq.n	80011c4 <__ssputs_r+0x80>
 800115e:	6825      	ldr	r5, [r4, #0]
 8001160:	6909      	ldr	r1, [r1, #16]
 8001162:	eba5 0901 	sub.w	r9, r5, r1
 8001166:	6965      	ldr	r5, [r4, #20]
 8001168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800116c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001170:	3301      	adds	r3, #1
 8001172:	444b      	add	r3, r9
 8001174:	106d      	asrs	r5, r5, #1
 8001176:	429d      	cmp	r5, r3
 8001178:	bf38      	it	cc
 800117a:	461d      	movcc	r5, r3
 800117c:	0553      	lsls	r3, r2, #21
 800117e:	d531      	bpl.n	80011e4 <__ssputs_r+0xa0>
 8001180:	4629      	mov	r1, r5
 8001182:	f000 fb63 	bl	800184c <_malloc_r>
 8001186:	4606      	mov	r6, r0
 8001188:	b950      	cbnz	r0, 80011a0 <__ssputs_r+0x5c>
 800118a:	230c      	movs	r3, #12
 800118c:	f8ca 3000 	str.w	r3, [sl]
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	81a3      	strh	r3, [r4, #12]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	6921      	ldr	r1, [r4, #16]
 80011a2:	464a      	mov	r2, r9
 80011a4:	f000 fabe 	bl	8001724 <memcpy>
 80011a8:	89a3      	ldrh	r3, [r4, #12]
 80011aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80011ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b2:	81a3      	strh	r3, [r4, #12]
 80011b4:	6126      	str	r6, [r4, #16]
 80011b6:	6165      	str	r5, [r4, #20]
 80011b8:	444e      	add	r6, r9
 80011ba:	eba5 0509 	sub.w	r5, r5, r9
 80011be:	6026      	str	r6, [r4, #0]
 80011c0:	60a5      	str	r5, [r4, #8]
 80011c2:	463e      	mov	r6, r7
 80011c4:	42be      	cmp	r6, r7
 80011c6:	d900      	bls.n	80011ca <__ssputs_r+0x86>
 80011c8:	463e      	mov	r6, r7
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	4632      	mov	r2, r6
 80011ce:	4641      	mov	r1, r8
 80011d0:	f000 fab6 	bl	8001740 <memmove>
 80011d4:	68a3      	ldr	r3, [r4, #8]
 80011d6:	1b9b      	subs	r3, r3, r6
 80011d8:	60a3      	str	r3, [r4, #8]
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	4433      	add	r3, r6
 80011de:	6023      	str	r3, [r4, #0]
 80011e0:	2000      	movs	r0, #0
 80011e2:	e7db      	b.n	800119c <__ssputs_r+0x58>
 80011e4:	462a      	mov	r2, r5
 80011e6:	f000 fba5 	bl	8001934 <_realloc_r>
 80011ea:	4606      	mov	r6, r0
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1e1      	bne.n	80011b4 <__ssputs_r+0x70>
 80011f0:	6921      	ldr	r1, [r4, #16]
 80011f2:	4650      	mov	r0, sl
 80011f4:	f000 fabe 	bl	8001774 <_free_r>
 80011f8:	e7c7      	b.n	800118a <__ssputs_r+0x46>
	...

080011fc <_svfiprintf_r>:
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	4698      	mov	r8, r3
 8001202:	898b      	ldrh	r3, [r1, #12]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	b09d      	sub	sp, #116	; 0x74
 8001208:	4607      	mov	r7, r0
 800120a:	460d      	mov	r5, r1
 800120c:	4614      	mov	r4, r2
 800120e:	d50e      	bpl.n	800122e <_svfiprintf_r+0x32>
 8001210:	690b      	ldr	r3, [r1, #16]
 8001212:	b963      	cbnz	r3, 800122e <_svfiprintf_r+0x32>
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	f000 fb19 	bl	800184c <_malloc_r>
 800121a:	6028      	str	r0, [r5, #0]
 800121c:	6128      	str	r0, [r5, #16]
 800121e:	b920      	cbnz	r0, 800122a <_svfiprintf_r+0x2e>
 8001220:	230c      	movs	r3, #12
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001228:	e0d1      	b.n	80013ce <_svfiprintf_r+0x1d2>
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	616b      	str	r3, [r5, #20]
 800122e:	2300      	movs	r3, #0
 8001230:	9309      	str	r3, [sp, #36]	; 0x24
 8001232:	2320      	movs	r3, #32
 8001234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001238:	f8cd 800c 	str.w	r8, [sp, #12]
 800123c:	2330      	movs	r3, #48	; 0x30
 800123e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80013e8 <_svfiprintf_r+0x1ec>
 8001242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001246:	f04f 0901 	mov.w	r9, #1
 800124a:	4623      	mov	r3, r4
 800124c:	469a      	mov	sl, r3
 800124e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001252:	b10a      	cbz	r2, 8001258 <_svfiprintf_r+0x5c>
 8001254:	2a25      	cmp	r2, #37	; 0x25
 8001256:	d1f9      	bne.n	800124c <_svfiprintf_r+0x50>
 8001258:	ebba 0b04 	subs.w	fp, sl, r4
 800125c:	d00b      	beq.n	8001276 <_svfiprintf_r+0x7a>
 800125e:	465b      	mov	r3, fp
 8001260:	4622      	mov	r2, r4
 8001262:	4629      	mov	r1, r5
 8001264:	4638      	mov	r0, r7
 8001266:	f7ff ff6d 	bl	8001144 <__ssputs_r>
 800126a:	3001      	adds	r0, #1
 800126c:	f000 80aa 	beq.w	80013c4 <_svfiprintf_r+0x1c8>
 8001270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001272:	445a      	add	r2, fp
 8001274:	9209      	str	r2, [sp, #36]	; 0x24
 8001276:	f89a 3000 	ldrb.w	r3, [sl]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80a2 	beq.w	80013c4 <_svfiprintf_r+0x1c8>
 8001280:	2300      	movs	r3, #0
 8001282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800128a:	f10a 0a01 	add.w	sl, sl, #1
 800128e:	9304      	str	r3, [sp, #16]
 8001290:	9307      	str	r3, [sp, #28]
 8001292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001296:	931a      	str	r3, [sp, #104]	; 0x68
 8001298:	4654      	mov	r4, sl
 800129a:	2205      	movs	r2, #5
 800129c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012a0:	4851      	ldr	r0, [pc, #324]	; (80013e8 <_svfiprintf_r+0x1ec>)
 80012a2:	f7fe ffa5 	bl	80001f0 <memchr>
 80012a6:	9a04      	ldr	r2, [sp, #16]
 80012a8:	b9d8      	cbnz	r0, 80012e2 <_svfiprintf_r+0xe6>
 80012aa:	06d0      	lsls	r0, r2, #27
 80012ac:	bf44      	itt	mi
 80012ae:	2320      	movmi	r3, #32
 80012b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012b4:	0711      	lsls	r1, r2, #28
 80012b6:	bf44      	itt	mi
 80012b8:	232b      	movmi	r3, #43	; 0x2b
 80012ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012be:	f89a 3000 	ldrb.w	r3, [sl]
 80012c2:	2b2a      	cmp	r3, #42	; 0x2a
 80012c4:	d015      	beq.n	80012f2 <_svfiprintf_r+0xf6>
 80012c6:	9a07      	ldr	r2, [sp, #28]
 80012c8:	4654      	mov	r4, sl
 80012ca:	2000      	movs	r0, #0
 80012cc:	f04f 0c0a 	mov.w	ip, #10
 80012d0:	4621      	mov	r1, r4
 80012d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012d6:	3b30      	subs	r3, #48	; 0x30
 80012d8:	2b09      	cmp	r3, #9
 80012da:	d94e      	bls.n	800137a <_svfiprintf_r+0x17e>
 80012dc:	b1b0      	cbz	r0, 800130c <_svfiprintf_r+0x110>
 80012de:	9207      	str	r2, [sp, #28]
 80012e0:	e014      	b.n	800130c <_svfiprintf_r+0x110>
 80012e2:	eba0 0308 	sub.w	r3, r0, r8
 80012e6:	fa09 f303 	lsl.w	r3, r9, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	9304      	str	r3, [sp, #16]
 80012ee:	46a2      	mov	sl, r4
 80012f0:	e7d2      	b.n	8001298 <_svfiprintf_r+0x9c>
 80012f2:	9b03      	ldr	r3, [sp, #12]
 80012f4:	1d19      	adds	r1, r3, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	9103      	str	r1, [sp, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bfbb      	ittet	lt
 80012fe:	425b      	neglt	r3, r3
 8001300:	f042 0202 	orrlt.w	r2, r2, #2
 8001304:	9307      	strge	r3, [sp, #28]
 8001306:	9307      	strlt	r3, [sp, #28]
 8001308:	bfb8      	it	lt
 800130a:	9204      	strlt	r2, [sp, #16]
 800130c:	7823      	ldrb	r3, [r4, #0]
 800130e:	2b2e      	cmp	r3, #46	; 0x2e
 8001310:	d10c      	bne.n	800132c <_svfiprintf_r+0x130>
 8001312:	7863      	ldrb	r3, [r4, #1]
 8001314:	2b2a      	cmp	r3, #42	; 0x2a
 8001316:	d135      	bne.n	8001384 <_svfiprintf_r+0x188>
 8001318:	9b03      	ldr	r3, [sp, #12]
 800131a:	1d1a      	adds	r2, r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	9203      	str	r2, [sp, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfb8      	it	lt
 8001324:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001328:	3402      	adds	r4, #2
 800132a:	9305      	str	r3, [sp, #20]
 800132c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80013f8 <_svfiprintf_r+0x1fc>
 8001330:	7821      	ldrb	r1, [r4, #0]
 8001332:	2203      	movs	r2, #3
 8001334:	4650      	mov	r0, sl
 8001336:	f7fe ff5b 	bl	80001f0 <memchr>
 800133a:	b140      	cbz	r0, 800134e <_svfiprintf_r+0x152>
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	eba0 000a 	sub.w	r0, r0, sl
 8001342:	fa03 f000 	lsl.w	r0, r3, r0
 8001346:	9b04      	ldr	r3, [sp, #16]
 8001348:	4303      	orrs	r3, r0
 800134a:	3401      	adds	r4, #1
 800134c:	9304      	str	r3, [sp, #16]
 800134e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001352:	4826      	ldr	r0, [pc, #152]	; (80013ec <_svfiprintf_r+0x1f0>)
 8001354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001358:	2206      	movs	r2, #6
 800135a:	f7fe ff49 	bl	80001f0 <memchr>
 800135e:	2800      	cmp	r0, #0
 8001360:	d038      	beq.n	80013d4 <_svfiprintf_r+0x1d8>
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <_svfiprintf_r+0x1f4>)
 8001364:	bb1b      	cbnz	r3, 80013ae <_svfiprintf_r+0x1b2>
 8001366:	9b03      	ldr	r3, [sp, #12]
 8001368:	3307      	adds	r3, #7
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	3308      	adds	r3, #8
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001374:	4433      	add	r3, r6
 8001376:	9309      	str	r3, [sp, #36]	; 0x24
 8001378:	e767      	b.n	800124a <_svfiprintf_r+0x4e>
 800137a:	fb0c 3202 	mla	r2, ip, r2, r3
 800137e:	460c      	mov	r4, r1
 8001380:	2001      	movs	r0, #1
 8001382:	e7a5      	b.n	80012d0 <_svfiprintf_r+0xd4>
 8001384:	2300      	movs	r3, #0
 8001386:	3401      	adds	r4, #1
 8001388:	9305      	str	r3, [sp, #20]
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0c0a 	mov.w	ip, #10
 8001390:	4620      	mov	r0, r4
 8001392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001396:	3a30      	subs	r2, #48	; 0x30
 8001398:	2a09      	cmp	r2, #9
 800139a:	d903      	bls.n	80013a4 <_svfiprintf_r+0x1a8>
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0c5      	beq.n	800132c <_svfiprintf_r+0x130>
 80013a0:	9105      	str	r1, [sp, #20]
 80013a2:	e7c3      	b.n	800132c <_svfiprintf_r+0x130>
 80013a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80013a8:	4604      	mov	r4, r0
 80013aa:	2301      	movs	r3, #1
 80013ac:	e7f0      	b.n	8001390 <_svfiprintf_r+0x194>
 80013ae:	ab03      	add	r3, sp, #12
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	462a      	mov	r2, r5
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <_svfiprintf_r+0x1f8>)
 80013b6:	a904      	add	r1, sp, #16
 80013b8:	4638      	mov	r0, r7
 80013ba:	f3af 8000 	nop.w
 80013be:	1c42      	adds	r2, r0, #1
 80013c0:	4606      	mov	r6, r0
 80013c2:	d1d6      	bne.n	8001372 <_svfiprintf_r+0x176>
 80013c4:	89ab      	ldrh	r3, [r5, #12]
 80013c6:	065b      	lsls	r3, r3, #25
 80013c8:	f53f af2c 	bmi.w	8001224 <_svfiprintf_r+0x28>
 80013cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013ce:	b01d      	add	sp, #116	; 0x74
 80013d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d4:	ab03      	add	r3, sp, #12
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	462a      	mov	r2, r5
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <_svfiprintf_r+0x1f8>)
 80013dc:	a904      	add	r1, sp, #16
 80013de:	4638      	mov	r0, r7
 80013e0:	f000 f87a 	bl	80014d8 <_printf_i>
 80013e4:	e7eb      	b.n	80013be <_svfiprintf_r+0x1c2>
 80013e6:	bf00      	nop
 80013e8:	08001bdc 	.word	0x08001bdc
 80013ec:	08001be6 	.word	0x08001be6
 80013f0:	00000000 	.word	0x00000000
 80013f4:	08001145 	.word	0x08001145
 80013f8:	08001be2 	.word	0x08001be2

080013fc <_printf_common>:
 80013fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001400:	4616      	mov	r6, r2
 8001402:	4699      	mov	r9, r3
 8001404:	688a      	ldr	r2, [r1, #8]
 8001406:	690b      	ldr	r3, [r1, #16]
 8001408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800140c:	4293      	cmp	r3, r2
 800140e:	bfb8      	it	lt
 8001410:	4613      	movlt	r3, r2
 8001412:	6033      	str	r3, [r6, #0]
 8001414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001418:	4607      	mov	r7, r0
 800141a:	460c      	mov	r4, r1
 800141c:	b10a      	cbz	r2, 8001422 <_printf_common+0x26>
 800141e:	3301      	adds	r3, #1
 8001420:	6033      	str	r3, [r6, #0]
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	0699      	lsls	r1, r3, #26
 8001426:	bf42      	ittt	mi
 8001428:	6833      	ldrmi	r3, [r6, #0]
 800142a:	3302      	addmi	r3, #2
 800142c:	6033      	strmi	r3, [r6, #0]
 800142e:	6825      	ldr	r5, [r4, #0]
 8001430:	f015 0506 	ands.w	r5, r5, #6
 8001434:	d106      	bne.n	8001444 <_printf_common+0x48>
 8001436:	f104 0a19 	add.w	sl, r4, #25
 800143a:	68e3      	ldr	r3, [r4, #12]
 800143c:	6832      	ldr	r2, [r6, #0]
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	42ab      	cmp	r3, r5
 8001442:	dc26      	bgt.n	8001492 <_printf_common+0x96>
 8001444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001448:	1e13      	subs	r3, r2, #0
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	bf18      	it	ne
 800144e:	2301      	movne	r3, #1
 8001450:	0692      	lsls	r2, r2, #26
 8001452:	d42b      	bmi.n	80014ac <_printf_common+0xb0>
 8001454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001458:	4649      	mov	r1, r9
 800145a:	4638      	mov	r0, r7
 800145c:	47c0      	blx	r8
 800145e:	3001      	adds	r0, #1
 8001460:	d01e      	beq.n	80014a0 <_printf_common+0xa4>
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	68e5      	ldr	r5, [r4, #12]
 8001466:	6832      	ldr	r2, [r6, #0]
 8001468:	f003 0306 	and.w	r3, r3, #6
 800146c:	2b04      	cmp	r3, #4
 800146e:	bf08      	it	eq
 8001470:	1aad      	subeq	r5, r5, r2
 8001472:	68a3      	ldr	r3, [r4, #8]
 8001474:	6922      	ldr	r2, [r4, #16]
 8001476:	bf0c      	ite	eq
 8001478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800147c:	2500      	movne	r5, #0
 800147e:	4293      	cmp	r3, r2
 8001480:	bfc4      	itt	gt
 8001482:	1a9b      	subgt	r3, r3, r2
 8001484:	18ed      	addgt	r5, r5, r3
 8001486:	2600      	movs	r6, #0
 8001488:	341a      	adds	r4, #26
 800148a:	42b5      	cmp	r5, r6
 800148c:	d11a      	bne.n	80014c4 <_printf_common+0xc8>
 800148e:	2000      	movs	r0, #0
 8001490:	e008      	b.n	80014a4 <_printf_common+0xa8>
 8001492:	2301      	movs	r3, #1
 8001494:	4652      	mov	r2, sl
 8001496:	4649      	mov	r1, r9
 8001498:	4638      	mov	r0, r7
 800149a:	47c0      	blx	r8
 800149c:	3001      	adds	r0, #1
 800149e:	d103      	bne.n	80014a8 <_printf_common+0xac>
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014a8:	3501      	adds	r5, #1
 80014aa:	e7c6      	b.n	800143a <_printf_common+0x3e>
 80014ac:	18e1      	adds	r1, r4, r3
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	2030      	movs	r0, #48	; 0x30
 80014b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80014b6:	4422      	add	r2, r4
 80014b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80014bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80014c0:	3302      	adds	r3, #2
 80014c2:	e7c7      	b.n	8001454 <_printf_common+0x58>
 80014c4:	2301      	movs	r3, #1
 80014c6:	4622      	mov	r2, r4
 80014c8:	4649      	mov	r1, r9
 80014ca:	4638      	mov	r0, r7
 80014cc:	47c0      	blx	r8
 80014ce:	3001      	adds	r0, #1
 80014d0:	d0e6      	beq.n	80014a0 <_printf_common+0xa4>
 80014d2:	3601      	adds	r6, #1
 80014d4:	e7d9      	b.n	800148a <_printf_common+0x8e>
	...

080014d8 <_printf_i>:
 80014d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014dc:	7e0f      	ldrb	r7, [r1, #24]
 80014de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80014e0:	2f78      	cmp	r7, #120	; 0x78
 80014e2:	4691      	mov	r9, r2
 80014e4:	4680      	mov	r8, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	469a      	mov	sl, r3
 80014ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80014ee:	d807      	bhi.n	8001500 <_printf_i+0x28>
 80014f0:	2f62      	cmp	r7, #98	; 0x62
 80014f2:	d80a      	bhi.n	800150a <_printf_i+0x32>
 80014f4:	2f00      	cmp	r7, #0
 80014f6:	f000 80d8 	beq.w	80016aa <_printf_i+0x1d2>
 80014fa:	2f58      	cmp	r7, #88	; 0x58
 80014fc:	f000 80a3 	beq.w	8001646 <_printf_i+0x16e>
 8001500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001508:	e03a      	b.n	8001580 <_printf_i+0xa8>
 800150a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800150e:	2b15      	cmp	r3, #21
 8001510:	d8f6      	bhi.n	8001500 <_printf_i+0x28>
 8001512:	a101      	add	r1, pc, #4	; (adr r1, 8001518 <_printf_i+0x40>)
 8001514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001518:	08001571 	.word	0x08001571
 800151c:	08001585 	.word	0x08001585
 8001520:	08001501 	.word	0x08001501
 8001524:	08001501 	.word	0x08001501
 8001528:	08001501 	.word	0x08001501
 800152c:	08001501 	.word	0x08001501
 8001530:	08001585 	.word	0x08001585
 8001534:	08001501 	.word	0x08001501
 8001538:	08001501 	.word	0x08001501
 800153c:	08001501 	.word	0x08001501
 8001540:	08001501 	.word	0x08001501
 8001544:	08001691 	.word	0x08001691
 8001548:	080015b5 	.word	0x080015b5
 800154c:	08001673 	.word	0x08001673
 8001550:	08001501 	.word	0x08001501
 8001554:	08001501 	.word	0x08001501
 8001558:	080016b3 	.word	0x080016b3
 800155c:	08001501 	.word	0x08001501
 8001560:	080015b5 	.word	0x080015b5
 8001564:	08001501 	.word	0x08001501
 8001568:	08001501 	.word	0x08001501
 800156c:	0800167b 	.word	0x0800167b
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	1d1a      	adds	r2, r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	602a      	str	r2, [r5, #0]
 8001578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800157c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001580:	2301      	movs	r3, #1
 8001582:	e0a3      	b.n	80016cc <_printf_i+0x1f4>
 8001584:	6820      	ldr	r0, [r4, #0]
 8001586:	6829      	ldr	r1, [r5, #0]
 8001588:	0606      	lsls	r6, r0, #24
 800158a:	f101 0304 	add.w	r3, r1, #4
 800158e:	d50a      	bpl.n	80015a6 <_printf_i+0xce>
 8001590:	680e      	ldr	r6, [r1, #0]
 8001592:	602b      	str	r3, [r5, #0]
 8001594:	2e00      	cmp	r6, #0
 8001596:	da03      	bge.n	80015a0 <_printf_i+0xc8>
 8001598:	232d      	movs	r3, #45	; 0x2d
 800159a:	4276      	negs	r6, r6
 800159c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015a0:	485e      	ldr	r0, [pc, #376]	; (800171c <_printf_i+0x244>)
 80015a2:	230a      	movs	r3, #10
 80015a4:	e019      	b.n	80015da <_printf_i+0x102>
 80015a6:	680e      	ldr	r6, [r1, #0]
 80015a8:	602b      	str	r3, [r5, #0]
 80015aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80015ae:	bf18      	it	ne
 80015b0:	b236      	sxthne	r6, r6
 80015b2:	e7ef      	b.n	8001594 <_printf_i+0xbc>
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	1d19      	adds	r1, r3, #4
 80015ba:	6029      	str	r1, [r5, #0]
 80015bc:	0601      	lsls	r1, r0, #24
 80015be:	d501      	bpl.n	80015c4 <_printf_i+0xec>
 80015c0:	681e      	ldr	r6, [r3, #0]
 80015c2:	e002      	b.n	80015ca <_printf_i+0xf2>
 80015c4:	0646      	lsls	r6, r0, #25
 80015c6:	d5fb      	bpl.n	80015c0 <_printf_i+0xe8>
 80015c8:	881e      	ldrh	r6, [r3, #0]
 80015ca:	4854      	ldr	r0, [pc, #336]	; (800171c <_printf_i+0x244>)
 80015cc:	2f6f      	cmp	r7, #111	; 0x6f
 80015ce:	bf0c      	ite	eq
 80015d0:	2308      	moveq	r3, #8
 80015d2:	230a      	movne	r3, #10
 80015d4:	2100      	movs	r1, #0
 80015d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80015da:	6865      	ldr	r5, [r4, #4]
 80015dc:	60a5      	str	r5, [r4, #8]
 80015de:	2d00      	cmp	r5, #0
 80015e0:	bfa2      	ittt	ge
 80015e2:	6821      	ldrge	r1, [r4, #0]
 80015e4:	f021 0104 	bicge.w	r1, r1, #4
 80015e8:	6021      	strge	r1, [r4, #0]
 80015ea:	b90e      	cbnz	r6, 80015f0 <_printf_i+0x118>
 80015ec:	2d00      	cmp	r5, #0
 80015ee:	d04d      	beq.n	800168c <_printf_i+0x1b4>
 80015f0:	4615      	mov	r5, r2
 80015f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80015f6:	fb03 6711 	mls	r7, r3, r1, r6
 80015fa:	5dc7      	ldrb	r7, [r0, r7]
 80015fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001600:	4637      	mov	r7, r6
 8001602:	42bb      	cmp	r3, r7
 8001604:	460e      	mov	r6, r1
 8001606:	d9f4      	bls.n	80015f2 <_printf_i+0x11a>
 8001608:	2b08      	cmp	r3, #8
 800160a:	d10b      	bne.n	8001624 <_printf_i+0x14c>
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	07de      	lsls	r6, r3, #31
 8001610:	d508      	bpl.n	8001624 <_printf_i+0x14c>
 8001612:	6923      	ldr	r3, [r4, #16]
 8001614:	6861      	ldr	r1, [r4, #4]
 8001616:	4299      	cmp	r1, r3
 8001618:	bfde      	ittt	le
 800161a:	2330      	movle	r3, #48	; 0x30
 800161c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001620:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001624:	1b52      	subs	r2, r2, r5
 8001626:	6122      	str	r2, [r4, #16]
 8001628:	f8cd a000 	str.w	sl, [sp]
 800162c:	464b      	mov	r3, r9
 800162e:	aa03      	add	r2, sp, #12
 8001630:	4621      	mov	r1, r4
 8001632:	4640      	mov	r0, r8
 8001634:	f7ff fee2 	bl	80013fc <_printf_common>
 8001638:	3001      	adds	r0, #1
 800163a:	d14c      	bne.n	80016d6 <_printf_i+0x1fe>
 800163c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001640:	b004      	add	sp, #16
 8001642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001646:	4835      	ldr	r0, [pc, #212]	; (800171c <_printf_i+0x244>)
 8001648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800164c:	6829      	ldr	r1, [r5, #0]
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	f851 6b04 	ldr.w	r6, [r1], #4
 8001654:	6029      	str	r1, [r5, #0]
 8001656:	061d      	lsls	r5, r3, #24
 8001658:	d514      	bpl.n	8001684 <_printf_i+0x1ac>
 800165a:	07df      	lsls	r7, r3, #31
 800165c:	bf44      	itt	mi
 800165e:	f043 0320 	orrmi.w	r3, r3, #32
 8001662:	6023      	strmi	r3, [r4, #0]
 8001664:	b91e      	cbnz	r6, 800166e <_printf_i+0x196>
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f023 0320 	bic.w	r3, r3, #32
 800166c:	6023      	str	r3, [r4, #0]
 800166e:	2310      	movs	r3, #16
 8001670:	e7b0      	b.n	80015d4 <_printf_i+0xfc>
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	6023      	str	r3, [r4, #0]
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4828      	ldr	r0, [pc, #160]	; (8001720 <_printf_i+0x248>)
 800167e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001682:	e7e3      	b.n	800164c <_printf_i+0x174>
 8001684:	0659      	lsls	r1, r3, #25
 8001686:	bf48      	it	mi
 8001688:	b2b6      	uxthmi	r6, r6
 800168a:	e7e6      	b.n	800165a <_printf_i+0x182>
 800168c:	4615      	mov	r5, r2
 800168e:	e7bb      	b.n	8001608 <_printf_i+0x130>
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	6826      	ldr	r6, [r4, #0]
 8001694:	6961      	ldr	r1, [r4, #20]
 8001696:	1d18      	adds	r0, r3, #4
 8001698:	6028      	str	r0, [r5, #0]
 800169a:	0635      	lsls	r5, r6, #24
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	d501      	bpl.n	80016a4 <_printf_i+0x1cc>
 80016a0:	6019      	str	r1, [r3, #0]
 80016a2:	e002      	b.n	80016aa <_printf_i+0x1d2>
 80016a4:	0670      	lsls	r0, r6, #25
 80016a6:	d5fb      	bpl.n	80016a0 <_printf_i+0x1c8>
 80016a8:	8019      	strh	r1, [r3, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	6123      	str	r3, [r4, #16]
 80016ae:	4615      	mov	r5, r2
 80016b0:	e7ba      	b.n	8001628 <_printf_i+0x150>
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	1d1a      	adds	r2, r3, #4
 80016b6:	602a      	str	r2, [r5, #0]
 80016b8:	681d      	ldr	r5, [r3, #0]
 80016ba:	6862      	ldr	r2, [r4, #4]
 80016bc:	2100      	movs	r1, #0
 80016be:	4628      	mov	r0, r5
 80016c0:	f7fe fd96 	bl	80001f0 <memchr>
 80016c4:	b108      	cbz	r0, 80016ca <_printf_i+0x1f2>
 80016c6:	1b40      	subs	r0, r0, r5
 80016c8:	6060      	str	r0, [r4, #4]
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	6123      	str	r3, [r4, #16]
 80016ce:	2300      	movs	r3, #0
 80016d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016d4:	e7a8      	b.n	8001628 <_printf_i+0x150>
 80016d6:	6923      	ldr	r3, [r4, #16]
 80016d8:	462a      	mov	r2, r5
 80016da:	4649      	mov	r1, r9
 80016dc:	4640      	mov	r0, r8
 80016de:	47d0      	blx	sl
 80016e0:	3001      	adds	r0, #1
 80016e2:	d0ab      	beq.n	800163c <_printf_i+0x164>
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	079b      	lsls	r3, r3, #30
 80016e8:	d413      	bmi.n	8001712 <_printf_i+0x23a>
 80016ea:	68e0      	ldr	r0, [r4, #12]
 80016ec:	9b03      	ldr	r3, [sp, #12]
 80016ee:	4298      	cmp	r0, r3
 80016f0:	bfb8      	it	lt
 80016f2:	4618      	movlt	r0, r3
 80016f4:	e7a4      	b.n	8001640 <_printf_i+0x168>
 80016f6:	2301      	movs	r3, #1
 80016f8:	4632      	mov	r2, r6
 80016fa:	4649      	mov	r1, r9
 80016fc:	4640      	mov	r0, r8
 80016fe:	47d0      	blx	sl
 8001700:	3001      	adds	r0, #1
 8001702:	d09b      	beq.n	800163c <_printf_i+0x164>
 8001704:	3501      	adds	r5, #1
 8001706:	68e3      	ldr	r3, [r4, #12]
 8001708:	9903      	ldr	r1, [sp, #12]
 800170a:	1a5b      	subs	r3, r3, r1
 800170c:	42ab      	cmp	r3, r5
 800170e:	dcf2      	bgt.n	80016f6 <_printf_i+0x21e>
 8001710:	e7eb      	b.n	80016ea <_printf_i+0x212>
 8001712:	2500      	movs	r5, #0
 8001714:	f104 0619 	add.w	r6, r4, #25
 8001718:	e7f5      	b.n	8001706 <_printf_i+0x22e>
 800171a:	bf00      	nop
 800171c:	08001bed 	.word	0x08001bed
 8001720:	08001bfe 	.word	0x08001bfe

08001724 <memcpy>:
 8001724:	440a      	add	r2, r1
 8001726:	4291      	cmp	r1, r2
 8001728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800172c:	d100      	bne.n	8001730 <memcpy+0xc>
 800172e:	4770      	bx	lr
 8001730:	b510      	push	{r4, lr}
 8001732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800173a:	4291      	cmp	r1, r2
 800173c:	d1f9      	bne.n	8001732 <memcpy+0xe>
 800173e:	bd10      	pop	{r4, pc}

08001740 <memmove>:
 8001740:	4288      	cmp	r0, r1
 8001742:	b510      	push	{r4, lr}
 8001744:	eb01 0402 	add.w	r4, r1, r2
 8001748:	d902      	bls.n	8001750 <memmove+0x10>
 800174a:	4284      	cmp	r4, r0
 800174c:	4623      	mov	r3, r4
 800174e:	d807      	bhi.n	8001760 <memmove+0x20>
 8001750:	1e43      	subs	r3, r0, #1
 8001752:	42a1      	cmp	r1, r4
 8001754:	d008      	beq.n	8001768 <memmove+0x28>
 8001756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800175a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800175e:	e7f8      	b.n	8001752 <memmove+0x12>
 8001760:	4402      	add	r2, r0
 8001762:	4601      	mov	r1, r0
 8001764:	428a      	cmp	r2, r1
 8001766:	d100      	bne.n	800176a <memmove+0x2a>
 8001768:	bd10      	pop	{r4, pc}
 800176a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800176e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001772:	e7f7      	b.n	8001764 <memmove+0x24>

08001774 <_free_r>:
 8001774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001776:	2900      	cmp	r1, #0
 8001778:	d044      	beq.n	8001804 <_free_r+0x90>
 800177a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800177e:	9001      	str	r0, [sp, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f1a1 0404 	sub.w	r4, r1, #4
 8001786:	bfb8      	it	lt
 8001788:	18e4      	addlt	r4, r4, r3
 800178a:	f000 f913 	bl	80019b4 <__malloc_lock>
 800178e:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <_free_r+0x94>)
 8001790:	9801      	ldr	r0, [sp, #4]
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	b933      	cbnz	r3, 80017a4 <_free_r+0x30>
 8001796:	6063      	str	r3, [r4, #4]
 8001798:	6014      	str	r4, [r2, #0]
 800179a:	b003      	add	sp, #12
 800179c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017a0:	f000 b90e 	b.w	80019c0 <__malloc_unlock>
 80017a4:	42a3      	cmp	r3, r4
 80017a6:	d908      	bls.n	80017ba <_free_r+0x46>
 80017a8:	6825      	ldr	r5, [r4, #0]
 80017aa:	1961      	adds	r1, r4, r5
 80017ac:	428b      	cmp	r3, r1
 80017ae:	bf01      	itttt	eq
 80017b0:	6819      	ldreq	r1, [r3, #0]
 80017b2:	685b      	ldreq	r3, [r3, #4]
 80017b4:	1949      	addeq	r1, r1, r5
 80017b6:	6021      	streq	r1, [r4, #0]
 80017b8:	e7ed      	b.n	8001796 <_free_r+0x22>
 80017ba:	461a      	mov	r2, r3
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	b10b      	cbz	r3, 80017c4 <_free_r+0x50>
 80017c0:	42a3      	cmp	r3, r4
 80017c2:	d9fa      	bls.n	80017ba <_free_r+0x46>
 80017c4:	6811      	ldr	r1, [r2, #0]
 80017c6:	1855      	adds	r5, r2, r1
 80017c8:	42a5      	cmp	r5, r4
 80017ca:	d10b      	bne.n	80017e4 <_free_r+0x70>
 80017cc:	6824      	ldr	r4, [r4, #0]
 80017ce:	4421      	add	r1, r4
 80017d0:	1854      	adds	r4, r2, r1
 80017d2:	42a3      	cmp	r3, r4
 80017d4:	6011      	str	r1, [r2, #0]
 80017d6:	d1e0      	bne.n	800179a <_free_r+0x26>
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	6053      	str	r3, [r2, #4]
 80017de:	4421      	add	r1, r4
 80017e0:	6011      	str	r1, [r2, #0]
 80017e2:	e7da      	b.n	800179a <_free_r+0x26>
 80017e4:	d902      	bls.n	80017ec <_free_r+0x78>
 80017e6:	230c      	movs	r3, #12
 80017e8:	6003      	str	r3, [r0, #0]
 80017ea:	e7d6      	b.n	800179a <_free_r+0x26>
 80017ec:	6825      	ldr	r5, [r4, #0]
 80017ee:	1961      	adds	r1, r4, r5
 80017f0:	428b      	cmp	r3, r1
 80017f2:	bf04      	itt	eq
 80017f4:	6819      	ldreq	r1, [r3, #0]
 80017f6:	685b      	ldreq	r3, [r3, #4]
 80017f8:	6063      	str	r3, [r4, #4]
 80017fa:	bf04      	itt	eq
 80017fc:	1949      	addeq	r1, r1, r5
 80017fe:	6021      	streq	r1, [r4, #0]
 8001800:	6054      	str	r4, [r2, #4]
 8001802:	e7ca      	b.n	800179a <_free_r+0x26>
 8001804:	b003      	add	sp, #12
 8001806:	bd30      	pop	{r4, r5, pc}
 8001808:	200008bc 	.word	0x200008bc

0800180c <sbrk_aligned>:
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	4e0e      	ldr	r6, [pc, #56]	; (8001848 <sbrk_aligned+0x3c>)
 8001810:	460c      	mov	r4, r1
 8001812:	6831      	ldr	r1, [r6, #0]
 8001814:	4605      	mov	r5, r0
 8001816:	b911      	cbnz	r1, 800181e <sbrk_aligned+0x12>
 8001818:	f000 f8bc 	bl	8001994 <_sbrk_r>
 800181c:	6030      	str	r0, [r6, #0]
 800181e:	4621      	mov	r1, r4
 8001820:	4628      	mov	r0, r5
 8001822:	f000 f8b7 	bl	8001994 <_sbrk_r>
 8001826:	1c43      	adds	r3, r0, #1
 8001828:	d00a      	beq.n	8001840 <sbrk_aligned+0x34>
 800182a:	1cc4      	adds	r4, r0, #3
 800182c:	f024 0403 	bic.w	r4, r4, #3
 8001830:	42a0      	cmp	r0, r4
 8001832:	d007      	beq.n	8001844 <sbrk_aligned+0x38>
 8001834:	1a21      	subs	r1, r4, r0
 8001836:	4628      	mov	r0, r5
 8001838:	f000 f8ac 	bl	8001994 <_sbrk_r>
 800183c:	3001      	adds	r0, #1
 800183e:	d101      	bne.n	8001844 <sbrk_aligned+0x38>
 8001840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001844:	4620      	mov	r0, r4
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	200008c0 	.word	0x200008c0

0800184c <_malloc_r>:
 800184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001850:	1ccd      	adds	r5, r1, #3
 8001852:	f025 0503 	bic.w	r5, r5, #3
 8001856:	3508      	adds	r5, #8
 8001858:	2d0c      	cmp	r5, #12
 800185a:	bf38      	it	cc
 800185c:	250c      	movcc	r5, #12
 800185e:	2d00      	cmp	r5, #0
 8001860:	4607      	mov	r7, r0
 8001862:	db01      	blt.n	8001868 <_malloc_r+0x1c>
 8001864:	42a9      	cmp	r1, r5
 8001866:	d905      	bls.n	8001874 <_malloc_r+0x28>
 8001868:	230c      	movs	r3, #12
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	2600      	movs	r6, #0
 800186e:	4630      	mov	r0, r6
 8001870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001874:	4e2e      	ldr	r6, [pc, #184]	; (8001930 <_malloc_r+0xe4>)
 8001876:	f000 f89d 	bl	80019b4 <__malloc_lock>
 800187a:	6833      	ldr	r3, [r6, #0]
 800187c:	461c      	mov	r4, r3
 800187e:	bb34      	cbnz	r4, 80018ce <_malloc_r+0x82>
 8001880:	4629      	mov	r1, r5
 8001882:	4638      	mov	r0, r7
 8001884:	f7ff ffc2 	bl	800180c <sbrk_aligned>
 8001888:	1c43      	adds	r3, r0, #1
 800188a:	4604      	mov	r4, r0
 800188c:	d14d      	bne.n	800192a <_malloc_r+0xde>
 800188e:	6834      	ldr	r4, [r6, #0]
 8001890:	4626      	mov	r6, r4
 8001892:	2e00      	cmp	r6, #0
 8001894:	d140      	bne.n	8001918 <_malloc_r+0xcc>
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	4631      	mov	r1, r6
 800189a:	4638      	mov	r0, r7
 800189c:	eb04 0803 	add.w	r8, r4, r3
 80018a0:	f000 f878 	bl	8001994 <_sbrk_r>
 80018a4:	4580      	cmp	r8, r0
 80018a6:	d13a      	bne.n	800191e <_malloc_r+0xd2>
 80018a8:	6821      	ldr	r1, [r4, #0]
 80018aa:	3503      	adds	r5, #3
 80018ac:	1a6d      	subs	r5, r5, r1
 80018ae:	f025 0503 	bic.w	r5, r5, #3
 80018b2:	3508      	adds	r5, #8
 80018b4:	2d0c      	cmp	r5, #12
 80018b6:	bf38      	it	cc
 80018b8:	250c      	movcc	r5, #12
 80018ba:	4629      	mov	r1, r5
 80018bc:	4638      	mov	r0, r7
 80018be:	f7ff ffa5 	bl	800180c <sbrk_aligned>
 80018c2:	3001      	adds	r0, #1
 80018c4:	d02b      	beq.n	800191e <_malloc_r+0xd2>
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	442b      	add	r3, r5
 80018ca:	6023      	str	r3, [r4, #0]
 80018cc:	e00e      	b.n	80018ec <_malloc_r+0xa0>
 80018ce:	6822      	ldr	r2, [r4, #0]
 80018d0:	1b52      	subs	r2, r2, r5
 80018d2:	d41e      	bmi.n	8001912 <_malloc_r+0xc6>
 80018d4:	2a0b      	cmp	r2, #11
 80018d6:	d916      	bls.n	8001906 <_malloc_r+0xba>
 80018d8:	1961      	adds	r1, r4, r5
 80018da:	42a3      	cmp	r3, r4
 80018dc:	6025      	str	r5, [r4, #0]
 80018de:	bf18      	it	ne
 80018e0:	6059      	strne	r1, [r3, #4]
 80018e2:	6863      	ldr	r3, [r4, #4]
 80018e4:	bf08      	it	eq
 80018e6:	6031      	streq	r1, [r6, #0]
 80018e8:	5162      	str	r2, [r4, r5]
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	4638      	mov	r0, r7
 80018ee:	f104 060b 	add.w	r6, r4, #11
 80018f2:	f000 f865 	bl	80019c0 <__malloc_unlock>
 80018f6:	f026 0607 	bic.w	r6, r6, #7
 80018fa:	1d23      	adds	r3, r4, #4
 80018fc:	1af2      	subs	r2, r6, r3
 80018fe:	d0b6      	beq.n	800186e <_malloc_r+0x22>
 8001900:	1b9b      	subs	r3, r3, r6
 8001902:	50a3      	str	r3, [r4, r2]
 8001904:	e7b3      	b.n	800186e <_malloc_r+0x22>
 8001906:	6862      	ldr	r2, [r4, #4]
 8001908:	42a3      	cmp	r3, r4
 800190a:	bf0c      	ite	eq
 800190c:	6032      	streq	r2, [r6, #0]
 800190e:	605a      	strne	r2, [r3, #4]
 8001910:	e7ec      	b.n	80018ec <_malloc_r+0xa0>
 8001912:	4623      	mov	r3, r4
 8001914:	6864      	ldr	r4, [r4, #4]
 8001916:	e7b2      	b.n	800187e <_malloc_r+0x32>
 8001918:	4634      	mov	r4, r6
 800191a:	6876      	ldr	r6, [r6, #4]
 800191c:	e7b9      	b.n	8001892 <_malloc_r+0x46>
 800191e:	230c      	movs	r3, #12
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4638      	mov	r0, r7
 8001924:	f000 f84c 	bl	80019c0 <__malloc_unlock>
 8001928:	e7a1      	b.n	800186e <_malloc_r+0x22>
 800192a:	6025      	str	r5, [r4, #0]
 800192c:	e7de      	b.n	80018ec <_malloc_r+0xa0>
 800192e:	bf00      	nop
 8001930:	200008bc 	.word	0x200008bc

08001934 <_realloc_r>:
 8001934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001938:	4680      	mov	r8, r0
 800193a:	4614      	mov	r4, r2
 800193c:	460e      	mov	r6, r1
 800193e:	b921      	cbnz	r1, 800194a <_realloc_r+0x16>
 8001940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001944:	4611      	mov	r1, r2
 8001946:	f7ff bf81 	b.w	800184c <_malloc_r>
 800194a:	b92a      	cbnz	r2, 8001958 <_realloc_r+0x24>
 800194c:	f7ff ff12 	bl	8001774 <_free_r>
 8001950:	4625      	mov	r5, r4
 8001952:	4628      	mov	r0, r5
 8001954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001958:	f000 f838 	bl	80019cc <_malloc_usable_size_r>
 800195c:	4284      	cmp	r4, r0
 800195e:	4607      	mov	r7, r0
 8001960:	d802      	bhi.n	8001968 <_realloc_r+0x34>
 8001962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001966:	d812      	bhi.n	800198e <_realloc_r+0x5a>
 8001968:	4621      	mov	r1, r4
 800196a:	4640      	mov	r0, r8
 800196c:	f7ff ff6e 	bl	800184c <_malloc_r>
 8001970:	4605      	mov	r5, r0
 8001972:	2800      	cmp	r0, #0
 8001974:	d0ed      	beq.n	8001952 <_realloc_r+0x1e>
 8001976:	42bc      	cmp	r4, r7
 8001978:	4622      	mov	r2, r4
 800197a:	4631      	mov	r1, r6
 800197c:	bf28      	it	cs
 800197e:	463a      	movcs	r2, r7
 8001980:	f7ff fed0 	bl	8001724 <memcpy>
 8001984:	4631      	mov	r1, r6
 8001986:	4640      	mov	r0, r8
 8001988:	f7ff fef4 	bl	8001774 <_free_r>
 800198c:	e7e1      	b.n	8001952 <_realloc_r+0x1e>
 800198e:	4635      	mov	r5, r6
 8001990:	e7df      	b.n	8001952 <_realloc_r+0x1e>
	...

08001994 <_sbrk_r>:
 8001994:	b538      	push	{r3, r4, r5, lr}
 8001996:	4d06      	ldr	r5, [pc, #24]	; (80019b0 <_sbrk_r+0x1c>)
 8001998:	2300      	movs	r3, #0
 800199a:	4604      	mov	r4, r0
 800199c:	4608      	mov	r0, r1
 800199e:	602b      	str	r3, [r5, #0]
 80019a0:	f7ff fb1e 	bl	8000fe0 <_sbrk>
 80019a4:	1c43      	adds	r3, r0, #1
 80019a6:	d102      	bne.n	80019ae <_sbrk_r+0x1a>
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	b103      	cbz	r3, 80019ae <_sbrk_r+0x1a>
 80019ac:	6023      	str	r3, [r4, #0]
 80019ae:	bd38      	pop	{r3, r4, r5, pc}
 80019b0:	200008c4 	.word	0x200008c4

080019b4 <__malloc_lock>:
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <__malloc_lock+0x8>)
 80019b6:	f000 b811 	b.w	80019dc <__retarget_lock_acquire_recursive>
 80019ba:	bf00      	nop
 80019bc:	200008c8 	.word	0x200008c8

080019c0 <__malloc_unlock>:
 80019c0:	4801      	ldr	r0, [pc, #4]	; (80019c8 <__malloc_unlock+0x8>)
 80019c2:	f000 b80c 	b.w	80019de <__retarget_lock_release_recursive>
 80019c6:	bf00      	nop
 80019c8:	200008c8 	.word	0x200008c8

080019cc <_malloc_usable_size_r>:
 80019cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d0:	1f18      	subs	r0, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bfbc      	itt	lt
 80019d6:	580b      	ldrlt	r3, [r1, r0]
 80019d8:	18c0      	addlt	r0, r0, r3
 80019da:	4770      	bx	lr

080019dc <__retarget_lock_acquire_recursive>:
 80019dc:	4770      	bx	lr

080019de <__retarget_lock_release_recursive>:
 80019de:	4770      	bx	lr

080019e0 <_init>:
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e2:	bf00      	nop
 80019e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019e6:	bc08      	pop	{r3}
 80019e8:	469e      	mov	lr, r3
 80019ea:	4770      	bx	lr

080019ec <_fini>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr
