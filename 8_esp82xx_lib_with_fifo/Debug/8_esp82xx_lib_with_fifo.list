
8_esp82xx_lib_with_fifo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080023e8  080023e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e8  080023e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080023f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000074  08002464  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cec  08002464  00020cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ad6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000812  00000000  00000000  00021b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00022390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000230  00000000  00000000  00022628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd86  00000000  00000000  00022858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d08  00000000  00000000  000325de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055887  00000000  00000000  000352e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ab6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012bc  00000000  00000000  0008abc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002178 	.word	0x08002178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08002178 	.word	0x08002178

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);



int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f951 	bl	8000530 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f92d 	bl	80005b4 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <esp_rs_pin_init>:
 * ESP82XX RX Pin  :	PA9(TX)
 * */


void esp_rs_pin_init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <esp_rs_pin_init+0x34>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <esp_rs_pin_init+0x34>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA8 as output pin*/
	GPIOA->MODER |=(1U<<16);
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <esp_rs_pin_init+0x38>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <esp_rs_pin_init+0x38>)
 800039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<17);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <esp_rs_pin_init+0x38>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <esp_rs_pin_init+0x38>)
 80003aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003ae:	6013      	str	r3, [r2, #0]

}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020000 	.word	0x40020000

080003c4 <esp_rs_pin_enable>:

void esp_rs_pin_enable(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	/*Set PA8 to high*/
	GPIOA->ODR |=(1U<<8);
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <esp_rs_pin_enable+0x1c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <esp_rs_pin_enable+0x1c>)
 80003ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d2:	6153      	str	r3, [r2, #20]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40020000 	.word	0x40020000

080003e4 <esp_rs_pin_disable>:

void esp_rs_pin_disable(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	/*Set PA8 to high*/
	GPIOA->ODR |=(1U<<8);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <esp_rs_pin_disable+0x1c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <esp_rs_pin_disable+0x1c>)
 80003ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f2:	6153      	str	r3, [r2, #20]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020000 	.word	0x40020000

08000404 <esp_uart_init>:


void esp_uart_init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000408:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <esp_uart_init+0xec>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a38      	ldr	r2, [pc, #224]	; (80004f0 <esp_uart_init+0xec>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 and PA10 modes to alternate function*/

	/*PA9*/
	GPIOA->MODER &=~(1U<<18);
 8000414:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <esp_uart_init+0xf0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a36      	ldr	r2, [pc, #216]	; (80004f4 <esp_uart_init+0xf0>)
 800041a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <esp_uart_init+0xf0>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <esp_uart_init+0xf0>)
 8000426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800042a:	6013      	str	r3, [r2, #0]

    /*PA10*/
	GPIOA->MODER &=~(1U<<20);
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <esp_uart_init+0xf0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a30      	ldr	r2, [pc, #192]	; (80004f4 <esp_uart_init+0xf0>)
 8000432:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000436:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 8000438:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <esp_uart_init+0xf0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a2d      	ldr	r2, [pc, #180]	; (80004f4 <esp_uart_init+0xf0>)
 800043e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000442:	6013      	str	r3, [r2, #0]

    /*Set alternate function type to UART1 AF07*/

	/*PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <esp_uart_init+0xf0>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000448:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <esp_uart_init+0xf0>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <esp_uart_init+0xf0>)
 8000452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000454:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <esp_uart_init+0xf0>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <esp_uart_init+0xf0>)
 800045e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000460:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <esp_uart_init+0xf0>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000468:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <esp_uart_init+0xf0>)
 800046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <esp_uart_init+0xf0>)
 800046e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000472:	6253      	str	r3, [r2, #36]	; 0x24

	/*PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <esp_uart_init+0xf0>)
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <esp_uart_init+0xf0>)
 800047a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <esp_uart_init+0xf0>)
 8000482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <esp_uart_init+0xf0>)
 8000486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <esp_uart_init+0xf0>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <esp_uart_init+0xf0>)
 8000492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000496:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <esp_uart_init+0xf0>)
 800049a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049c:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <esp_uart_init+0xf0>)
 800049e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004a2:	6253      	str	r3, [r2, #36]	; 0x24

	/************Configure UART module*****************/

	/*Enable clock access to UART1*/
	RCC->APB2ENR |= UART1EN;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <esp_uart_init+0xec>)
 80004a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a8:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <esp_uart_init+0xec>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6453      	str	r3, [r2, #68]	; 0x44

	/*Disable UART module*/
	USART1->CR1 &=~CR1_UE;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <esp_uart_init+0xf4>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <esp_uart_init+0xf4>)
 80004b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004ba:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART1->BRR =  compute_uart_bd(APB2_CLK,UART_BAUDRATE);
 80004bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <esp_uart_init+0xf8>)
 80004c2:	f000 f877 	bl	80005b4 <compute_uart_bd>
 80004c6:	4603      	mov	r3, r0
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <esp_uart_init+0xf4>)
 80004cc:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <esp_uart_init+0xf4>)
 80004d0:	220c      	movs	r2, #12
 80004d2:	60da      	str	r2, [r3, #12]


	/*Enable RXNEIE*/
	USART1->CR1 |=CR1_RXNEIE;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <esp_uart_init+0xf4>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <esp_uart_init+0xf4>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	60d3      	str	r3, [r2, #12]


	/*Enable UART module*/
	USART1->CR1 |=CR1_UE;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <esp_uart_init+0xf4>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <esp_uart_init+0xf4>)
 80004e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ea:	60d3      	str	r3, [r2, #12]



}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40011000 	.word	0x40011000
 80004fc:	00f42400 	.word	0x00f42400

08000500 <esp_uart_write_char>:

void esp_uart_write_char(char ch)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800050a:	bf00      	nop
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <esp_uart_write_char+0x2c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f9      	beq.n	800050c <esp_uart_write_char+0xc>

	/*Write to transmit data register*/
	USART1->DR  =  (ch & 0xFF);
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <esp_uart_write_char+0x2c>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	6053      	str	r3, [r2, #4]

}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40011000 	.word	0x40011000

08000530 <debug_uart_write>:

void debug_uart_write(int ch)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000538:	bf00      	nop
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <debug_uart_write+0x2c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR  =  (ch & 0xFF);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <debug_uart_write+0x2c>)
 800054a:	b2db      	uxtb	r3, r3
 800054c:	6053      	str	r3, [r2, #4]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40004400 	.word	0x40004400

08000560 <systick_delay_ms>:


void systick_delay_ms(uint32_t delay)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <systick_delay_ms+0x50>)
 800056a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800056e:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <systick_delay_ms+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_CLKSRC |CTRL_ENABLE;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <systick_delay_ms+0x50>)
 8000578:	2205      	movs	r2, #5
 800057a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i< delay ;i++)
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e009      	b.n	8000596 <systick_delay_ms+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG)== 0){}
 8000582:	bf00      	nop
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <systick_delay_ms+0x50>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <systick_delay_ms+0x24>
	for(int i = 0; i< delay ;i++)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	d8f1      	bhi.n	8000582 <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <systick_delay_ms+0x50>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]


}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000e010 	.word	0xe000e010

080005b4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	085a      	lsrs	r2, r3, #1
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	441a      	add	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	b29b      	uxth	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db0b      	blt.n	8000606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 021f 	and.w	r2, r3, #31
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <__NVIC_EnableIRQ+0x38>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2001      	movs	r0, #1
 80005fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000e100 	.word	0xe000e100

08000618 <esp82xx_init>:
static void esp_uart_callback(void);
static void esp82xx_process_data(void);
static void uart_output_char(char data);

void esp82xx_init(const char * ssid, const char * password)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	/*Enable fifos*/
	tx_fifo_init();
 8000622:	f000 faa5 	bl	8000b70 <tx_fifo_init>
	rx_fifo_init();
 8000626:	f000 fb17 	bl	8000c58 <rx_fifo_init>

	/*Enable RS pin*/
	esp_rs_pin_init();
 800062a:	f7ff fead 	bl	8000388 <esp_rs_pin_init>

	/*Enable esp uart*/
	esp_uart_init();
 800062e:	f7ff fee9 	bl	8000404 <esp_uart_init>

	/*Enable debug uart*/
	debug_uart_init();
 8000632:	f7ff fe31 	bl	8000298 <debug_uart_init>

	/*Initialize flags*/
	searching  = false;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <esp82xx_init+0xa4>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	is_response =  false;
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <esp82xx_init+0xa8>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	server_resp_searching = 0;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <esp82xx_init+0xac>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
	server_search_resp_cmplt = 0;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <esp82xx_init+0xb0>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

	printf("ESP8266 Initialization...\n\r");
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <esp82xx_init+0xb4>)
 8000650:	f000 fc20 	bl	8000e94 <iprintf>

	/*Enable interrupt*/
	NVIC_EnableIRQ(USART1_IRQn);
 8000654:	2025      	movs	r0, #37	; 0x25
 8000656:	f7ff ffc1 	bl	80005dc <__NVIC_EnableIRQ>

	/*Reset esp module*/

	if(esp82xx_reset() == 0)
 800065a:	f000 f847 	bl	80006ec <esp82xx_reset>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <esp82xx_init+0x54>
	{
		printf("Reset failure, could not reset \n\r");
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <esp82xx_init+0xb8>)
 8000666:	f000 fc15 	bl	8000e94 <iprintf>
 800066a:	e002      	b.n	8000672 <esp82xx_init+0x5a>
	}
	else{
		printf("Reset was successful...\n\r");
 800066c:	4819      	ldr	r0, [pc, #100]	; (80006d4 <esp82xx_init+0xbc>)
 800066e:	f000 fc11 	bl	8000e94 <iprintf>
	}

	if(esp82xx_set_wifi_mode(ESP8266_WIFI_MODE_STA) == 0)
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f868 	bl	8000748 <esp82xx_set_wifi_mode>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <esp82xx_init+0x6e>
	{
		printf("SetWifiMode Failed\n\r");
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <esp82xx_init+0xc0>)
 8000680:	f000 fc08 	bl	8000e94 <iprintf>
 8000684:	e002      	b.n	800068c <esp82xx_init+0x74>
	}
	else{
		printf("Wifi mode set successfully....\n\r");
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <esp82xx_init+0xc4>)
 8000688:	f000 fc04 	bl	8000e94 <iprintf>
	}

	esp82xx_list_access_points();
 800068c:	f000 f88c 	bl	80007a8 <esp82xx_list_access_points>

	/*Join wifi*/

	if(exp82xx_join_wifi_access_point(ssid,password)== 0)
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f8ae 	bl	80007f4 <exp82xx_join_wifi_access_point>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <esp82xx_init+0x8e>
	{
		printf("Could not join wifi\n\r");
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <esp82xx_init+0xc8>)
 80006a0:	f000 fbf8 	bl	8000e94 <iprintf>
 80006a4:	e002      	b.n	80006ac <esp82xx_init+0x94>

	}
	else
	{
		printf("Wifi joined successfully...\n\r");
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <esp82xx_init+0xcc>)
 80006a8:	f000 fbf4 	bl	8000e94 <iprintf>

	}

	/*Get ip address of "google.com"*/
	esp82xx_dns_get_ip("google.com");
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <esp82xx_init+0xd0>)
 80006ae:	f000 f8d1 	bl	8000854 <esp82xx_dns_get_ip>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200004b0 	.word	0x200004b0
 80006c0:	200004b1 	.word	0x200004b1
 80006c4:	200004c0 	.word	0x200004c0
 80006c8:	200004b8 	.word	0x200004b8
 80006cc:	08002190 	.word	0x08002190
 80006d0:	080021ac 	.word	0x080021ac
 80006d4:	080021d0 	.word	0x080021d0
 80006d8:	080021ec 	.word	0x080021ec
 80006dc:	08002204 	.word	0x08002204
 80006e0:	08002228 	.word	0x08002228
 80006e4:	08002240 	.word	0x08002240
 80006e8:	08002260 	.word	0x08002260

080006ec <esp82xx_reset>:


/*Reset esp module*/

static uint8_t esp82xx_reset(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 80006f2:	230a      	movs	r3, #10
 80006f4:	71fb      	strb	r3, [r7, #7]

	wait_resp("OK"||"ok"||"ready"||"Ready");
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 f8dc 	bl	80008b4 <wait_resp>
	//	wait_resp("OK\r\n");


	while(num_of_try)
 80006fc:	e017      	b.n	800072e <esp82xx_reset+0x42>
	{
		/*Set reset pin low */
		esp_rs_pin_disable();
 80006fe:	f7ff fe71 	bl	80003e4 <esp_rs_pin_disable>

		/*Wait a bit*/
		systick_delay_ms(10);
 8000702:	200a      	movs	r0, #10
 8000704:	f7ff ff2c 	bl	8000560 <systick_delay_ms>

		/*Set reset pin high*/
		esp_rs_pin_enable();
 8000708:	f7ff fe5c 	bl	80003c4 <esp_rs_pin_enable>

		/*Send RST command*/
		esp82xx_send_cmd("AT+RST\r\n");
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <esp82xx_reset+0x54>)
 800070e:	f000 fa13 	bl	8000b38 <esp82xx_send_cmd>

		/*Wait */
		systick_delay_ms(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f7ff ff23 	bl	8000560 <systick_delay_ms>

		/*Check for response*/
		if(is_response)
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <esp82xx_reset+0x58>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <esp82xx_reset+0x3c>
		{
			/*Success*/

			return 1;
 8000724:	2301      	movs	r3, #1
 8000726:	e006      	b.n	8000736 <esp82xx_reset+0x4a>
		}

		num_of_try--;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3b01      	subs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1e4      	bne.n	80006fe <esp82xx_reset+0x12>
	}

	/*Failed */
	return 0;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	0800226c 	.word	0x0800226c
 8000744:	200004b1 	.word	0x200004b1

08000748 <esp82xx_set_wifi_mode>:


/*Set Wifi mode*/

static uint8_t esp82xx_set_wifi_mode(uint8_t mode)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 8000752:	230a      	movs	r3, #10
 8000754:	73fb      	strb	r3, [r7, #15]
//	wait_resp("ok\r\n");
	wait_resp("OK"||"ok"||"ready"||"Ready");
 8000756:	2001      	movs	r0, #1
 8000758:	f000 f8ac 	bl	80008b4 <wait_resp>


    while(num_of_try)
 800075c:	e016      	b.n	800078c <esp82xx_set_wifi_mode+0x44>
    {
    	sprintf((char *)temp_buffer, "AT+CWMODE=%d\r\n",mode);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	461a      	mov	r2, r3
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <esp82xx_set_wifi_mode+0x54>)
 8000764:	480e      	ldr	r0, [pc, #56]	; (80007a0 <esp82xx_set_wifi_mode+0x58>)
 8000766:	f000 fbad 	bl	8000ec4 <siprintf>
    	esp82xx_send_cmd((const char *) temp_buffer);
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <esp82xx_set_wifi_mode+0x58>)
 800076c:	f000 f9e4 	bl	8000b38 <esp82xx_send_cmd>
		systick_delay_ms(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f7ff fef4 	bl	8000560 <systick_delay_ms>

		if(is_response)
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <esp82xx_set_wifi_mode+0x5c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <esp82xx_set_wifi_mode+0x3e>
		{
			/*Success*/

			return 1;
 8000782:	2301      	movs	r3, #1
 8000784:	e006      	b.n	8000794 <esp82xx_set_wifi_mode+0x4c>
		}
		num_of_try--;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	3b01      	subs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
    while(num_of_try)
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1e5      	bne.n	800075e <esp82xx_set_wifi_mode+0x16>

    }

    return 0;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08002278 	.word	0x08002278
 80007a0:	200004c8 	.word	0x200004c8
 80007a4:	200004b1 	.word	0x200004b1

080007a8 <esp82xx_list_access_points>:
/*List access points*/
static uint8_t esp82xx_list_access_points(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 80007ae:	230a      	movs	r3, #10
 80007b0:	71fb      	strb	r3, [r7, #7]
	wait_resp("OK"||"ok"||"ready"||"Ready");
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 f87e 	bl	80008b4 <wait_resp>

	while(num_of_try)
 80007b8:	e010      	b.n	80007dc <esp82xx_list_access_points+0x34>

	{
		esp82xx_send_cmd("AT+CWLAP\r\n");
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <esp82xx_list_access_points+0x44>)
 80007bc:	f000 f9bc 	bl	8000b38 <esp82xx_send_cmd>
		systick_delay_ms(5000);
 80007c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80007c4:	f7ff fecc 	bl	8000560 <systick_delay_ms>
		if(is_response)
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <esp82xx_list_access_points+0x48>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <esp82xx_list_access_points+0x2e>
		{
			/*Success*/

			return 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e006      	b.n	80007e4 <esp82xx_list_access_points+0x3c>
		}
		num_of_try--;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	3b01      	subs	r3, #1
 80007da:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1eb      	bne.n	80007ba <esp82xx_list_access_points+0x12>

	}

    return 0;
 80007e2:	2300      	movs	r3, #0

}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08002288 	.word	0x08002288
 80007f0:	200004b1 	.word	0x200004b1

080007f4 <exp82xx_join_wifi_access_point>:

/*Join access point*/
static uint8_t exp82xx_join_wifi_access_point(const char * ssid, const char * password)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 80007fe:	230a      	movs	r3, #10
 8000800:	73fb      	strb	r3, [r7, #15]
//	wait_resp("ok\r\n");
	wait_resp("OK"||"ok"||"ready"||"Ready");
 8000802:	2001      	movs	r0, #1
 8000804:	f000 f856 	bl	80008b4 <wait_resp>

	while(num_of_try)
 8000808:	e016      	b.n	8000838 <exp82xx_join_wifi_access_point+0x44>
	{
		sprintf((char *)temp_buffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <exp82xx_join_wifi_access_point+0x54>)
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <exp82xx_join_wifi_access_point+0x58>)
 8000812:	f000 fb57 	bl	8000ec4 <siprintf>
		esp82xx_send_cmd((const char *)temp_buffer);
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <exp82xx_join_wifi_access_point+0x58>)
 8000818:	f000 f98e 	bl	8000b38 <esp82xx_send_cmd>
		systick_delay_ms(3000);
 800081c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000820:	f7ff fe9e 	bl	8000560 <systick_delay_ms>
		if(is_response)
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <exp82xx_join_wifi_access_point+0x5c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <exp82xx_join_wifi_access_point+0x3e>
		{
			/*Success*/

			return 1;
 800082e:	2301      	movs	r3, #1
 8000830:	e006      	b.n	8000840 <exp82xx_join_wifi_access_point+0x4c>
		}
		num_of_try--;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3b01      	subs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
	while(num_of_try)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1e5      	bne.n	800080a <exp82xx_join_wifi_access_point+0x16>

	}
    return 0;
 800083e:	2300      	movs	r3, #0

}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	08002294 	.word	0x08002294
 800084c:	200004c8 	.word	0x200004c8
 8000850:	200004b1 	.word	0x200004b1

08000854 <esp82xx_dns_get_ip>:


/*Get domain name ip address*/

static uint8_t esp82xx_dns_get_ip(char *website)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 800085c:	230a      	movs	r3, #10
 800085e:	73fb      	strb	r3, [r7, #15]
	wait_resp("ok\r\n");
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <esp82xx_dns_get_ip+0x50>)
 8000862:	f000 f827 	bl	80008b4 <wait_resp>
	while(num_of_try)
 8000866:	e015      	b.n	8000894 <esp82xx_dns_get_ip+0x40>
	{
		sprintf((char *)temp_buffer,"AT+CIPDOMAIN=\"%s\"\r\n",website);
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	490f      	ldr	r1, [pc, #60]	; (80008a8 <esp82xx_dns_get_ip+0x54>)
 800086c:	480f      	ldr	r0, [pc, #60]	; (80008ac <esp82xx_dns_get_ip+0x58>)
 800086e:	f000 fb29 	bl	8000ec4 <siprintf>
		esp82xx_send_cmd(temp_buffer);
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <esp82xx_dns_get_ip+0x58>)
 8000874:	f000 f960 	bl	8000b38 <esp82xx_send_cmd>
		systick_delay_ms(3000);
 8000878:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800087c:	f7ff fe70 	bl	8000560 <systick_delay_ms>
		if(is_response)
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <esp82xx_dns_get_ip+0x5c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <esp82xx_dns_get_ip+0x3a>
			{
				/*Success*/

				return 1;
 800088a:	2301      	movs	r3, #1
 800088c:	e006      	b.n	800089c <esp82xx_dns_get_ip+0x48>
			}
		num_of_try--;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	3b01      	subs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
	while(num_of_try)
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1e6      	bne.n	8000868 <esp82xx_dns_get_ip+0x14>
	}
	return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	080022e4 	.word	0x080022e4
 80008a8:	080022fc 	.word	0x080022fc
 80008ac:	200004c8 	.word	0x200004c8
 80008b0:	200004b1 	.word	0x200004b1

080008b4 <wait_resp>:

}

/*Initialize string search in rx data stream*/
static void wait_resp(char *pt)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	strcpy(sub_str,pt);
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	4808      	ldr	r0, [pc, #32]	; (80008e0 <wait_resp+0x2c>)
 80008c0:	f000 fb20 	bl	8000f04 <strcpy>
	search_idx 	=	0;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <wait_resp+0x30>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
	is_response	=   false;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <wait_resp+0x34>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
	searching	=   true;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <wait_resp+0x38>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000490 	.word	0x20000490
 80008e4:	200004b4 	.word	0x200004b4
 80008e8:	200004b1 	.word	0x200004b1
 80008ec:	200004b0 	.word	0x200004b0

080008f0 <lc>:

/*Convert to lowercase*/
char lc(char letter)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	if((letter >='A')&&(letter<='Z')) {
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	d906      	bls.n	800090e <lc+0x1e>
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b5a      	cmp	r3, #90	; 0x5a
 8000904:	d803      	bhi.n	800090e <lc+0x1e>
		letter |=0x20;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	71fb      	strb	r3, [r7, #7]
	}
	return letter;
 800090e:	79fb      	ldrb	r3, [r7, #7]
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <search_check>:

/*Search for string in rx data stream*/
static void search_check(char letter)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if(searching)
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <search_check+0x5c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d01f      	beq.n	8000970 <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == lc(letter))
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <search_check+0x60>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a12      	ldr	r2, [pc, #72]	; (8000980 <search_check+0x64>)
 8000936:	5cd4      	ldrb	r4, [r2, r3]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffd8 	bl	80008f0 <lc>
 8000940:	4603      	mov	r3, r0
 8000942:	429c      	cmp	r4, r3
 8000944:	d111      	bne.n	800096a <search_check+0x4e>
		{
			search_idx++;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <search_check+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <search_check+0x60>)
 800094e:	6013      	str	r3, [r2, #0]

			/*Check if strings match*/
			if(sub_str[search_idx] == 0){
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <search_check+0x60>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <search_check+0x64>)
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d109      	bne.n	8000970 <search_check+0x54>
				is_response = true;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <search_check+0x68>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <search_check+0x5c>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx =  0;;
		}
	}
}
 8000968:	e002      	b.n	8000970 <search_check+0x54>
			search_idx =  0;;
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <search_check+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	200004b0 	.word	0x200004b0
 800097c:	200004b4 	.word	0x200004b4
 8000980:	20000490 	.word	0x20000490
 8000984:	200004b1 	.word	0x200004b1

08000988 <esp_server_resp_srch_check>:

/*Search for server response in rx data stream*/
static void esp_server_resp_srch_check(char letter)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	if(server_resp_searching == 1)
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <esp_server_resp_srch_check+0xe0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d12a      	bne.n	80009f0 <esp_server_resp_srch_check+0x68>
	{
		/*Check if characters match*/
        if(server_resp_sub_str[server_resp_search_idx] == lc(letter) )
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a34      	ldr	r2, [pc, #208]	; (8000a70 <esp_server_resp_srch_check+0xe8>)
 80009a0:	5cd4      	ldrb	r4, [r2, r3]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffa3 	bl	80008f0 <lc>
 80009aa:	4603      	mov	r3, r0
 80009ac:	429c      	cmp	r4, r3
 80009ae:	d11b      	bne.n	80009e8 <esp_server_resp_srch_check+0x60>
        {
        	server_resp_search_idx++;
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 80009b8:	6013      	str	r3, [r2, #0]
			/*Check if strings match*/
        	if(server_resp_sub_str[server_resp_search_idx] ==  0)
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <esp_server_resp_srch_check+0xe8>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d14c      	bne.n	8000a60 <esp_server_resp_srch_check+0xd8>
        	{
        		server_resp_searching =  2;
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <esp_server_resp_srch_check+0xe0>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	601a      	str	r2, [r3, #0]
        		strcpy(server_resp_sub_str,"\n\rok\r\n");
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <esp_server_resp_srch_check+0xe8>)
 80009ce:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <esp_server_resp_srch_check+0xec>)
 80009d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d4:	6018      	str	r0, [r3, #0]
 80009d6:	3304      	adds	r3, #4
 80009d8:	8019      	strh	r1, [r3, #0]
 80009da:	3302      	adds	r3, #2
 80009dc:	0c0a      	lsrs	r2, r1, #16
 80009de:	701a      	strb	r2, [r3, #0]
        		server_resp_search_idx = 0;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
		 else{
			 /*Start over*/
			   server_resp_search_idx = 0;
		 }
	}
}
 80009e6:	e03b      	b.n	8000a60 <esp_server_resp_srch_check+0xd8>
    		server_resp_search_idx = 0;
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	e037      	b.n	8000a60 <esp_server_resp_srch_check+0xd8>
	else if(server_resp_searching == 2)
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <esp_server_resp_srch_check+0xe0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d133      	bne.n	8000a60 <esp_server_resp_srch_check+0xd8>
		if(server_resp_idx < SERVER_REPSONSE_SIZE){
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <esp_server_resp_srch_check+0xf0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a00:	da0e      	bge.n	8000a20 <esp_server_resp_srch_check+0x98>
			server_resp_buffer[server_resp_idx] =  lc(letter);
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <esp_server_resp_srch_check+0xf0>)
 8000a04:	681c      	ldr	r4, [r3, #0]
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff71 	bl	80008f0 <lc>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <esp_server_resp_srch_check+0xf4>)
 8000a14:	551a      	strb	r2, [r3, r4]
			server_resp_idx++;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <esp_server_resp_srch_check+0xf0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <esp_server_resp_srch_check+0xf0>)
 8000a1e:	6013      	str	r3, [r2, #0]
		 if(server_resp_sub_str[server_resp_search_idx] == lc(letter) )
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <esp_server_resp_srch_check+0xe8>)
 8000a26:	5cd4      	ldrb	r4, [r2, r3]
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff60 	bl	80008f0 <lc>
 8000a30:	4603      	mov	r3, r0
 8000a32:	429c      	cmp	r4, r3
 8000a34:	d111      	bne.n	8000a5a <esp_server_resp_srch_check+0xd2>
	        	server_resp_search_idx++;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 8000a3e:	6013      	str	r3, [r2, #0]
	        	if(server_resp_sub_str[server_resp_search_idx] ==  0)
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <esp_server_resp_srch_check+0xe8>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d109      	bne.n	8000a60 <esp_server_resp_srch_check+0xd8>
	        		server_search_resp_cmplt =  true;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <esp_server_resp_srch_check+0xf8>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	        		server_resp_searching    = 0 ;
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <esp_server_resp_srch_check+0xe0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	e002      	b.n	8000a60 <esp_server_resp_srch_check+0xd8>
			   server_resp_search_idx = 0;
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <esp_server_resp_srch_check+0xe4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	200004c0 	.word	0x200004c0
 8000a6c:	200004bc 	.word	0x200004bc
 8000a70:	20000000 	.word	0x20000000
 8000a74:	08002318 	.word	0x08002318
 8000a78:	200004c4 	.word	0x200004c4
 8000a7c:	20000090 	.word	0x20000090
 8000a80:	200004b8 	.word	0x200004b8

08000a84 <copy_software_to_hardware>:

/*Copy content of tx_fifo in Debug UART DR*/
static void copy_software_to_hardware(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	char letter;
	while((USART2->SR & SR_TXE) && tx_fifo_size()> 0){
 8000a8a:	e006      	b.n	8000a9a <copy_software_to_hardware+0x16>
		tx_fifo_get(&letter);
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f8ac 	bl	8000bec <tx_fifo_get>
		USART2->DR = letter;
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <copy_software_to_hardware+0x34>)
 8000a98:	605a      	str	r2, [r3, #4]
	while((USART2->SR & SR_TXE) && tx_fifo_size()> 0){
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <copy_software_to_hardware+0x34>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <copy_software_to_hardware+0x2c>
 8000aa6:	f000 f8c7 	bl	8000c38 <tx_fifo_size>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1ed      	bne.n	8000a8c <copy_software_to_hardware+0x8>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004400 	.word	0x40004400

08000abc <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	if(tx_fifo_put(data) ==  FIFOFAIL)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f863 	bl	8000b94 <tx_fifo_put>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <uart_output_char+0x1e>
	{
		return;
	}
	copy_software_to_hardware();
 8000ad4:	f7ff ffd6 	bl	8000a84 <copy_software_to_hardware>
 8000ad8:	e000      	b.n	8000adc <uart_output_char+0x20>
		return;
 8000ada:	bf00      	nop

}
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <esp82xx_process_data>:

 static void esp82xx_process_data(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there new data in wifi uart data register*/
	if(USART1->SR & SR_RXNE)
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <esp82xx_process_data+0x38>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0320 	and.w	r3, r3, #32
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00e      	beq.n	8000b14 <esp82xx_process_data+0x30>
	{
		/*Store data from wifi uart data register in local variable*/
		letter = USART1->DR;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <esp82xx_process_data+0x38>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	71fb      	strb	r3, [r7, #7]

		/*Print data from wifi uart data register to debug uart i.e computer*/
		uart_output_char(letter);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ffdc 	bl	8000abc <uart_output_char>

		/*Check for response*/
		search_check(letter);
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff08 	bl	800091c <search_check>

		/*Check for server response*/
		esp_server_resp_srch_check(letter);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff3a 	bl	8000988 <esp_server_resp_srch_check>


	}
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40011000 	.word	0x40011000

08000b20 <esp_uart_callback>:


/*Call back function for esp82xx uart*/

static void esp_uart_callback(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	esp82xx_process_data();
 8000b24:	f7ff ffde 	bl	8000ae4 <esp82xx_process_data>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <USART1_IRQHandler>:

/*esp82xx uart irqhandler*/
void USART1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	esp_uart_callback();
 8000b30:	f7ff fff6 	bl	8000b20 <esp_uart_callback>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <esp82xx_send_cmd>:


/*Send command to esp82xx*/
static void esp82xx_send_cmd(const char * cmd)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	int index = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
   	while(cmd[index] !=0 )
 8000b44:	e009      	b.n	8000b5a <esp82xx_send_cmd+0x22>
   	{
   		esp_uart_write_char(cmd[index++]);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	60fa      	str	r2, [r7, #12]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fcd3 	bl	8000500 <esp_uart_write_char>
   	while(cmd[index] !=0 )
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1ef      	bne.n	8000b46 <esp82xx_send_cmd+0xe>
   	}
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <tx_fifo_init>:
uint32_t volatile rx_get_itr;


/*Initialize tx fifo*/
void tx_fifo_init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <tx_fifo_init+0x1c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <tx_fifo_init+0x20>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000cc8 	.word	0x20000cc8
 8000b90:	20000ccc 	.word	0x20000ccc

08000b94 <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t  tx_fifo_put(tx_dataType data)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <tx_fifo_put+0x4c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <tx_fifo_put+0x50>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bac:	f023 0303 	bic.w	r3, r3, #3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <tx_fifo_put+0x24>
	{
		/*Fifo is full*/
		return(TXFAIL);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e00c      	b.n	8000bd2 <tx_fifo_put+0x3e>
	}

	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE -1)] = data;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <tx_fifo_put+0x4c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bc0:	4909      	ldr	r1, [pc, #36]	; (8000be8 <tx_fifo_put+0x54>)
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <tx_fifo_put+0x4c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <tx_fifo_put+0x4c>)
 8000bce:	6013      	str	r3, [r2, #0]
	return(TXSUCCESS);
 8000bd0:	2301      	movs	r3, #1

}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000cc8 	.word	0x20000cc8
 8000be4:	20000ccc 	.word	0x20000ccc
 8000be8:	200008c8 	.word	0x200008c8

08000bec <tx_fifo_get>:

uint8_t  tx_fifo_get(tx_dataType *pdata)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	/*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr){
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <tx_fifo_get+0x40>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <tx_fifo_get+0x44>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d101      	bne.n	8000c04 <tx_fifo_get+0x18>

		/*Fifo empty*/
		return(TXFAIL);
 8000c00:	2300      	movs	r3, #0
 8000c02:	e00d      	b.n	8000c20 <tx_fifo_get+0x34>

	}
	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE -1)];
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <tx_fifo_get+0x44>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <tx_fifo_get+0x48>)
 8000c0e:	5cd2      	ldrb	r2, [r2, r3]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <tx_fifo_get+0x44>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <tx_fifo_get+0x44>)
 8000c1c:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000cc8 	.word	0x20000cc8
 8000c30:	20000ccc 	.word	0x20000ccc
 8000c34:	200008c8 	.word	0x200008c8

08000c38 <tx_fifo_size>:

uint32_t tx_fifo_size(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr - tx_get_itr);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <tx_fifo_size+0x18>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <tx_fifo_size+0x1c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1ad3      	subs	r3, r2, r3
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20000cc8 	.word	0x20000cc8
 8000c54:	20000ccc 	.word	0x20000ccc

08000c58 <rx_fifo_init>:


/*Initialize rx fifo*/
void rx_fifo_init(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <rx_fifo_init+0x1c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <rx_fifo_init+0x20>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000cd0 	.word	0x20000cd0
 8000c78:	20000cd4 	.word	0x20000cd4

08000c7c <main>:

#define SSID_NAME  "FRITZ!Box 6660 Cable BP"
#define PASSKEY    "73307968999628369212"

int main()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

	esp82xx_init(SSID_NAME,PASSKEY);
 8000c80:	4902      	ldr	r1, [pc, #8]	; (8000c8c <main+0x10>)
 8000c82:	4803      	ldr	r0, [pc, #12]	; (8000c90 <main+0x14>)
 8000c84:	f7ff fcc8 	bl	8000618 <esp82xx_init>

	while(1)
 8000c88:	e7fe      	b.n	8000c88 <main+0xc>
 8000c8a:	bf00      	nop
 8000c8c:	08002320 	.word	0x08002320
 8000c90:	08002338 	.word	0x08002338

08000c94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e00a      	b.n	8000cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca6:	f3af 8000 	nop.w
 8000caa:	4601      	mov	r1, r0
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf0      	blt.n	8000ca6 <_read+0x12>
	}

return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e009      	b.n	8000cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fac9 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf1      	blt.n	8000ce0 <_write+0x12>
	}
	return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_close>:

int _close(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_isatty>:

int _isatty(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	return 1;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f000 f846 	bl	8000e30 <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20020000 	.word	0x20020000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	20000cd8 	.word	0x20000cd8
 8000dd8:	20000cf0 	.word	0x20000cf0

08000ddc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dde:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000de0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0a:	f000 f817 	bl	8000e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0e:	f7ff ff35 	bl	8000c7c <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e20:	080023f0 	.word	0x080023f0
  ldr r2, =_sbss
 8000e24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e28:	20000cec 	.word	0x20000cec

08000e2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <__errno>:
 8000e30:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <__errno+0x8>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000010 	.word	0x20000010

08000e3c <__libc_init_array>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4d0d      	ldr	r5, [pc, #52]	; (8000e74 <__libc_init_array+0x38>)
 8000e40:	4c0d      	ldr	r4, [pc, #52]	; (8000e78 <__libc_init_array+0x3c>)
 8000e42:	1b64      	subs	r4, r4, r5
 8000e44:	10a4      	asrs	r4, r4, #2
 8000e46:	2600      	movs	r6, #0
 8000e48:	42a6      	cmp	r6, r4
 8000e4a:	d109      	bne.n	8000e60 <__libc_init_array+0x24>
 8000e4c:	4d0b      	ldr	r5, [pc, #44]	; (8000e7c <__libc_init_array+0x40>)
 8000e4e:	4c0c      	ldr	r4, [pc, #48]	; (8000e80 <__libc_init_array+0x44>)
 8000e50:	f001 f992 	bl	8002178 <_init>
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	10a4      	asrs	r4, r4, #2
 8000e58:	2600      	movs	r6, #0
 8000e5a:	42a6      	cmp	r6, r4
 8000e5c:	d105      	bne.n	8000e6a <__libc_init_array+0x2e>
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e64:	4798      	blx	r3
 8000e66:	3601      	adds	r6, #1
 8000e68:	e7ee      	b.n	8000e48 <__libc_init_array+0xc>
 8000e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6e:	4798      	blx	r3
 8000e70:	3601      	adds	r6, #1
 8000e72:	e7f2      	b.n	8000e5a <__libc_init_array+0x1e>
 8000e74:	080023e8 	.word	0x080023e8
 8000e78:	080023e8 	.word	0x080023e8
 8000e7c:	080023e8 	.word	0x080023e8
 8000e80:	080023ec 	.word	0x080023ec

08000e84 <memset>:
 8000e84:	4402      	add	r2, r0
 8000e86:	4603      	mov	r3, r0
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <memset+0xa>
 8000e8c:	4770      	bx	lr
 8000e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8000e92:	e7f9      	b.n	8000e88 <memset+0x4>

08000e94 <iprintf>:
 8000e94:	b40f      	push	{r0, r1, r2, r3}
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <iprintf+0x2c>)
 8000e98:	b513      	push	{r0, r1, r4, lr}
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	b124      	cbz	r4, 8000ea8 <iprintf+0x14>
 8000e9e:	69a3      	ldr	r3, [r4, #24]
 8000ea0:	b913      	cbnz	r3, 8000ea8 <iprintf+0x14>
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f000 f88e 	bl	8000fc4 <__sinit>
 8000ea8:	ab05      	add	r3, sp, #20
 8000eaa:	9a04      	ldr	r2, [sp, #16]
 8000eac:	68a1      	ldr	r1, [r4, #8]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f000 fb41 	bl	8001538 <_vfiprintf_r>
 8000eb6:	b002      	add	sp, #8
 8000eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr
 8000ec0:	20000010 	.word	0x20000010

08000ec4 <siprintf>:
 8000ec4:	b40e      	push	{r1, r2, r3}
 8000ec6:	b500      	push	{lr}
 8000ec8:	b09c      	sub	sp, #112	; 0x70
 8000eca:	ab1d      	add	r3, sp, #116	; 0x74
 8000ecc:	9002      	str	r0, [sp, #8]
 8000ece:	9006      	str	r0, [sp, #24]
 8000ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <siprintf+0x38>)
 8000ed6:	9107      	str	r1, [sp, #28]
 8000ed8:	9104      	str	r1, [sp, #16]
 8000eda:	4909      	ldr	r1, [pc, #36]	; (8000f00 <siprintf+0x3c>)
 8000edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ee0:	9105      	str	r1, [sp, #20]
 8000ee2:	6800      	ldr	r0, [r0, #0]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	a902      	add	r1, sp, #8
 8000ee8:	f000 f9fc 	bl	80012e4 <_svfiprintf_r>
 8000eec:	9b02      	ldr	r3, [sp, #8]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	b01c      	add	sp, #112	; 0x70
 8000ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr
 8000efc:	20000010 	.word	0x20000010
 8000f00:	ffff0208 	.word	0xffff0208

08000f04 <strcpy>:
 8000f04:	4603      	mov	r3, r0
 8000f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f0a:	f803 2b01 	strb.w	r2, [r3], #1
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d1f9      	bne.n	8000f06 <strcpy+0x2>
 8000f12:	4770      	bx	lr

08000f14 <std>:
 8000f14:	2300      	movs	r3, #0
 8000f16:	b510      	push	{r4, lr}
 8000f18:	4604      	mov	r4, r0
 8000f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8000f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f22:	6083      	str	r3, [r0, #8]
 8000f24:	8181      	strh	r1, [r0, #12]
 8000f26:	6643      	str	r3, [r0, #100]	; 0x64
 8000f28:	81c2      	strh	r2, [r0, #14]
 8000f2a:	6183      	str	r3, [r0, #24]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2208      	movs	r2, #8
 8000f30:	305c      	adds	r0, #92	; 0x5c
 8000f32:	f7ff ffa7 	bl	8000e84 <memset>
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <std+0x38>)
 8000f38:	6263      	str	r3, [r4, #36]	; 0x24
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <std+0x3c>)
 8000f3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <std+0x40>)
 8000f40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <std+0x44>)
 8000f44:	6224      	str	r4, [r4, #32]
 8000f46:	6323      	str	r3, [r4, #48]	; 0x30
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08001ae1 	.word	0x08001ae1
 8000f50:	08001b03 	.word	0x08001b03
 8000f54:	08001b3b 	.word	0x08001b3b
 8000f58:	08001b5f 	.word	0x08001b5f

08000f5c <_cleanup_r>:
 8000f5c:	4901      	ldr	r1, [pc, #4]	; (8000f64 <_cleanup_r+0x8>)
 8000f5e:	f000 b8af 	b.w	80010c0 <_fwalk_reent>
 8000f62:	bf00      	nop
 8000f64:	08001e39 	.word	0x08001e39

08000f68 <__sfmoreglue>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	2268      	movs	r2, #104	; 0x68
 8000f6c:	1e4d      	subs	r5, r1, #1
 8000f6e:	4355      	muls	r5, r2
 8000f70:	460e      	mov	r6, r1
 8000f72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f76:	f000 f8e5 	bl	8001144 <_malloc_r>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	b140      	cbz	r0, 8000f90 <__sfmoreglue+0x28>
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e9c0 1600 	strd	r1, r6, [r0]
 8000f84:	300c      	adds	r0, #12
 8000f86:	60a0      	str	r0, [r4, #8]
 8000f88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f8c:	f7ff ff7a 	bl	8000e84 <memset>
 8000f90:	4620      	mov	r0, r4
 8000f92:	bd70      	pop	{r4, r5, r6, pc}

08000f94 <__sfp_lock_acquire>:
 8000f94:	4801      	ldr	r0, [pc, #4]	; (8000f9c <__sfp_lock_acquire+0x8>)
 8000f96:	f000 b8b3 	b.w	8001100 <__retarget_lock_acquire_recursive>
 8000f9a:	bf00      	nop
 8000f9c:	20000cdd 	.word	0x20000cdd

08000fa0 <__sfp_lock_release>:
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <__sfp_lock_release+0x8>)
 8000fa2:	f000 b8ae 	b.w	8001102 <__retarget_lock_release_recursive>
 8000fa6:	bf00      	nop
 8000fa8:	20000cdd 	.word	0x20000cdd

08000fac <__sinit_lock_acquire>:
 8000fac:	4801      	ldr	r0, [pc, #4]	; (8000fb4 <__sinit_lock_acquire+0x8>)
 8000fae:	f000 b8a7 	b.w	8001100 <__retarget_lock_acquire_recursive>
 8000fb2:	bf00      	nop
 8000fb4:	20000cde 	.word	0x20000cde

08000fb8 <__sinit_lock_release>:
 8000fb8:	4801      	ldr	r0, [pc, #4]	; (8000fc0 <__sinit_lock_release+0x8>)
 8000fba:	f000 b8a2 	b.w	8001102 <__retarget_lock_release_recursive>
 8000fbe:	bf00      	nop
 8000fc0:	20000cde 	.word	0x20000cde

08000fc4 <__sinit>:
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	f7ff fff0 	bl	8000fac <__sinit_lock_acquire>
 8000fcc:	69a3      	ldr	r3, [r4, #24]
 8000fce:	b11b      	cbz	r3, 8000fd8 <__sinit+0x14>
 8000fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fd4:	f7ff bff0 	b.w	8000fb8 <__sinit_lock_release>
 8000fd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000fdc:	6523      	str	r3, [r4, #80]	; 0x50
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <__sinit+0x68>)
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <__sinit+0x6c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	bf04      	itt	eq
 8000fea:	2301      	moveq	r3, #1
 8000fec:	61a3      	streq	r3, [r4, #24]
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f000 f820 	bl	8001034 <__sfp>
 8000ff4:	6060      	str	r0, [r4, #4]
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 f81c 	bl	8001034 <__sfp>
 8000ffc:	60a0      	str	r0, [r4, #8]
 8000ffe:	4620      	mov	r0, r4
 8001000:	f000 f818 	bl	8001034 <__sfp>
 8001004:	2200      	movs	r2, #0
 8001006:	60e0      	str	r0, [r4, #12]
 8001008:	2104      	movs	r1, #4
 800100a:	6860      	ldr	r0, [r4, #4]
 800100c:	f7ff ff82 	bl	8000f14 <std>
 8001010:	68a0      	ldr	r0, [r4, #8]
 8001012:	2201      	movs	r2, #1
 8001014:	2109      	movs	r1, #9
 8001016:	f7ff ff7d 	bl	8000f14 <std>
 800101a:	68e0      	ldr	r0, [r4, #12]
 800101c:	2202      	movs	r2, #2
 800101e:	2112      	movs	r1, #18
 8001020:	f7ff ff78 	bl	8000f14 <std>
 8001024:	2301      	movs	r3, #1
 8001026:	61a3      	str	r3, [r4, #24]
 8001028:	e7d2      	b.n	8000fd0 <__sinit+0xc>
 800102a:	bf00      	nop
 800102c:	08002350 	.word	0x08002350
 8001030:	08000f5d 	.word	0x08000f5d

08001034 <__sfp>:
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	4607      	mov	r7, r0
 8001038:	f7ff ffac 	bl	8000f94 <__sfp_lock_acquire>
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <__sfp+0x84>)
 800103e:	681e      	ldr	r6, [r3, #0]
 8001040:	69b3      	ldr	r3, [r6, #24]
 8001042:	b913      	cbnz	r3, 800104a <__sfp+0x16>
 8001044:	4630      	mov	r0, r6
 8001046:	f7ff ffbd 	bl	8000fc4 <__sinit>
 800104a:	3648      	adds	r6, #72	; 0x48
 800104c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001050:	3b01      	subs	r3, #1
 8001052:	d503      	bpl.n	800105c <__sfp+0x28>
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	b30b      	cbz	r3, 800109c <__sfp+0x68>
 8001058:	6836      	ldr	r6, [r6, #0]
 800105a:	e7f7      	b.n	800104c <__sfp+0x18>
 800105c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001060:	b9d5      	cbnz	r5, 8001098 <__sfp+0x64>
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <__sfp+0x88>)
 8001064:	60e3      	str	r3, [r4, #12]
 8001066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800106a:	6665      	str	r5, [r4, #100]	; 0x64
 800106c:	f000 f847 	bl	80010fe <__retarget_lock_init_recursive>
 8001070:	f7ff ff96 	bl	8000fa0 <__sfp_lock_release>
 8001074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800107c:	6025      	str	r5, [r4, #0]
 800107e:	61a5      	str	r5, [r4, #24]
 8001080:	2208      	movs	r2, #8
 8001082:	4629      	mov	r1, r5
 8001084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001088:	f7ff fefc 	bl	8000e84 <memset>
 800108c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001094:	4620      	mov	r0, r4
 8001096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001098:	3468      	adds	r4, #104	; 0x68
 800109a:	e7d9      	b.n	8001050 <__sfp+0x1c>
 800109c:	2104      	movs	r1, #4
 800109e:	4638      	mov	r0, r7
 80010a0:	f7ff ff62 	bl	8000f68 <__sfmoreglue>
 80010a4:	4604      	mov	r4, r0
 80010a6:	6030      	str	r0, [r6, #0]
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d1d5      	bne.n	8001058 <__sfp+0x24>
 80010ac:	f7ff ff78 	bl	8000fa0 <__sfp_lock_release>
 80010b0:	230c      	movs	r3, #12
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	e7ee      	b.n	8001094 <__sfp+0x60>
 80010b6:	bf00      	nop
 80010b8:	08002350 	.word	0x08002350
 80010bc:	ffff0001 	.word	0xffff0001

080010c0 <_fwalk_reent>:
 80010c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010c4:	4606      	mov	r6, r0
 80010c6:	4688      	mov	r8, r1
 80010c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80010cc:	2700      	movs	r7, #0
 80010ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010d2:	f1b9 0901 	subs.w	r9, r9, #1
 80010d6:	d505      	bpl.n	80010e4 <_fwalk_reent+0x24>
 80010d8:	6824      	ldr	r4, [r4, #0]
 80010da:	2c00      	cmp	r4, #0
 80010dc:	d1f7      	bne.n	80010ce <_fwalk_reent+0xe>
 80010de:	4638      	mov	r0, r7
 80010e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010e4:	89ab      	ldrh	r3, [r5, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d907      	bls.n	80010fa <_fwalk_reent+0x3a>
 80010ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010ee:	3301      	adds	r3, #1
 80010f0:	d003      	beq.n	80010fa <_fwalk_reent+0x3a>
 80010f2:	4629      	mov	r1, r5
 80010f4:	4630      	mov	r0, r6
 80010f6:	47c0      	blx	r8
 80010f8:	4307      	orrs	r7, r0
 80010fa:	3568      	adds	r5, #104	; 0x68
 80010fc:	e7e9      	b.n	80010d2 <_fwalk_reent+0x12>

080010fe <__retarget_lock_init_recursive>:
 80010fe:	4770      	bx	lr

08001100 <__retarget_lock_acquire_recursive>:
 8001100:	4770      	bx	lr

08001102 <__retarget_lock_release_recursive>:
 8001102:	4770      	bx	lr

08001104 <sbrk_aligned>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	4e0e      	ldr	r6, [pc, #56]	; (8001140 <sbrk_aligned+0x3c>)
 8001108:	460c      	mov	r4, r1
 800110a:	6831      	ldr	r1, [r6, #0]
 800110c:	4605      	mov	r5, r0
 800110e:	b911      	cbnz	r1, 8001116 <sbrk_aligned+0x12>
 8001110:	f000 fcd6 	bl	8001ac0 <_sbrk_r>
 8001114:	6030      	str	r0, [r6, #0]
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	f000 fcd1 	bl	8001ac0 <_sbrk_r>
 800111e:	1c43      	adds	r3, r0, #1
 8001120:	d00a      	beq.n	8001138 <sbrk_aligned+0x34>
 8001122:	1cc4      	adds	r4, r0, #3
 8001124:	f024 0403 	bic.w	r4, r4, #3
 8001128:	42a0      	cmp	r0, r4
 800112a:	d007      	beq.n	800113c <sbrk_aligned+0x38>
 800112c:	1a21      	subs	r1, r4, r0
 800112e:	4628      	mov	r0, r5
 8001130:	f000 fcc6 	bl	8001ac0 <_sbrk_r>
 8001134:	3001      	adds	r0, #1
 8001136:	d101      	bne.n	800113c <sbrk_aligned+0x38>
 8001138:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800113c:	4620      	mov	r0, r4
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	20000ce4 	.word	0x20000ce4

08001144 <_malloc_r>:
 8001144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001148:	1ccd      	adds	r5, r1, #3
 800114a:	f025 0503 	bic.w	r5, r5, #3
 800114e:	3508      	adds	r5, #8
 8001150:	2d0c      	cmp	r5, #12
 8001152:	bf38      	it	cc
 8001154:	250c      	movcc	r5, #12
 8001156:	2d00      	cmp	r5, #0
 8001158:	4607      	mov	r7, r0
 800115a:	db01      	blt.n	8001160 <_malloc_r+0x1c>
 800115c:	42a9      	cmp	r1, r5
 800115e:	d905      	bls.n	800116c <_malloc_r+0x28>
 8001160:	230c      	movs	r3, #12
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	2600      	movs	r6, #0
 8001166:	4630      	mov	r0, r6
 8001168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800116c:	4e2e      	ldr	r6, [pc, #184]	; (8001228 <_malloc_r+0xe4>)
 800116e:	f000 ff3f 	bl	8001ff0 <__malloc_lock>
 8001172:	6833      	ldr	r3, [r6, #0]
 8001174:	461c      	mov	r4, r3
 8001176:	bb34      	cbnz	r4, 80011c6 <_malloc_r+0x82>
 8001178:	4629      	mov	r1, r5
 800117a:	4638      	mov	r0, r7
 800117c:	f7ff ffc2 	bl	8001104 <sbrk_aligned>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	4604      	mov	r4, r0
 8001184:	d14d      	bne.n	8001222 <_malloc_r+0xde>
 8001186:	6834      	ldr	r4, [r6, #0]
 8001188:	4626      	mov	r6, r4
 800118a:	2e00      	cmp	r6, #0
 800118c:	d140      	bne.n	8001210 <_malloc_r+0xcc>
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	4631      	mov	r1, r6
 8001192:	4638      	mov	r0, r7
 8001194:	eb04 0803 	add.w	r8, r4, r3
 8001198:	f000 fc92 	bl	8001ac0 <_sbrk_r>
 800119c:	4580      	cmp	r8, r0
 800119e:	d13a      	bne.n	8001216 <_malloc_r+0xd2>
 80011a0:	6821      	ldr	r1, [r4, #0]
 80011a2:	3503      	adds	r5, #3
 80011a4:	1a6d      	subs	r5, r5, r1
 80011a6:	f025 0503 	bic.w	r5, r5, #3
 80011aa:	3508      	adds	r5, #8
 80011ac:	2d0c      	cmp	r5, #12
 80011ae:	bf38      	it	cc
 80011b0:	250c      	movcc	r5, #12
 80011b2:	4629      	mov	r1, r5
 80011b4:	4638      	mov	r0, r7
 80011b6:	f7ff ffa5 	bl	8001104 <sbrk_aligned>
 80011ba:	3001      	adds	r0, #1
 80011bc:	d02b      	beq.n	8001216 <_malloc_r+0xd2>
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	442b      	add	r3, r5
 80011c2:	6023      	str	r3, [r4, #0]
 80011c4:	e00e      	b.n	80011e4 <_malloc_r+0xa0>
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	1b52      	subs	r2, r2, r5
 80011ca:	d41e      	bmi.n	800120a <_malloc_r+0xc6>
 80011cc:	2a0b      	cmp	r2, #11
 80011ce:	d916      	bls.n	80011fe <_malloc_r+0xba>
 80011d0:	1961      	adds	r1, r4, r5
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	6025      	str	r5, [r4, #0]
 80011d6:	bf18      	it	ne
 80011d8:	6059      	strne	r1, [r3, #4]
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	bf08      	it	eq
 80011de:	6031      	streq	r1, [r6, #0]
 80011e0:	5162      	str	r2, [r4, r5]
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	4638      	mov	r0, r7
 80011e6:	f104 060b 	add.w	r6, r4, #11
 80011ea:	f000 ff07 	bl	8001ffc <__malloc_unlock>
 80011ee:	f026 0607 	bic.w	r6, r6, #7
 80011f2:	1d23      	adds	r3, r4, #4
 80011f4:	1af2      	subs	r2, r6, r3
 80011f6:	d0b6      	beq.n	8001166 <_malloc_r+0x22>
 80011f8:	1b9b      	subs	r3, r3, r6
 80011fa:	50a3      	str	r3, [r4, r2]
 80011fc:	e7b3      	b.n	8001166 <_malloc_r+0x22>
 80011fe:	6862      	ldr	r2, [r4, #4]
 8001200:	42a3      	cmp	r3, r4
 8001202:	bf0c      	ite	eq
 8001204:	6032      	streq	r2, [r6, #0]
 8001206:	605a      	strne	r2, [r3, #4]
 8001208:	e7ec      	b.n	80011e4 <_malloc_r+0xa0>
 800120a:	4623      	mov	r3, r4
 800120c:	6864      	ldr	r4, [r4, #4]
 800120e:	e7b2      	b.n	8001176 <_malloc_r+0x32>
 8001210:	4634      	mov	r4, r6
 8001212:	6876      	ldr	r6, [r6, #4]
 8001214:	e7b9      	b.n	800118a <_malloc_r+0x46>
 8001216:	230c      	movs	r3, #12
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4638      	mov	r0, r7
 800121c:	f000 feee 	bl	8001ffc <__malloc_unlock>
 8001220:	e7a1      	b.n	8001166 <_malloc_r+0x22>
 8001222:	6025      	str	r5, [r4, #0]
 8001224:	e7de      	b.n	80011e4 <_malloc_r+0xa0>
 8001226:	bf00      	nop
 8001228:	20000ce0 	.word	0x20000ce0

0800122c <__ssputs_r>:
 800122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001230:	688e      	ldr	r6, [r1, #8]
 8001232:	429e      	cmp	r6, r3
 8001234:	4682      	mov	sl, r0
 8001236:	460c      	mov	r4, r1
 8001238:	4690      	mov	r8, r2
 800123a:	461f      	mov	r7, r3
 800123c:	d838      	bhi.n	80012b0 <__ssputs_r+0x84>
 800123e:	898a      	ldrh	r2, [r1, #12]
 8001240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001244:	d032      	beq.n	80012ac <__ssputs_r+0x80>
 8001246:	6825      	ldr	r5, [r4, #0]
 8001248:	6909      	ldr	r1, [r1, #16]
 800124a:	eba5 0901 	sub.w	r9, r5, r1
 800124e:	6965      	ldr	r5, [r4, #20]
 8001250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001258:	3301      	adds	r3, #1
 800125a:	444b      	add	r3, r9
 800125c:	106d      	asrs	r5, r5, #1
 800125e:	429d      	cmp	r5, r3
 8001260:	bf38      	it	cc
 8001262:	461d      	movcc	r5, r3
 8001264:	0553      	lsls	r3, r2, #21
 8001266:	d531      	bpl.n	80012cc <__ssputs_r+0xa0>
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff ff6b 	bl	8001144 <_malloc_r>
 800126e:	4606      	mov	r6, r0
 8001270:	b950      	cbnz	r0, 8001288 <__ssputs_r+0x5c>
 8001272:	230c      	movs	r3, #12
 8001274:	f8ca 3000 	str.w	r3, [sl]
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127e:	81a3      	strh	r3, [r4, #12]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001288:	6921      	ldr	r1, [r4, #16]
 800128a:	464a      	mov	r2, r9
 800128c:	f000 fe88 	bl	8001fa0 <memcpy>
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	6126      	str	r6, [r4, #16]
 800129e:	6165      	str	r5, [r4, #20]
 80012a0:	444e      	add	r6, r9
 80012a2:	eba5 0509 	sub.w	r5, r5, r9
 80012a6:	6026      	str	r6, [r4, #0]
 80012a8:	60a5      	str	r5, [r4, #8]
 80012aa:	463e      	mov	r6, r7
 80012ac:	42be      	cmp	r6, r7
 80012ae:	d900      	bls.n	80012b2 <__ssputs_r+0x86>
 80012b0:	463e      	mov	r6, r7
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	4632      	mov	r2, r6
 80012b6:	4641      	mov	r1, r8
 80012b8:	f000 fe80 	bl	8001fbc <memmove>
 80012bc:	68a3      	ldr	r3, [r4, #8]
 80012be:	1b9b      	subs	r3, r3, r6
 80012c0:	60a3      	str	r3, [r4, #8]
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	4433      	add	r3, r6
 80012c6:	6023      	str	r3, [r4, #0]
 80012c8:	2000      	movs	r0, #0
 80012ca:	e7db      	b.n	8001284 <__ssputs_r+0x58>
 80012cc:	462a      	mov	r2, r5
 80012ce:	f000 fee7 	bl	80020a0 <_realloc_r>
 80012d2:	4606      	mov	r6, r0
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d1e1      	bne.n	800129c <__ssputs_r+0x70>
 80012d8:	6921      	ldr	r1, [r4, #16]
 80012da:	4650      	mov	r0, sl
 80012dc:	f000 fe94 	bl	8002008 <_free_r>
 80012e0:	e7c7      	b.n	8001272 <__ssputs_r+0x46>
	...

080012e4 <_svfiprintf_r>:
 80012e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e8:	4698      	mov	r8, r3
 80012ea:	898b      	ldrh	r3, [r1, #12]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	b09d      	sub	sp, #116	; 0x74
 80012f0:	4607      	mov	r7, r0
 80012f2:	460d      	mov	r5, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	d50e      	bpl.n	8001316 <_svfiprintf_r+0x32>
 80012f8:	690b      	ldr	r3, [r1, #16]
 80012fa:	b963      	cbnz	r3, 8001316 <_svfiprintf_r+0x32>
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	f7ff ff21 	bl	8001144 <_malloc_r>
 8001302:	6028      	str	r0, [r5, #0]
 8001304:	6128      	str	r0, [r5, #16]
 8001306:	b920      	cbnz	r0, 8001312 <_svfiprintf_r+0x2e>
 8001308:	230c      	movs	r3, #12
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001310:	e0d1      	b.n	80014b6 <_svfiprintf_r+0x1d2>
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	616b      	str	r3, [r5, #20]
 8001316:	2300      	movs	r3, #0
 8001318:	9309      	str	r3, [sp, #36]	; 0x24
 800131a:	2320      	movs	r3, #32
 800131c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001320:	f8cd 800c 	str.w	r8, [sp, #12]
 8001324:	2330      	movs	r3, #48	; 0x30
 8001326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80014d0 <_svfiprintf_r+0x1ec>
 800132a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800132e:	f04f 0901 	mov.w	r9, #1
 8001332:	4623      	mov	r3, r4
 8001334:	469a      	mov	sl, r3
 8001336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800133a:	b10a      	cbz	r2, 8001340 <_svfiprintf_r+0x5c>
 800133c:	2a25      	cmp	r2, #37	; 0x25
 800133e:	d1f9      	bne.n	8001334 <_svfiprintf_r+0x50>
 8001340:	ebba 0b04 	subs.w	fp, sl, r4
 8001344:	d00b      	beq.n	800135e <_svfiprintf_r+0x7a>
 8001346:	465b      	mov	r3, fp
 8001348:	4622      	mov	r2, r4
 800134a:	4629      	mov	r1, r5
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff ff6d 	bl	800122c <__ssputs_r>
 8001352:	3001      	adds	r0, #1
 8001354:	f000 80aa 	beq.w	80014ac <_svfiprintf_r+0x1c8>
 8001358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800135a:	445a      	add	r2, fp
 800135c:	9209      	str	r2, [sp, #36]	; 0x24
 800135e:	f89a 3000 	ldrb.w	r3, [sl]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80a2 	beq.w	80014ac <_svfiprintf_r+0x1c8>
 8001368:	2300      	movs	r3, #0
 800136a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800136e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001372:	f10a 0a01 	add.w	sl, sl, #1
 8001376:	9304      	str	r3, [sp, #16]
 8001378:	9307      	str	r3, [sp, #28]
 800137a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800137e:	931a      	str	r3, [sp, #104]	; 0x68
 8001380:	4654      	mov	r4, sl
 8001382:	2205      	movs	r2, #5
 8001384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001388:	4851      	ldr	r0, [pc, #324]	; (80014d0 <_svfiprintf_r+0x1ec>)
 800138a:	f7fe ff29 	bl	80001e0 <memchr>
 800138e:	9a04      	ldr	r2, [sp, #16]
 8001390:	b9d8      	cbnz	r0, 80013ca <_svfiprintf_r+0xe6>
 8001392:	06d0      	lsls	r0, r2, #27
 8001394:	bf44      	itt	mi
 8001396:	2320      	movmi	r3, #32
 8001398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800139c:	0711      	lsls	r1, r2, #28
 800139e:	bf44      	itt	mi
 80013a0:	232b      	movmi	r3, #43	; 0x2b
 80013a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013a6:	f89a 3000 	ldrb.w	r3, [sl]
 80013aa:	2b2a      	cmp	r3, #42	; 0x2a
 80013ac:	d015      	beq.n	80013da <_svfiprintf_r+0xf6>
 80013ae:	9a07      	ldr	r2, [sp, #28]
 80013b0:	4654      	mov	r4, sl
 80013b2:	2000      	movs	r0, #0
 80013b4:	f04f 0c0a 	mov.w	ip, #10
 80013b8:	4621      	mov	r1, r4
 80013ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013be:	3b30      	subs	r3, #48	; 0x30
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d94e      	bls.n	8001462 <_svfiprintf_r+0x17e>
 80013c4:	b1b0      	cbz	r0, 80013f4 <_svfiprintf_r+0x110>
 80013c6:	9207      	str	r2, [sp, #28]
 80013c8:	e014      	b.n	80013f4 <_svfiprintf_r+0x110>
 80013ca:	eba0 0308 	sub.w	r3, r0, r8
 80013ce:	fa09 f303 	lsl.w	r3, r9, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	46a2      	mov	sl, r4
 80013d8:	e7d2      	b.n	8001380 <_svfiprintf_r+0x9c>
 80013da:	9b03      	ldr	r3, [sp, #12]
 80013dc:	1d19      	adds	r1, r3, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	9103      	str	r1, [sp, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bfbb      	ittet	lt
 80013e6:	425b      	neglt	r3, r3
 80013e8:	f042 0202 	orrlt.w	r2, r2, #2
 80013ec:	9307      	strge	r3, [sp, #28]
 80013ee:	9307      	strlt	r3, [sp, #28]
 80013f0:	bfb8      	it	lt
 80013f2:	9204      	strlt	r2, [sp, #16]
 80013f4:	7823      	ldrb	r3, [r4, #0]
 80013f6:	2b2e      	cmp	r3, #46	; 0x2e
 80013f8:	d10c      	bne.n	8001414 <_svfiprintf_r+0x130>
 80013fa:	7863      	ldrb	r3, [r4, #1]
 80013fc:	2b2a      	cmp	r3, #42	; 0x2a
 80013fe:	d135      	bne.n	800146c <_svfiprintf_r+0x188>
 8001400:	9b03      	ldr	r3, [sp, #12]
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	9203      	str	r2, [sp, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bfb8      	it	lt
 800140c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001410:	3402      	adds	r4, #2
 8001412:	9305      	str	r3, [sp, #20]
 8001414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80014e0 <_svfiprintf_r+0x1fc>
 8001418:	7821      	ldrb	r1, [r4, #0]
 800141a:	2203      	movs	r2, #3
 800141c:	4650      	mov	r0, sl
 800141e:	f7fe fedf 	bl	80001e0 <memchr>
 8001422:	b140      	cbz	r0, 8001436 <_svfiprintf_r+0x152>
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	eba0 000a 	sub.w	r0, r0, sl
 800142a:	fa03 f000 	lsl.w	r0, r3, r0
 800142e:	9b04      	ldr	r3, [sp, #16]
 8001430:	4303      	orrs	r3, r0
 8001432:	3401      	adds	r4, #1
 8001434:	9304      	str	r3, [sp, #16]
 8001436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800143a:	4826      	ldr	r0, [pc, #152]	; (80014d4 <_svfiprintf_r+0x1f0>)
 800143c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001440:	2206      	movs	r2, #6
 8001442:	f7fe fecd 	bl	80001e0 <memchr>
 8001446:	2800      	cmp	r0, #0
 8001448:	d038      	beq.n	80014bc <_svfiprintf_r+0x1d8>
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <_svfiprintf_r+0x1f4>)
 800144c:	bb1b      	cbnz	r3, 8001496 <_svfiprintf_r+0x1b2>
 800144e:	9b03      	ldr	r3, [sp, #12]
 8001450:	3307      	adds	r3, #7
 8001452:	f023 0307 	bic.w	r3, r3, #7
 8001456:	3308      	adds	r3, #8
 8001458:	9303      	str	r3, [sp, #12]
 800145a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800145c:	4433      	add	r3, r6
 800145e:	9309      	str	r3, [sp, #36]	; 0x24
 8001460:	e767      	b.n	8001332 <_svfiprintf_r+0x4e>
 8001462:	fb0c 3202 	mla	r2, ip, r2, r3
 8001466:	460c      	mov	r4, r1
 8001468:	2001      	movs	r0, #1
 800146a:	e7a5      	b.n	80013b8 <_svfiprintf_r+0xd4>
 800146c:	2300      	movs	r3, #0
 800146e:	3401      	adds	r4, #1
 8001470:	9305      	str	r3, [sp, #20]
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 0c0a 	mov.w	ip, #10
 8001478:	4620      	mov	r0, r4
 800147a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800147e:	3a30      	subs	r2, #48	; 0x30
 8001480:	2a09      	cmp	r2, #9
 8001482:	d903      	bls.n	800148c <_svfiprintf_r+0x1a8>
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0c5      	beq.n	8001414 <_svfiprintf_r+0x130>
 8001488:	9105      	str	r1, [sp, #20]
 800148a:	e7c3      	b.n	8001414 <_svfiprintf_r+0x130>
 800148c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001490:	4604      	mov	r4, r0
 8001492:	2301      	movs	r3, #1
 8001494:	e7f0      	b.n	8001478 <_svfiprintf_r+0x194>
 8001496:	ab03      	add	r3, sp, #12
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	462a      	mov	r2, r5
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <_svfiprintf_r+0x1f8>)
 800149e:	a904      	add	r1, sp, #16
 80014a0:	4638      	mov	r0, r7
 80014a2:	f3af 8000 	nop.w
 80014a6:	1c42      	adds	r2, r0, #1
 80014a8:	4606      	mov	r6, r0
 80014aa:	d1d6      	bne.n	800145a <_svfiprintf_r+0x176>
 80014ac:	89ab      	ldrh	r3, [r5, #12]
 80014ae:	065b      	lsls	r3, r3, #25
 80014b0:	f53f af2c 	bmi.w	800130c <_svfiprintf_r+0x28>
 80014b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014b6:	b01d      	add	sp, #116	; 0x74
 80014b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014bc:	ab03      	add	r3, sp, #12
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	462a      	mov	r2, r5
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <_svfiprintf_r+0x1f8>)
 80014c4:	a904      	add	r1, sp, #16
 80014c6:	4638      	mov	r0, r7
 80014c8:	f000 f9d4 	bl	8001874 <_printf_i>
 80014cc:	e7eb      	b.n	80014a6 <_svfiprintf_r+0x1c2>
 80014ce:	bf00      	nop
 80014d0:	080023b4 	.word	0x080023b4
 80014d4:	080023be 	.word	0x080023be
 80014d8:	00000000 	.word	0x00000000
 80014dc:	0800122d 	.word	0x0800122d
 80014e0:	080023ba 	.word	0x080023ba

080014e4 <__sfputc_r>:
 80014e4:	6893      	ldr	r3, [r2, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	b410      	push	{r4}
 80014ec:	6093      	str	r3, [r2, #8]
 80014ee:	da08      	bge.n	8001502 <__sfputc_r+0x1e>
 80014f0:	6994      	ldr	r4, [r2, #24]
 80014f2:	42a3      	cmp	r3, r4
 80014f4:	db01      	blt.n	80014fa <__sfputc_r+0x16>
 80014f6:	290a      	cmp	r1, #10
 80014f8:	d103      	bne.n	8001502 <__sfputc_r+0x1e>
 80014fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014fe:	f000 bb33 	b.w	8001b68 <__swbuf_r>
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	1c58      	adds	r0, r3, #1
 8001506:	6010      	str	r0, [r2, #0]
 8001508:	7019      	strb	r1, [r3, #0]
 800150a:	4608      	mov	r0, r1
 800150c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001510:	4770      	bx	lr

08001512 <__sfputs_r>:
 8001512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001514:	4606      	mov	r6, r0
 8001516:	460f      	mov	r7, r1
 8001518:	4614      	mov	r4, r2
 800151a:	18d5      	adds	r5, r2, r3
 800151c:	42ac      	cmp	r4, r5
 800151e:	d101      	bne.n	8001524 <__sfputs_r+0x12>
 8001520:	2000      	movs	r0, #0
 8001522:	e007      	b.n	8001534 <__sfputs_r+0x22>
 8001524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001528:	463a      	mov	r2, r7
 800152a:	4630      	mov	r0, r6
 800152c:	f7ff ffda 	bl	80014e4 <__sfputc_r>
 8001530:	1c43      	adds	r3, r0, #1
 8001532:	d1f3      	bne.n	800151c <__sfputs_r+0xa>
 8001534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001538 <_vfiprintf_r>:
 8001538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800153c:	460d      	mov	r5, r1
 800153e:	b09d      	sub	sp, #116	; 0x74
 8001540:	4614      	mov	r4, r2
 8001542:	4698      	mov	r8, r3
 8001544:	4606      	mov	r6, r0
 8001546:	b118      	cbz	r0, 8001550 <_vfiprintf_r+0x18>
 8001548:	6983      	ldr	r3, [r0, #24]
 800154a:	b90b      	cbnz	r3, 8001550 <_vfiprintf_r+0x18>
 800154c:	f7ff fd3a 	bl	8000fc4 <__sinit>
 8001550:	4b89      	ldr	r3, [pc, #548]	; (8001778 <_vfiprintf_r+0x240>)
 8001552:	429d      	cmp	r5, r3
 8001554:	d11b      	bne.n	800158e <_vfiprintf_r+0x56>
 8001556:	6875      	ldr	r5, [r6, #4]
 8001558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800155a:	07d9      	lsls	r1, r3, #31
 800155c:	d405      	bmi.n	800156a <_vfiprintf_r+0x32>
 800155e:	89ab      	ldrh	r3, [r5, #12]
 8001560:	059a      	lsls	r2, r3, #22
 8001562:	d402      	bmi.n	800156a <_vfiprintf_r+0x32>
 8001564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001566:	f7ff fdcb 	bl	8001100 <__retarget_lock_acquire_recursive>
 800156a:	89ab      	ldrh	r3, [r5, #12]
 800156c:	071b      	lsls	r3, r3, #28
 800156e:	d501      	bpl.n	8001574 <_vfiprintf_r+0x3c>
 8001570:	692b      	ldr	r3, [r5, #16]
 8001572:	b9eb      	cbnz	r3, 80015b0 <_vfiprintf_r+0x78>
 8001574:	4629      	mov	r1, r5
 8001576:	4630      	mov	r0, r6
 8001578:	f000 fb5a 	bl	8001c30 <__swsetup_r>
 800157c:	b1c0      	cbz	r0, 80015b0 <_vfiprintf_r+0x78>
 800157e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001580:	07dc      	lsls	r4, r3, #31
 8001582:	d50e      	bpl.n	80015a2 <_vfiprintf_r+0x6a>
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	b01d      	add	sp, #116	; 0x74
 800158a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800158e:	4b7b      	ldr	r3, [pc, #492]	; (800177c <_vfiprintf_r+0x244>)
 8001590:	429d      	cmp	r5, r3
 8001592:	d101      	bne.n	8001598 <_vfiprintf_r+0x60>
 8001594:	68b5      	ldr	r5, [r6, #8]
 8001596:	e7df      	b.n	8001558 <_vfiprintf_r+0x20>
 8001598:	4b79      	ldr	r3, [pc, #484]	; (8001780 <_vfiprintf_r+0x248>)
 800159a:	429d      	cmp	r5, r3
 800159c:	bf08      	it	eq
 800159e:	68f5      	ldreq	r5, [r6, #12]
 80015a0:	e7da      	b.n	8001558 <_vfiprintf_r+0x20>
 80015a2:	89ab      	ldrh	r3, [r5, #12]
 80015a4:	0598      	lsls	r0, r3, #22
 80015a6:	d4ed      	bmi.n	8001584 <_vfiprintf_r+0x4c>
 80015a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015aa:	f7ff fdaa 	bl	8001102 <__retarget_lock_release_recursive>
 80015ae:	e7e9      	b.n	8001584 <_vfiprintf_r+0x4c>
 80015b0:	2300      	movs	r3, #0
 80015b2:	9309      	str	r3, [sp, #36]	; 0x24
 80015b4:	2320      	movs	r3, #32
 80015b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80015be:	2330      	movs	r3, #48	; 0x30
 80015c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001784 <_vfiprintf_r+0x24c>
 80015c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015c8:	f04f 0901 	mov.w	r9, #1
 80015cc:	4623      	mov	r3, r4
 80015ce:	469a      	mov	sl, r3
 80015d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015d4:	b10a      	cbz	r2, 80015da <_vfiprintf_r+0xa2>
 80015d6:	2a25      	cmp	r2, #37	; 0x25
 80015d8:	d1f9      	bne.n	80015ce <_vfiprintf_r+0x96>
 80015da:	ebba 0b04 	subs.w	fp, sl, r4
 80015de:	d00b      	beq.n	80015f8 <_vfiprintf_r+0xc0>
 80015e0:	465b      	mov	r3, fp
 80015e2:	4622      	mov	r2, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	4630      	mov	r0, r6
 80015e8:	f7ff ff93 	bl	8001512 <__sfputs_r>
 80015ec:	3001      	adds	r0, #1
 80015ee:	f000 80aa 	beq.w	8001746 <_vfiprintf_r+0x20e>
 80015f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015f4:	445a      	add	r2, fp
 80015f6:	9209      	str	r2, [sp, #36]	; 0x24
 80015f8:	f89a 3000 	ldrb.w	r3, [sl]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a2 	beq.w	8001746 <_vfiprintf_r+0x20e>
 8001602:	2300      	movs	r3, #0
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800160c:	f10a 0a01 	add.w	sl, sl, #1
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	9307      	str	r3, [sp, #28]
 8001614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001618:	931a      	str	r3, [sp, #104]	; 0x68
 800161a:	4654      	mov	r4, sl
 800161c:	2205      	movs	r2, #5
 800161e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001622:	4858      	ldr	r0, [pc, #352]	; (8001784 <_vfiprintf_r+0x24c>)
 8001624:	f7fe fddc 	bl	80001e0 <memchr>
 8001628:	9a04      	ldr	r2, [sp, #16]
 800162a:	b9d8      	cbnz	r0, 8001664 <_vfiprintf_r+0x12c>
 800162c:	06d1      	lsls	r1, r2, #27
 800162e:	bf44      	itt	mi
 8001630:	2320      	movmi	r3, #32
 8001632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001636:	0713      	lsls	r3, r2, #28
 8001638:	bf44      	itt	mi
 800163a:	232b      	movmi	r3, #43	; 0x2b
 800163c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001640:	f89a 3000 	ldrb.w	r3, [sl]
 8001644:	2b2a      	cmp	r3, #42	; 0x2a
 8001646:	d015      	beq.n	8001674 <_vfiprintf_r+0x13c>
 8001648:	9a07      	ldr	r2, [sp, #28]
 800164a:	4654      	mov	r4, sl
 800164c:	2000      	movs	r0, #0
 800164e:	f04f 0c0a 	mov.w	ip, #10
 8001652:	4621      	mov	r1, r4
 8001654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001658:	3b30      	subs	r3, #48	; 0x30
 800165a:	2b09      	cmp	r3, #9
 800165c:	d94e      	bls.n	80016fc <_vfiprintf_r+0x1c4>
 800165e:	b1b0      	cbz	r0, 800168e <_vfiprintf_r+0x156>
 8001660:	9207      	str	r2, [sp, #28]
 8001662:	e014      	b.n	800168e <_vfiprintf_r+0x156>
 8001664:	eba0 0308 	sub.w	r3, r0, r8
 8001668:	fa09 f303 	lsl.w	r3, r9, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	9304      	str	r3, [sp, #16]
 8001670:	46a2      	mov	sl, r4
 8001672:	e7d2      	b.n	800161a <_vfiprintf_r+0xe2>
 8001674:	9b03      	ldr	r3, [sp, #12]
 8001676:	1d19      	adds	r1, r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	9103      	str	r1, [sp, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	bfbb      	ittet	lt
 8001680:	425b      	neglt	r3, r3
 8001682:	f042 0202 	orrlt.w	r2, r2, #2
 8001686:	9307      	strge	r3, [sp, #28]
 8001688:	9307      	strlt	r3, [sp, #28]
 800168a:	bfb8      	it	lt
 800168c:	9204      	strlt	r2, [sp, #16]
 800168e:	7823      	ldrb	r3, [r4, #0]
 8001690:	2b2e      	cmp	r3, #46	; 0x2e
 8001692:	d10c      	bne.n	80016ae <_vfiprintf_r+0x176>
 8001694:	7863      	ldrb	r3, [r4, #1]
 8001696:	2b2a      	cmp	r3, #42	; 0x2a
 8001698:	d135      	bne.n	8001706 <_vfiprintf_r+0x1ce>
 800169a:	9b03      	ldr	r3, [sp, #12]
 800169c:	1d1a      	adds	r2, r3, #4
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	9203      	str	r2, [sp, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bfb8      	it	lt
 80016a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80016aa:	3402      	adds	r4, #2
 80016ac:	9305      	str	r3, [sp, #20]
 80016ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001794 <_vfiprintf_r+0x25c>
 80016b2:	7821      	ldrb	r1, [r4, #0]
 80016b4:	2203      	movs	r2, #3
 80016b6:	4650      	mov	r0, sl
 80016b8:	f7fe fd92 	bl	80001e0 <memchr>
 80016bc:	b140      	cbz	r0, 80016d0 <_vfiprintf_r+0x198>
 80016be:	2340      	movs	r3, #64	; 0x40
 80016c0:	eba0 000a 	sub.w	r0, r0, sl
 80016c4:	fa03 f000 	lsl.w	r0, r3, r0
 80016c8:	9b04      	ldr	r3, [sp, #16]
 80016ca:	4303      	orrs	r3, r0
 80016cc:	3401      	adds	r4, #1
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016d4:	482c      	ldr	r0, [pc, #176]	; (8001788 <_vfiprintf_r+0x250>)
 80016d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016da:	2206      	movs	r2, #6
 80016dc:	f7fe fd80 	bl	80001e0 <memchr>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d03f      	beq.n	8001764 <_vfiprintf_r+0x22c>
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <_vfiprintf_r+0x254>)
 80016e6:	bb1b      	cbnz	r3, 8001730 <_vfiprintf_r+0x1f8>
 80016e8:	9b03      	ldr	r3, [sp, #12]
 80016ea:	3307      	adds	r3, #7
 80016ec:	f023 0307 	bic.w	r3, r3, #7
 80016f0:	3308      	adds	r3, #8
 80016f2:	9303      	str	r3, [sp, #12]
 80016f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016f6:	443b      	add	r3, r7
 80016f8:	9309      	str	r3, [sp, #36]	; 0x24
 80016fa:	e767      	b.n	80015cc <_vfiprintf_r+0x94>
 80016fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001700:	460c      	mov	r4, r1
 8001702:	2001      	movs	r0, #1
 8001704:	e7a5      	b.n	8001652 <_vfiprintf_r+0x11a>
 8001706:	2300      	movs	r3, #0
 8001708:	3401      	adds	r4, #1
 800170a:	9305      	str	r3, [sp, #20]
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 0c0a 	mov.w	ip, #10
 8001712:	4620      	mov	r0, r4
 8001714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001718:	3a30      	subs	r2, #48	; 0x30
 800171a:	2a09      	cmp	r2, #9
 800171c:	d903      	bls.n	8001726 <_vfiprintf_r+0x1ee>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0c5      	beq.n	80016ae <_vfiprintf_r+0x176>
 8001722:	9105      	str	r1, [sp, #20]
 8001724:	e7c3      	b.n	80016ae <_vfiprintf_r+0x176>
 8001726:	fb0c 2101 	mla	r1, ip, r1, r2
 800172a:	4604      	mov	r4, r0
 800172c:	2301      	movs	r3, #1
 800172e:	e7f0      	b.n	8001712 <_vfiprintf_r+0x1da>
 8001730:	ab03      	add	r3, sp, #12
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	462a      	mov	r2, r5
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <_vfiprintf_r+0x258>)
 8001738:	a904      	add	r1, sp, #16
 800173a:	4630      	mov	r0, r6
 800173c:	f3af 8000 	nop.w
 8001740:	4607      	mov	r7, r0
 8001742:	1c78      	adds	r0, r7, #1
 8001744:	d1d6      	bne.n	80016f4 <_vfiprintf_r+0x1bc>
 8001746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001748:	07d9      	lsls	r1, r3, #31
 800174a:	d405      	bmi.n	8001758 <_vfiprintf_r+0x220>
 800174c:	89ab      	ldrh	r3, [r5, #12]
 800174e:	059a      	lsls	r2, r3, #22
 8001750:	d402      	bmi.n	8001758 <_vfiprintf_r+0x220>
 8001752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001754:	f7ff fcd5 	bl	8001102 <__retarget_lock_release_recursive>
 8001758:	89ab      	ldrh	r3, [r5, #12]
 800175a:	065b      	lsls	r3, r3, #25
 800175c:	f53f af12 	bmi.w	8001584 <_vfiprintf_r+0x4c>
 8001760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001762:	e711      	b.n	8001588 <_vfiprintf_r+0x50>
 8001764:	ab03      	add	r3, sp, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	462a      	mov	r2, r5
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <_vfiprintf_r+0x258>)
 800176c:	a904      	add	r1, sp, #16
 800176e:	4630      	mov	r0, r6
 8001770:	f000 f880 	bl	8001874 <_printf_i>
 8001774:	e7e4      	b.n	8001740 <_vfiprintf_r+0x208>
 8001776:	bf00      	nop
 8001778:	08002374 	.word	0x08002374
 800177c:	08002394 	.word	0x08002394
 8001780:	08002354 	.word	0x08002354
 8001784:	080023b4 	.word	0x080023b4
 8001788:	080023be 	.word	0x080023be
 800178c:	00000000 	.word	0x00000000
 8001790:	08001513 	.word	0x08001513
 8001794:	080023ba 	.word	0x080023ba

08001798 <_printf_common>:
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	4616      	mov	r6, r2
 800179e:	4699      	mov	r9, r3
 80017a0:	688a      	ldr	r2, [r1, #8]
 80017a2:	690b      	ldr	r3, [r1, #16]
 80017a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bfb8      	it	lt
 80017ac:	4613      	movlt	r3, r2
 80017ae:	6033      	str	r3, [r6, #0]
 80017b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017b4:	4607      	mov	r7, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	b10a      	cbz	r2, 80017be <_printf_common+0x26>
 80017ba:	3301      	adds	r3, #1
 80017bc:	6033      	str	r3, [r6, #0]
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	0699      	lsls	r1, r3, #26
 80017c2:	bf42      	ittt	mi
 80017c4:	6833      	ldrmi	r3, [r6, #0]
 80017c6:	3302      	addmi	r3, #2
 80017c8:	6033      	strmi	r3, [r6, #0]
 80017ca:	6825      	ldr	r5, [r4, #0]
 80017cc:	f015 0506 	ands.w	r5, r5, #6
 80017d0:	d106      	bne.n	80017e0 <_printf_common+0x48>
 80017d2:	f104 0a19 	add.w	sl, r4, #25
 80017d6:	68e3      	ldr	r3, [r4, #12]
 80017d8:	6832      	ldr	r2, [r6, #0]
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	42ab      	cmp	r3, r5
 80017de:	dc26      	bgt.n	800182e <_printf_common+0x96>
 80017e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017e4:	1e13      	subs	r3, r2, #0
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	bf18      	it	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	0692      	lsls	r2, r2, #26
 80017ee:	d42b      	bmi.n	8001848 <_printf_common+0xb0>
 80017f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017f4:	4649      	mov	r1, r9
 80017f6:	4638      	mov	r0, r7
 80017f8:	47c0      	blx	r8
 80017fa:	3001      	adds	r0, #1
 80017fc:	d01e      	beq.n	800183c <_printf_common+0xa4>
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	68e5      	ldr	r5, [r4, #12]
 8001802:	6832      	ldr	r2, [r6, #0]
 8001804:	f003 0306 	and.w	r3, r3, #6
 8001808:	2b04      	cmp	r3, #4
 800180a:	bf08      	it	eq
 800180c:	1aad      	subeq	r5, r5, r2
 800180e:	68a3      	ldr	r3, [r4, #8]
 8001810:	6922      	ldr	r2, [r4, #16]
 8001812:	bf0c      	ite	eq
 8001814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001818:	2500      	movne	r5, #0
 800181a:	4293      	cmp	r3, r2
 800181c:	bfc4      	itt	gt
 800181e:	1a9b      	subgt	r3, r3, r2
 8001820:	18ed      	addgt	r5, r5, r3
 8001822:	2600      	movs	r6, #0
 8001824:	341a      	adds	r4, #26
 8001826:	42b5      	cmp	r5, r6
 8001828:	d11a      	bne.n	8001860 <_printf_common+0xc8>
 800182a:	2000      	movs	r0, #0
 800182c:	e008      	b.n	8001840 <_printf_common+0xa8>
 800182e:	2301      	movs	r3, #1
 8001830:	4652      	mov	r2, sl
 8001832:	4649      	mov	r1, r9
 8001834:	4638      	mov	r0, r7
 8001836:	47c0      	blx	r8
 8001838:	3001      	adds	r0, #1
 800183a:	d103      	bne.n	8001844 <_printf_common+0xac>
 800183c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001844:	3501      	adds	r5, #1
 8001846:	e7c6      	b.n	80017d6 <_printf_common+0x3e>
 8001848:	18e1      	adds	r1, r4, r3
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	2030      	movs	r0, #48	; 0x30
 800184e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001852:	4422      	add	r2, r4
 8001854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800185c:	3302      	adds	r3, #2
 800185e:	e7c7      	b.n	80017f0 <_printf_common+0x58>
 8001860:	2301      	movs	r3, #1
 8001862:	4622      	mov	r2, r4
 8001864:	4649      	mov	r1, r9
 8001866:	4638      	mov	r0, r7
 8001868:	47c0      	blx	r8
 800186a:	3001      	adds	r0, #1
 800186c:	d0e6      	beq.n	800183c <_printf_common+0xa4>
 800186e:	3601      	adds	r6, #1
 8001870:	e7d9      	b.n	8001826 <_printf_common+0x8e>
	...

08001874 <_printf_i>:
 8001874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001878:	7e0f      	ldrb	r7, [r1, #24]
 800187a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800187c:	2f78      	cmp	r7, #120	; 0x78
 800187e:	4691      	mov	r9, r2
 8001880:	4680      	mov	r8, r0
 8001882:	460c      	mov	r4, r1
 8001884:	469a      	mov	sl, r3
 8001886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800188a:	d807      	bhi.n	800189c <_printf_i+0x28>
 800188c:	2f62      	cmp	r7, #98	; 0x62
 800188e:	d80a      	bhi.n	80018a6 <_printf_i+0x32>
 8001890:	2f00      	cmp	r7, #0
 8001892:	f000 80d8 	beq.w	8001a46 <_printf_i+0x1d2>
 8001896:	2f58      	cmp	r7, #88	; 0x58
 8001898:	f000 80a3 	beq.w	80019e2 <_printf_i+0x16e>
 800189c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80018a4:	e03a      	b.n	800191c <_printf_i+0xa8>
 80018a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80018aa:	2b15      	cmp	r3, #21
 80018ac:	d8f6      	bhi.n	800189c <_printf_i+0x28>
 80018ae:	a101      	add	r1, pc, #4	; (adr r1, 80018b4 <_printf_i+0x40>)
 80018b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018b4:	0800190d 	.word	0x0800190d
 80018b8:	08001921 	.word	0x08001921
 80018bc:	0800189d 	.word	0x0800189d
 80018c0:	0800189d 	.word	0x0800189d
 80018c4:	0800189d 	.word	0x0800189d
 80018c8:	0800189d 	.word	0x0800189d
 80018cc:	08001921 	.word	0x08001921
 80018d0:	0800189d 	.word	0x0800189d
 80018d4:	0800189d 	.word	0x0800189d
 80018d8:	0800189d 	.word	0x0800189d
 80018dc:	0800189d 	.word	0x0800189d
 80018e0:	08001a2d 	.word	0x08001a2d
 80018e4:	08001951 	.word	0x08001951
 80018e8:	08001a0f 	.word	0x08001a0f
 80018ec:	0800189d 	.word	0x0800189d
 80018f0:	0800189d 	.word	0x0800189d
 80018f4:	08001a4f 	.word	0x08001a4f
 80018f8:	0800189d 	.word	0x0800189d
 80018fc:	08001951 	.word	0x08001951
 8001900:	0800189d 	.word	0x0800189d
 8001904:	0800189d 	.word	0x0800189d
 8001908:	08001a17 	.word	0x08001a17
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	602a      	str	r2, [r5, #0]
 8001914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800191c:	2301      	movs	r3, #1
 800191e:	e0a3      	b.n	8001a68 <_printf_i+0x1f4>
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	6829      	ldr	r1, [r5, #0]
 8001924:	0606      	lsls	r6, r0, #24
 8001926:	f101 0304 	add.w	r3, r1, #4
 800192a:	d50a      	bpl.n	8001942 <_printf_i+0xce>
 800192c:	680e      	ldr	r6, [r1, #0]
 800192e:	602b      	str	r3, [r5, #0]
 8001930:	2e00      	cmp	r6, #0
 8001932:	da03      	bge.n	800193c <_printf_i+0xc8>
 8001934:	232d      	movs	r3, #45	; 0x2d
 8001936:	4276      	negs	r6, r6
 8001938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800193c:	485e      	ldr	r0, [pc, #376]	; (8001ab8 <_printf_i+0x244>)
 800193e:	230a      	movs	r3, #10
 8001940:	e019      	b.n	8001976 <_printf_i+0x102>
 8001942:	680e      	ldr	r6, [r1, #0]
 8001944:	602b      	str	r3, [r5, #0]
 8001946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800194a:	bf18      	it	ne
 800194c:	b236      	sxthne	r6, r6
 800194e:	e7ef      	b.n	8001930 <_printf_i+0xbc>
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	6820      	ldr	r0, [r4, #0]
 8001954:	1d19      	adds	r1, r3, #4
 8001956:	6029      	str	r1, [r5, #0]
 8001958:	0601      	lsls	r1, r0, #24
 800195a:	d501      	bpl.n	8001960 <_printf_i+0xec>
 800195c:	681e      	ldr	r6, [r3, #0]
 800195e:	e002      	b.n	8001966 <_printf_i+0xf2>
 8001960:	0646      	lsls	r6, r0, #25
 8001962:	d5fb      	bpl.n	800195c <_printf_i+0xe8>
 8001964:	881e      	ldrh	r6, [r3, #0]
 8001966:	4854      	ldr	r0, [pc, #336]	; (8001ab8 <_printf_i+0x244>)
 8001968:	2f6f      	cmp	r7, #111	; 0x6f
 800196a:	bf0c      	ite	eq
 800196c:	2308      	moveq	r3, #8
 800196e:	230a      	movne	r3, #10
 8001970:	2100      	movs	r1, #0
 8001972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001976:	6865      	ldr	r5, [r4, #4]
 8001978:	60a5      	str	r5, [r4, #8]
 800197a:	2d00      	cmp	r5, #0
 800197c:	bfa2      	ittt	ge
 800197e:	6821      	ldrge	r1, [r4, #0]
 8001980:	f021 0104 	bicge.w	r1, r1, #4
 8001984:	6021      	strge	r1, [r4, #0]
 8001986:	b90e      	cbnz	r6, 800198c <_printf_i+0x118>
 8001988:	2d00      	cmp	r5, #0
 800198a:	d04d      	beq.n	8001a28 <_printf_i+0x1b4>
 800198c:	4615      	mov	r5, r2
 800198e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001992:	fb03 6711 	mls	r7, r3, r1, r6
 8001996:	5dc7      	ldrb	r7, [r0, r7]
 8001998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800199c:	4637      	mov	r7, r6
 800199e:	42bb      	cmp	r3, r7
 80019a0:	460e      	mov	r6, r1
 80019a2:	d9f4      	bls.n	800198e <_printf_i+0x11a>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d10b      	bne.n	80019c0 <_printf_i+0x14c>
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	07de      	lsls	r6, r3, #31
 80019ac:	d508      	bpl.n	80019c0 <_printf_i+0x14c>
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	6861      	ldr	r1, [r4, #4]
 80019b2:	4299      	cmp	r1, r3
 80019b4:	bfde      	ittt	le
 80019b6:	2330      	movle	r3, #48	; 0x30
 80019b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80019bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80019c0:	1b52      	subs	r2, r2, r5
 80019c2:	6122      	str	r2, [r4, #16]
 80019c4:	f8cd a000 	str.w	sl, [sp]
 80019c8:	464b      	mov	r3, r9
 80019ca:	aa03      	add	r2, sp, #12
 80019cc:	4621      	mov	r1, r4
 80019ce:	4640      	mov	r0, r8
 80019d0:	f7ff fee2 	bl	8001798 <_printf_common>
 80019d4:	3001      	adds	r0, #1
 80019d6:	d14c      	bne.n	8001a72 <_printf_i+0x1fe>
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	b004      	add	sp, #16
 80019de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e2:	4835      	ldr	r0, [pc, #212]	; (8001ab8 <_printf_i+0x244>)
 80019e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80019e8:	6829      	ldr	r1, [r5, #0]
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80019f0:	6029      	str	r1, [r5, #0]
 80019f2:	061d      	lsls	r5, r3, #24
 80019f4:	d514      	bpl.n	8001a20 <_printf_i+0x1ac>
 80019f6:	07df      	lsls	r7, r3, #31
 80019f8:	bf44      	itt	mi
 80019fa:	f043 0320 	orrmi.w	r3, r3, #32
 80019fe:	6023      	strmi	r3, [r4, #0]
 8001a00:	b91e      	cbnz	r6, 8001a0a <_printf_i+0x196>
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	f023 0320 	bic.w	r3, r3, #32
 8001a08:	6023      	str	r3, [r4, #0]
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	e7b0      	b.n	8001970 <_printf_i+0xfc>
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	2378      	movs	r3, #120	; 0x78
 8001a18:	4828      	ldr	r0, [pc, #160]	; (8001abc <_printf_i+0x248>)
 8001a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a1e:	e7e3      	b.n	80019e8 <_printf_i+0x174>
 8001a20:	0659      	lsls	r1, r3, #25
 8001a22:	bf48      	it	mi
 8001a24:	b2b6      	uxthmi	r6, r6
 8001a26:	e7e6      	b.n	80019f6 <_printf_i+0x182>
 8001a28:	4615      	mov	r5, r2
 8001a2a:	e7bb      	b.n	80019a4 <_printf_i+0x130>
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	6826      	ldr	r6, [r4, #0]
 8001a30:	6961      	ldr	r1, [r4, #20]
 8001a32:	1d18      	adds	r0, r3, #4
 8001a34:	6028      	str	r0, [r5, #0]
 8001a36:	0635      	lsls	r5, r6, #24
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	d501      	bpl.n	8001a40 <_printf_i+0x1cc>
 8001a3c:	6019      	str	r1, [r3, #0]
 8001a3e:	e002      	b.n	8001a46 <_printf_i+0x1d2>
 8001a40:	0670      	lsls	r0, r6, #25
 8001a42:	d5fb      	bpl.n	8001a3c <_printf_i+0x1c8>
 8001a44:	8019      	strh	r1, [r3, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	6123      	str	r3, [r4, #16]
 8001a4a:	4615      	mov	r5, r2
 8001a4c:	e7ba      	b.n	80019c4 <_printf_i+0x150>
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	1d1a      	adds	r2, r3, #4
 8001a52:	602a      	str	r2, [r5, #0]
 8001a54:	681d      	ldr	r5, [r3, #0]
 8001a56:	6862      	ldr	r2, [r4, #4]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f7fe fbc0 	bl	80001e0 <memchr>
 8001a60:	b108      	cbz	r0, 8001a66 <_printf_i+0x1f2>
 8001a62:	1b40      	subs	r0, r0, r5
 8001a64:	6060      	str	r0, [r4, #4]
 8001a66:	6863      	ldr	r3, [r4, #4]
 8001a68:	6123      	str	r3, [r4, #16]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a70:	e7a8      	b.n	80019c4 <_printf_i+0x150>
 8001a72:	6923      	ldr	r3, [r4, #16]
 8001a74:	462a      	mov	r2, r5
 8001a76:	4649      	mov	r1, r9
 8001a78:	4640      	mov	r0, r8
 8001a7a:	47d0      	blx	sl
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d0ab      	beq.n	80019d8 <_printf_i+0x164>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	079b      	lsls	r3, r3, #30
 8001a84:	d413      	bmi.n	8001aae <_printf_i+0x23a>
 8001a86:	68e0      	ldr	r0, [r4, #12]
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	4298      	cmp	r0, r3
 8001a8c:	bfb8      	it	lt
 8001a8e:	4618      	movlt	r0, r3
 8001a90:	e7a4      	b.n	80019dc <_printf_i+0x168>
 8001a92:	2301      	movs	r3, #1
 8001a94:	4632      	mov	r2, r6
 8001a96:	4649      	mov	r1, r9
 8001a98:	4640      	mov	r0, r8
 8001a9a:	47d0      	blx	sl
 8001a9c:	3001      	adds	r0, #1
 8001a9e:	d09b      	beq.n	80019d8 <_printf_i+0x164>
 8001aa0:	3501      	adds	r5, #1
 8001aa2:	68e3      	ldr	r3, [r4, #12]
 8001aa4:	9903      	ldr	r1, [sp, #12]
 8001aa6:	1a5b      	subs	r3, r3, r1
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	dcf2      	bgt.n	8001a92 <_printf_i+0x21e>
 8001aac:	e7eb      	b.n	8001a86 <_printf_i+0x212>
 8001aae:	2500      	movs	r5, #0
 8001ab0:	f104 0619 	add.w	r6, r4, #25
 8001ab4:	e7f5      	b.n	8001aa2 <_printf_i+0x22e>
 8001ab6:	bf00      	nop
 8001ab8:	080023c5 	.word	0x080023c5
 8001abc:	080023d6 	.word	0x080023d6

08001ac0 <_sbrk_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4d06      	ldr	r5, [pc, #24]	; (8001adc <_sbrk_r+0x1c>)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4608      	mov	r0, r1
 8001aca:	602b      	str	r3, [r5, #0]
 8001acc:	f7ff f950 	bl	8000d70 <_sbrk>
 8001ad0:	1c43      	adds	r3, r0, #1
 8001ad2:	d102      	bne.n	8001ada <_sbrk_r+0x1a>
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	b103      	cbz	r3, 8001ada <_sbrk_r+0x1a>
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	bd38      	pop	{r3, r4, r5, pc}
 8001adc:	20000ce8 	.word	0x20000ce8

08001ae0 <__sread>:
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae8:	f000 fb0a 	bl	8002100 <_read_r>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	bfab      	itete	ge
 8001af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001af2:	89a3      	ldrhlt	r3, [r4, #12]
 8001af4:	181b      	addge	r3, r3, r0
 8001af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001afa:	bfac      	ite	ge
 8001afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001afe:	81a3      	strhlt	r3, [r4, #12]
 8001b00:	bd10      	pop	{r4, pc}

08001b02 <__swrite>:
 8001b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b06:	461f      	mov	r7, r3
 8001b08:	898b      	ldrh	r3, [r1, #12]
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	4605      	mov	r5, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	4616      	mov	r6, r2
 8001b12:	d505      	bpl.n	8001b20 <__swrite+0x1e>
 8001b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f000 f9c8 	bl	8001eb0 <_lseek_r>
 8001b20:	89a3      	ldrh	r3, [r4, #12]
 8001b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b2a:	81a3      	strh	r3, [r4, #12]
 8001b2c:	4632      	mov	r2, r6
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4628      	mov	r0, r5
 8001b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	f000 b869 	b.w	8001c0c <_write_r>

08001b3a <__sseek>:
 8001b3a:	b510      	push	{r4, lr}
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b42:	f000 f9b5 	bl	8001eb0 <_lseek_r>
 8001b46:	1c43      	adds	r3, r0, #1
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	bf15      	itete	ne
 8001b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b56:	81a3      	strheq	r3, [r4, #12]
 8001b58:	bf18      	it	ne
 8001b5a:	81a3      	strhne	r3, [r4, #12]
 8001b5c:	bd10      	pop	{r4, pc}

08001b5e <__sclose>:
 8001b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b62:	f000 b8d3 	b.w	8001d0c <_close_r>
	...

08001b68 <__swbuf_r>:
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	460e      	mov	r6, r1
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	4605      	mov	r5, r0
 8001b70:	b118      	cbz	r0, 8001b7a <__swbuf_r+0x12>
 8001b72:	6983      	ldr	r3, [r0, #24]
 8001b74:	b90b      	cbnz	r3, 8001b7a <__swbuf_r+0x12>
 8001b76:	f7ff fa25 	bl	8000fc4 <__sinit>
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <__swbuf_r+0x98>)
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	d12b      	bne.n	8001bd8 <__swbuf_r+0x70>
 8001b80:	686c      	ldr	r4, [r5, #4]
 8001b82:	69a3      	ldr	r3, [r4, #24]
 8001b84:	60a3      	str	r3, [r4, #8]
 8001b86:	89a3      	ldrh	r3, [r4, #12]
 8001b88:	071a      	lsls	r2, r3, #28
 8001b8a:	d52f      	bpl.n	8001bec <__swbuf_r+0x84>
 8001b8c:	6923      	ldr	r3, [r4, #16]
 8001b8e:	b36b      	cbz	r3, 8001bec <__swbuf_r+0x84>
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	6820      	ldr	r0, [r4, #0]
 8001b94:	1ac0      	subs	r0, r0, r3
 8001b96:	6963      	ldr	r3, [r4, #20]
 8001b98:	b2f6      	uxtb	r6, r6
 8001b9a:	4283      	cmp	r3, r0
 8001b9c:	4637      	mov	r7, r6
 8001b9e:	dc04      	bgt.n	8001baa <__swbuf_r+0x42>
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 f948 	bl	8001e38 <_fflush_r>
 8001ba8:	bb30      	cbnz	r0, 8001bf8 <__swbuf_r+0x90>
 8001baa:	68a3      	ldr	r3, [r4, #8]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	60a3      	str	r3, [r4, #8]
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	6022      	str	r2, [r4, #0]
 8001bb6:	701e      	strb	r6, [r3, #0]
 8001bb8:	6963      	ldr	r3, [r4, #20]
 8001bba:	3001      	adds	r0, #1
 8001bbc:	4283      	cmp	r3, r0
 8001bbe:	d004      	beq.n	8001bca <__swbuf_r+0x62>
 8001bc0:	89a3      	ldrh	r3, [r4, #12]
 8001bc2:	07db      	lsls	r3, r3, #31
 8001bc4:	d506      	bpl.n	8001bd4 <__swbuf_r+0x6c>
 8001bc6:	2e0a      	cmp	r6, #10
 8001bc8:	d104      	bne.n	8001bd4 <__swbuf_r+0x6c>
 8001bca:	4621      	mov	r1, r4
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f000 f933 	bl	8001e38 <_fflush_r>
 8001bd2:	b988      	cbnz	r0, 8001bf8 <__swbuf_r+0x90>
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <__swbuf_r+0x9c>)
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	d101      	bne.n	8001be2 <__swbuf_r+0x7a>
 8001bde:	68ac      	ldr	r4, [r5, #8]
 8001be0:	e7cf      	b.n	8001b82 <__swbuf_r+0x1a>
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <__swbuf_r+0xa0>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	bf08      	it	eq
 8001be8:	68ec      	ldreq	r4, [r5, #12]
 8001bea:	e7ca      	b.n	8001b82 <__swbuf_r+0x1a>
 8001bec:	4621      	mov	r1, r4
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f000 f81e 	bl	8001c30 <__swsetup_r>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d0cb      	beq.n	8001b90 <__swbuf_r+0x28>
 8001bf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001bfc:	e7ea      	b.n	8001bd4 <__swbuf_r+0x6c>
 8001bfe:	bf00      	nop
 8001c00:	08002374 	.word	0x08002374
 8001c04:	08002394 	.word	0x08002394
 8001c08:	08002354 	.word	0x08002354

08001c0c <_write_r>:
 8001c0c:	b538      	push	{r3, r4, r5, lr}
 8001c0e:	4d07      	ldr	r5, [pc, #28]	; (8001c2c <_write_r+0x20>)
 8001c10:	4604      	mov	r4, r0
 8001c12:	4608      	mov	r0, r1
 8001c14:	4611      	mov	r1, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	602a      	str	r2, [r5, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f7ff f857 	bl	8000cce <_write>
 8001c20:	1c43      	adds	r3, r0, #1
 8001c22:	d102      	bne.n	8001c2a <_write_r+0x1e>
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	b103      	cbz	r3, 8001c2a <_write_r+0x1e>
 8001c28:	6023      	str	r3, [r4, #0]
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
 8001c2c:	20000ce8 	.word	0x20000ce8

08001c30 <__swsetup_r>:
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <__swsetup_r+0xcc>)
 8001c32:	b570      	push	{r4, r5, r6, lr}
 8001c34:	681d      	ldr	r5, [r3, #0]
 8001c36:	4606      	mov	r6, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	b125      	cbz	r5, 8001c46 <__swsetup_r+0x16>
 8001c3c:	69ab      	ldr	r3, [r5, #24]
 8001c3e:	b913      	cbnz	r3, 8001c46 <__swsetup_r+0x16>
 8001c40:	4628      	mov	r0, r5
 8001c42:	f7ff f9bf 	bl	8000fc4 <__sinit>
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <__swsetup_r+0xd0>)
 8001c48:	429c      	cmp	r4, r3
 8001c4a:	d10f      	bne.n	8001c6c <__swsetup_r+0x3c>
 8001c4c:	686c      	ldr	r4, [r5, #4]
 8001c4e:	89a3      	ldrh	r3, [r4, #12]
 8001c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c54:	0719      	lsls	r1, r3, #28
 8001c56:	d42c      	bmi.n	8001cb2 <__swsetup_r+0x82>
 8001c58:	06dd      	lsls	r5, r3, #27
 8001c5a:	d411      	bmi.n	8001c80 <__swsetup_r+0x50>
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	6033      	str	r3, [r6, #0]
 8001c60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c64:	81a3      	strh	r3, [r4, #12]
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c6a:	e03e      	b.n	8001cea <__swsetup_r+0xba>
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <__swsetup_r+0xd4>)
 8001c6e:	429c      	cmp	r4, r3
 8001c70:	d101      	bne.n	8001c76 <__swsetup_r+0x46>
 8001c72:	68ac      	ldr	r4, [r5, #8]
 8001c74:	e7eb      	b.n	8001c4e <__swsetup_r+0x1e>
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <__swsetup_r+0xd8>)
 8001c78:	429c      	cmp	r4, r3
 8001c7a:	bf08      	it	eq
 8001c7c:	68ec      	ldreq	r4, [r5, #12]
 8001c7e:	e7e6      	b.n	8001c4e <__swsetup_r+0x1e>
 8001c80:	0758      	lsls	r0, r3, #29
 8001c82:	d512      	bpl.n	8001caa <__swsetup_r+0x7a>
 8001c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c86:	b141      	cbz	r1, 8001c9a <__swsetup_r+0x6a>
 8001c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c8c:	4299      	cmp	r1, r3
 8001c8e:	d002      	beq.n	8001c96 <__swsetup_r+0x66>
 8001c90:	4630      	mov	r0, r6
 8001c92:	f000 f9b9 	bl	8002008 <_free_r>
 8001c96:	2300      	movs	r3, #0
 8001c98:	6363      	str	r3, [r4, #52]	; 0x34
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ca0:	81a3      	strh	r3, [r4, #12]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	6063      	str	r3, [r4, #4]
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	81a3      	strh	r3, [r4, #12]
 8001cb2:	6923      	ldr	r3, [r4, #16]
 8001cb4:	b94b      	cbnz	r3, 8001cca <__swsetup_r+0x9a>
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc0:	d003      	beq.n	8001cca <__swsetup_r+0x9a>
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f000 f92b 	bl	8001f20 <__smakebuf_r>
 8001cca:	89a0      	ldrh	r0, [r4, #12]
 8001ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cd0:	f010 0301 	ands.w	r3, r0, #1
 8001cd4:	d00a      	beq.n	8001cec <__swsetup_r+0xbc>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60a3      	str	r3, [r4, #8]
 8001cda:	6963      	ldr	r3, [r4, #20]
 8001cdc:	425b      	negs	r3, r3
 8001cde:	61a3      	str	r3, [r4, #24]
 8001ce0:	6923      	ldr	r3, [r4, #16]
 8001ce2:	b943      	cbnz	r3, 8001cf6 <__swsetup_r+0xc6>
 8001ce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ce8:	d1ba      	bne.n	8001c60 <__swsetup_r+0x30>
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	0781      	lsls	r1, r0, #30
 8001cee:	bf58      	it	pl
 8001cf0:	6963      	ldrpl	r3, [r4, #20]
 8001cf2:	60a3      	str	r3, [r4, #8]
 8001cf4:	e7f4      	b.n	8001ce0 <__swsetup_r+0xb0>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	e7f7      	b.n	8001cea <__swsetup_r+0xba>
 8001cfa:	bf00      	nop
 8001cfc:	20000010 	.word	0x20000010
 8001d00:	08002374 	.word	0x08002374
 8001d04:	08002394 	.word	0x08002394
 8001d08:	08002354 	.word	0x08002354

08001d0c <_close_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4d06      	ldr	r5, [pc, #24]	; (8001d28 <_close_r+0x1c>)
 8001d10:	2300      	movs	r3, #0
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	f7fe fff5 	bl	8000d06 <_close>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d102      	bne.n	8001d26 <_close_r+0x1a>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b103      	cbz	r3, 8001d26 <_close_r+0x1a>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
 8001d28:	20000ce8 	.word	0x20000ce8

08001d2c <__sflush_r>:
 8001d2c:	898a      	ldrh	r2, [r1, #12]
 8001d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d32:	4605      	mov	r5, r0
 8001d34:	0710      	lsls	r0, r2, #28
 8001d36:	460c      	mov	r4, r1
 8001d38:	d458      	bmi.n	8001dec <__sflush_r+0xc0>
 8001d3a:	684b      	ldr	r3, [r1, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dc05      	bgt.n	8001d4c <__sflush_r+0x20>
 8001d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dc02      	bgt.n	8001d4c <__sflush_r+0x20>
 8001d46:	2000      	movs	r0, #0
 8001d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d4e:	2e00      	cmp	r6, #0
 8001d50:	d0f9      	beq.n	8001d46 <__sflush_r+0x1a>
 8001d52:	2300      	movs	r3, #0
 8001d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d58:	682f      	ldr	r7, [r5, #0]
 8001d5a:	602b      	str	r3, [r5, #0]
 8001d5c:	d032      	beq.n	8001dc4 <__sflush_r+0x98>
 8001d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d60:	89a3      	ldrh	r3, [r4, #12]
 8001d62:	075a      	lsls	r2, r3, #29
 8001d64:	d505      	bpl.n	8001d72 <__sflush_r+0x46>
 8001d66:	6863      	ldr	r3, [r4, #4]
 8001d68:	1ac0      	subs	r0, r0, r3
 8001d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d6c:	b10b      	cbz	r3, 8001d72 <__sflush_r+0x46>
 8001d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d70:	1ac0      	subs	r0, r0, r3
 8001d72:	2300      	movs	r3, #0
 8001d74:	4602      	mov	r2, r0
 8001d76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d78:	6a21      	ldr	r1, [r4, #32]
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	47b0      	blx	r6
 8001d7e:	1c43      	adds	r3, r0, #1
 8001d80:	89a3      	ldrh	r3, [r4, #12]
 8001d82:	d106      	bne.n	8001d92 <__sflush_r+0x66>
 8001d84:	6829      	ldr	r1, [r5, #0]
 8001d86:	291d      	cmp	r1, #29
 8001d88:	d82c      	bhi.n	8001de4 <__sflush_r+0xb8>
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <__sflush_r+0x108>)
 8001d8c:	40ca      	lsrs	r2, r1
 8001d8e:	07d6      	lsls	r6, r2, #31
 8001d90:	d528      	bpl.n	8001de4 <__sflush_r+0xb8>
 8001d92:	2200      	movs	r2, #0
 8001d94:	6062      	str	r2, [r4, #4]
 8001d96:	04d9      	lsls	r1, r3, #19
 8001d98:	6922      	ldr	r2, [r4, #16]
 8001d9a:	6022      	str	r2, [r4, #0]
 8001d9c:	d504      	bpl.n	8001da8 <__sflush_r+0x7c>
 8001d9e:	1c42      	adds	r2, r0, #1
 8001da0:	d101      	bne.n	8001da6 <__sflush_r+0x7a>
 8001da2:	682b      	ldr	r3, [r5, #0]
 8001da4:	b903      	cbnz	r3, 8001da8 <__sflush_r+0x7c>
 8001da6:	6560      	str	r0, [r4, #84]	; 0x54
 8001da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001daa:	602f      	str	r7, [r5, #0]
 8001dac:	2900      	cmp	r1, #0
 8001dae:	d0ca      	beq.n	8001d46 <__sflush_r+0x1a>
 8001db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001db4:	4299      	cmp	r1, r3
 8001db6:	d002      	beq.n	8001dbe <__sflush_r+0x92>
 8001db8:	4628      	mov	r0, r5
 8001dba:	f000 f925 	bl	8002008 <_free_r>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8001dc2:	e7c1      	b.n	8001d48 <__sflush_r+0x1c>
 8001dc4:	6a21      	ldr	r1, [r4, #32]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	4628      	mov	r0, r5
 8001dca:	47b0      	blx	r6
 8001dcc:	1c41      	adds	r1, r0, #1
 8001dce:	d1c7      	bne.n	8001d60 <__sflush_r+0x34>
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0c4      	beq.n	8001d60 <__sflush_r+0x34>
 8001dd6:	2b1d      	cmp	r3, #29
 8001dd8:	d001      	beq.n	8001dde <__sflush_r+0xb2>
 8001dda:	2b16      	cmp	r3, #22
 8001ddc:	d101      	bne.n	8001de2 <__sflush_r+0xb6>
 8001dde:	602f      	str	r7, [r5, #0]
 8001de0:	e7b1      	b.n	8001d46 <__sflush_r+0x1a>
 8001de2:	89a3      	ldrh	r3, [r4, #12]
 8001de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de8:	81a3      	strh	r3, [r4, #12]
 8001dea:	e7ad      	b.n	8001d48 <__sflush_r+0x1c>
 8001dec:	690f      	ldr	r7, [r1, #16]
 8001dee:	2f00      	cmp	r7, #0
 8001df0:	d0a9      	beq.n	8001d46 <__sflush_r+0x1a>
 8001df2:	0793      	lsls	r3, r2, #30
 8001df4:	680e      	ldr	r6, [r1, #0]
 8001df6:	bf08      	it	eq
 8001df8:	694b      	ldreq	r3, [r1, #20]
 8001dfa:	600f      	str	r7, [r1, #0]
 8001dfc:	bf18      	it	ne
 8001dfe:	2300      	movne	r3, #0
 8001e00:	eba6 0807 	sub.w	r8, r6, r7
 8001e04:	608b      	str	r3, [r1, #8]
 8001e06:	f1b8 0f00 	cmp.w	r8, #0
 8001e0a:	dd9c      	ble.n	8001d46 <__sflush_r+0x1a>
 8001e0c:	6a21      	ldr	r1, [r4, #32]
 8001e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e10:	4643      	mov	r3, r8
 8001e12:	463a      	mov	r2, r7
 8001e14:	4628      	mov	r0, r5
 8001e16:	47b0      	blx	r6
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	dc06      	bgt.n	8001e2a <__sflush_r+0xfe>
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e22:	81a3      	strh	r3, [r4, #12]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e28:	e78e      	b.n	8001d48 <__sflush_r+0x1c>
 8001e2a:	4407      	add	r7, r0
 8001e2c:	eba8 0800 	sub.w	r8, r8, r0
 8001e30:	e7e9      	b.n	8001e06 <__sflush_r+0xda>
 8001e32:	bf00      	nop
 8001e34:	20400001 	.word	0x20400001

08001e38 <_fflush_r>:
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	690b      	ldr	r3, [r1, #16]
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	b913      	cbnz	r3, 8001e48 <_fflush_r+0x10>
 8001e42:	2500      	movs	r5, #0
 8001e44:	4628      	mov	r0, r5
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
 8001e48:	b118      	cbz	r0, 8001e52 <_fflush_r+0x1a>
 8001e4a:	6983      	ldr	r3, [r0, #24]
 8001e4c:	b90b      	cbnz	r3, 8001e52 <_fflush_r+0x1a>
 8001e4e:	f7ff f8b9 	bl	8000fc4 <__sinit>
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <_fflush_r+0x6c>)
 8001e54:	429c      	cmp	r4, r3
 8001e56:	d11b      	bne.n	8001e90 <_fflush_r+0x58>
 8001e58:	686c      	ldr	r4, [r5, #4]
 8001e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0ef      	beq.n	8001e42 <_fflush_r+0xa>
 8001e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e64:	07d0      	lsls	r0, r2, #31
 8001e66:	d404      	bmi.n	8001e72 <_fflush_r+0x3a>
 8001e68:	0599      	lsls	r1, r3, #22
 8001e6a:	d402      	bmi.n	8001e72 <_fflush_r+0x3a>
 8001e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e6e:	f7ff f947 	bl	8001100 <__retarget_lock_acquire_recursive>
 8001e72:	4628      	mov	r0, r5
 8001e74:	4621      	mov	r1, r4
 8001e76:	f7ff ff59 	bl	8001d2c <__sflush_r>
 8001e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e7c:	07da      	lsls	r2, r3, #31
 8001e7e:	4605      	mov	r5, r0
 8001e80:	d4e0      	bmi.n	8001e44 <_fflush_r+0xc>
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	059b      	lsls	r3, r3, #22
 8001e86:	d4dd      	bmi.n	8001e44 <_fflush_r+0xc>
 8001e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e8a:	f7ff f93a 	bl	8001102 <__retarget_lock_release_recursive>
 8001e8e:	e7d9      	b.n	8001e44 <_fflush_r+0xc>
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <_fflush_r+0x70>)
 8001e92:	429c      	cmp	r4, r3
 8001e94:	d101      	bne.n	8001e9a <_fflush_r+0x62>
 8001e96:	68ac      	ldr	r4, [r5, #8]
 8001e98:	e7df      	b.n	8001e5a <_fflush_r+0x22>
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <_fflush_r+0x74>)
 8001e9c:	429c      	cmp	r4, r3
 8001e9e:	bf08      	it	eq
 8001ea0:	68ec      	ldreq	r4, [r5, #12]
 8001ea2:	e7da      	b.n	8001e5a <_fflush_r+0x22>
 8001ea4:	08002374 	.word	0x08002374
 8001ea8:	08002394 	.word	0x08002394
 8001eac:	08002354 	.word	0x08002354

08001eb0 <_lseek_r>:
 8001eb0:	b538      	push	{r3, r4, r5, lr}
 8001eb2:	4d07      	ldr	r5, [pc, #28]	; (8001ed0 <_lseek_r+0x20>)
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	4611      	mov	r1, r2
 8001eba:	2200      	movs	r2, #0
 8001ebc:	602a      	str	r2, [r5, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7fe ff48 	bl	8000d54 <_lseek>
 8001ec4:	1c43      	adds	r3, r0, #1
 8001ec6:	d102      	bne.n	8001ece <_lseek_r+0x1e>
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	b103      	cbz	r3, 8001ece <_lseek_r+0x1e>
 8001ecc:	6023      	str	r3, [r4, #0]
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
 8001ed0:	20000ce8 	.word	0x20000ce8

08001ed4 <__swhatbuf_r>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	460e      	mov	r6, r1
 8001ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001edc:	2900      	cmp	r1, #0
 8001ede:	b096      	sub	sp, #88	; 0x58
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	da08      	bge.n	8001ef8 <__swhatbuf_r+0x24>
 8001ee6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	602a      	str	r2, [r5, #0]
 8001eee:	061a      	lsls	r2, r3, #24
 8001ef0:	d410      	bmi.n	8001f14 <__swhatbuf_r+0x40>
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	e00e      	b.n	8001f16 <__swhatbuf_r+0x42>
 8001ef8:	466a      	mov	r2, sp
 8001efa:	f000 f913 	bl	8002124 <_fstat_r>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	dbf1      	blt.n	8001ee6 <__swhatbuf_r+0x12>
 8001f02:	9a01      	ldr	r2, [sp, #4]
 8001f04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f0c:	425a      	negs	r2, r3
 8001f0e:	415a      	adcs	r2, r3
 8001f10:	602a      	str	r2, [r5, #0]
 8001f12:	e7ee      	b.n	8001ef2 <__swhatbuf_r+0x1e>
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	2000      	movs	r0, #0
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	b016      	add	sp, #88	; 0x58
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f20 <__smakebuf_r>:
 8001f20:	898b      	ldrh	r3, [r1, #12]
 8001f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f24:	079d      	lsls	r5, r3, #30
 8001f26:	4606      	mov	r6, r0
 8001f28:	460c      	mov	r4, r1
 8001f2a:	d507      	bpl.n	8001f3c <__smakebuf_r+0x1c>
 8001f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	6123      	str	r3, [r4, #16]
 8001f34:	2301      	movs	r3, #1
 8001f36:	6163      	str	r3, [r4, #20]
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	ab01      	add	r3, sp, #4
 8001f3e:	466a      	mov	r2, sp
 8001f40:	f7ff ffc8 	bl	8001ed4 <__swhatbuf_r>
 8001f44:	9900      	ldr	r1, [sp, #0]
 8001f46:	4605      	mov	r5, r0
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f7ff f8fb 	bl	8001144 <_malloc_r>
 8001f4e:	b948      	cbnz	r0, 8001f64 <__smakebuf_r+0x44>
 8001f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f54:	059a      	lsls	r2, r3, #22
 8001f56:	d4ef      	bmi.n	8001f38 <__smakebuf_r+0x18>
 8001f58:	f023 0303 	bic.w	r3, r3, #3
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	81a3      	strh	r3, [r4, #12]
 8001f62:	e7e3      	b.n	8001f2c <__smakebuf_r+0xc>
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <__smakebuf_r+0x7c>)
 8001f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	6020      	str	r0, [r4, #0]
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f70:	81a3      	strh	r3, [r4, #12]
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	6163      	str	r3, [r4, #20]
 8001f76:	9b01      	ldr	r3, [sp, #4]
 8001f78:	6120      	str	r0, [r4, #16]
 8001f7a:	b15b      	cbz	r3, 8001f94 <__smakebuf_r+0x74>
 8001f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f80:	4630      	mov	r0, r6
 8001f82:	f000 f8e1 	bl	8002148 <_isatty_r>
 8001f86:	b128      	cbz	r0, 8001f94 <__smakebuf_r+0x74>
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	81a3      	strh	r3, [r4, #12]
 8001f94:	89a0      	ldrh	r0, [r4, #12]
 8001f96:	4305      	orrs	r5, r0
 8001f98:	81a5      	strh	r5, [r4, #12]
 8001f9a:	e7cd      	b.n	8001f38 <__smakebuf_r+0x18>
 8001f9c:	08000f5d 	.word	0x08000f5d

08001fa0 <memcpy>:
 8001fa0:	440a      	add	r2, r1
 8001fa2:	4291      	cmp	r1, r2
 8001fa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001fa8:	d100      	bne.n	8001fac <memcpy+0xc>
 8001faa:	4770      	bx	lr
 8001fac:	b510      	push	{r4, lr}
 8001fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fb6:	4291      	cmp	r1, r2
 8001fb8:	d1f9      	bne.n	8001fae <memcpy+0xe>
 8001fba:	bd10      	pop	{r4, pc}

08001fbc <memmove>:
 8001fbc:	4288      	cmp	r0, r1
 8001fbe:	b510      	push	{r4, lr}
 8001fc0:	eb01 0402 	add.w	r4, r1, r2
 8001fc4:	d902      	bls.n	8001fcc <memmove+0x10>
 8001fc6:	4284      	cmp	r4, r0
 8001fc8:	4623      	mov	r3, r4
 8001fca:	d807      	bhi.n	8001fdc <memmove+0x20>
 8001fcc:	1e43      	subs	r3, r0, #1
 8001fce:	42a1      	cmp	r1, r4
 8001fd0:	d008      	beq.n	8001fe4 <memmove+0x28>
 8001fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001fda:	e7f8      	b.n	8001fce <memmove+0x12>
 8001fdc:	4402      	add	r2, r0
 8001fde:	4601      	mov	r1, r0
 8001fe0:	428a      	cmp	r2, r1
 8001fe2:	d100      	bne.n	8001fe6 <memmove+0x2a>
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001fee:	e7f7      	b.n	8001fe0 <memmove+0x24>

08001ff0 <__malloc_lock>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__malloc_lock+0x8>)
 8001ff2:	f7ff b885 	b.w	8001100 <__retarget_lock_acquire_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	20000cdc 	.word	0x20000cdc

08001ffc <__malloc_unlock>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__malloc_unlock+0x8>)
 8001ffe:	f7ff b880 	b.w	8001102 <__retarget_lock_release_recursive>
 8002002:	bf00      	nop
 8002004:	20000cdc 	.word	0x20000cdc

08002008 <_free_r>:
 8002008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800200a:	2900      	cmp	r1, #0
 800200c:	d044      	beq.n	8002098 <_free_r+0x90>
 800200e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002012:	9001      	str	r0, [sp, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f1a1 0404 	sub.w	r4, r1, #4
 800201a:	bfb8      	it	lt
 800201c:	18e4      	addlt	r4, r4, r3
 800201e:	f7ff ffe7 	bl	8001ff0 <__malloc_lock>
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <_free_r+0x94>)
 8002024:	9801      	ldr	r0, [sp, #4]
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	b933      	cbnz	r3, 8002038 <_free_r+0x30>
 800202a:	6063      	str	r3, [r4, #4]
 800202c:	6014      	str	r4, [r2, #0]
 800202e:	b003      	add	sp, #12
 8002030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002034:	f7ff bfe2 	b.w	8001ffc <__malloc_unlock>
 8002038:	42a3      	cmp	r3, r4
 800203a:	d908      	bls.n	800204e <_free_r+0x46>
 800203c:	6825      	ldr	r5, [r4, #0]
 800203e:	1961      	adds	r1, r4, r5
 8002040:	428b      	cmp	r3, r1
 8002042:	bf01      	itttt	eq
 8002044:	6819      	ldreq	r1, [r3, #0]
 8002046:	685b      	ldreq	r3, [r3, #4]
 8002048:	1949      	addeq	r1, r1, r5
 800204a:	6021      	streq	r1, [r4, #0]
 800204c:	e7ed      	b.n	800202a <_free_r+0x22>
 800204e:	461a      	mov	r2, r3
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	b10b      	cbz	r3, 8002058 <_free_r+0x50>
 8002054:	42a3      	cmp	r3, r4
 8002056:	d9fa      	bls.n	800204e <_free_r+0x46>
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	1855      	adds	r5, r2, r1
 800205c:	42a5      	cmp	r5, r4
 800205e:	d10b      	bne.n	8002078 <_free_r+0x70>
 8002060:	6824      	ldr	r4, [r4, #0]
 8002062:	4421      	add	r1, r4
 8002064:	1854      	adds	r4, r2, r1
 8002066:	42a3      	cmp	r3, r4
 8002068:	6011      	str	r1, [r2, #0]
 800206a:	d1e0      	bne.n	800202e <_free_r+0x26>
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	6053      	str	r3, [r2, #4]
 8002072:	4421      	add	r1, r4
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	e7da      	b.n	800202e <_free_r+0x26>
 8002078:	d902      	bls.n	8002080 <_free_r+0x78>
 800207a:	230c      	movs	r3, #12
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	e7d6      	b.n	800202e <_free_r+0x26>
 8002080:	6825      	ldr	r5, [r4, #0]
 8002082:	1961      	adds	r1, r4, r5
 8002084:	428b      	cmp	r3, r1
 8002086:	bf04      	itt	eq
 8002088:	6819      	ldreq	r1, [r3, #0]
 800208a:	685b      	ldreq	r3, [r3, #4]
 800208c:	6063      	str	r3, [r4, #4]
 800208e:	bf04      	itt	eq
 8002090:	1949      	addeq	r1, r1, r5
 8002092:	6021      	streq	r1, [r4, #0]
 8002094:	6054      	str	r4, [r2, #4]
 8002096:	e7ca      	b.n	800202e <_free_r+0x26>
 8002098:	b003      	add	sp, #12
 800209a:	bd30      	pop	{r4, r5, pc}
 800209c:	20000ce0 	.word	0x20000ce0

080020a0 <_realloc_r>:
 80020a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a4:	4680      	mov	r8, r0
 80020a6:	4614      	mov	r4, r2
 80020a8:	460e      	mov	r6, r1
 80020aa:	b921      	cbnz	r1, 80020b6 <_realloc_r+0x16>
 80020ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020b0:	4611      	mov	r1, r2
 80020b2:	f7ff b847 	b.w	8001144 <_malloc_r>
 80020b6:	b92a      	cbnz	r2, 80020c4 <_realloc_r+0x24>
 80020b8:	f7ff ffa6 	bl	8002008 <_free_r>
 80020bc:	4625      	mov	r5, r4
 80020be:	4628      	mov	r0, r5
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c4:	f000 f850 	bl	8002168 <_malloc_usable_size_r>
 80020c8:	4284      	cmp	r4, r0
 80020ca:	4607      	mov	r7, r0
 80020cc:	d802      	bhi.n	80020d4 <_realloc_r+0x34>
 80020ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80020d2:	d812      	bhi.n	80020fa <_realloc_r+0x5a>
 80020d4:	4621      	mov	r1, r4
 80020d6:	4640      	mov	r0, r8
 80020d8:	f7ff f834 	bl	8001144 <_malloc_r>
 80020dc:	4605      	mov	r5, r0
 80020de:	2800      	cmp	r0, #0
 80020e0:	d0ed      	beq.n	80020be <_realloc_r+0x1e>
 80020e2:	42bc      	cmp	r4, r7
 80020e4:	4622      	mov	r2, r4
 80020e6:	4631      	mov	r1, r6
 80020e8:	bf28      	it	cs
 80020ea:	463a      	movcs	r2, r7
 80020ec:	f7ff ff58 	bl	8001fa0 <memcpy>
 80020f0:	4631      	mov	r1, r6
 80020f2:	4640      	mov	r0, r8
 80020f4:	f7ff ff88 	bl	8002008 <_free_r>
 80020f8:	e7e1      	b.n	80020be <_realloc_r+0x1e>
 80020fa:	4635      	mov	r5, r6
 80020fc:	e7df      	b.n	80020be <_realloc_r+0x1e>
	...

08002100 <_read_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4d07      	ldr	r5, [pc, #28]	; (8002120 <_read_r+0x20>)
 8002104:	4604      	mov	r4, r0
 8002106:	4608      	mov	r0, r1
 8002108:	4611      	mov	r1, r2
 800210a:	2200      	movs	r2, #0
 800210c:	602a      	str	r2, [r5, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f7fe fdc0 	bl	8000c94 <_read>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d102      	bne.n	800211e <_read_r+0x1e>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	b103      	cbz	r3, 800211e <_read_r+0x1e>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	20000ce8 	.word	0x20000ce8

08002124 <_fstat_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4d07      	ldr	r5, [pc, #28]	; (8002144 <_fstat_r+0x20>)
 8002128:	2300      	movs	r3, #0
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	602b      	str	r3, [r5, #0]
 8002132:	f7fe fdf4 	bl	8000d1e <_fstat>
 8002136:	1c43      	adds	r3, r0, #1
 8002138:	d102      	bne.n	8002140 <_fstat_r+0x1c>
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	b103      	cbz	r3, 8002140 <_fstat_r+0x1c>
 800213e:	6023      	str	r3, [r4, #0]
 8002140:	bd38      	pop	{r3, r4, r5, pc}
 8002142:	bf00      	nop
 8002144:	20000ce8 	.word	0x20000ce8

08002148 <_isatty_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4d06      	ldr	r5, [pc, #24]	; (8002164 <_isatty_r+0x1c>)
 800214c:	2300      	movs	r3, #0
 800214e:	4604      	mov	r4, r0
 8002150:	4608      	mov	r0, r1
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	f7fe fdf3 	bl	8000d3e <_isatty>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	d102      	bne.n	8002162 <_isatty_r+0x1a>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	b103      	cbz	r3, 8002162 <_isatty_r+0x1a>
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	20000ce8 	.word	0x20000ce8

08002168 <_malloc_usable_size_r>:
 8002168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800216c:	1f18      	subs	r0, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	bfbc      	itt	lt
 8002172:	580b      	ldrlt	r3, [r1, r0]
 8002174:	18c0      	addlt	r0, r0, r3
 8002176:	4770      	bx	lr

08002178 <_init>:
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	bf00      	nop
 800217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217e:	bc08      	pop	{r3}
 8002180:	469e      	mov	lr, r3
 8002182:	4770      	bx	lr

08002184 <_fini>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr
