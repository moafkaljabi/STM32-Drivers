
8_esp82xx_lib_with_fifo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002360  08002360  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002360  08002360  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002360  08002360  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  20000074  080023dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  080023dc  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003df2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bc2  00000000  00000000  00023e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00024a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000230  00000000  00000000  00024cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe75  00000000  00000000  00024f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bae  00000000  00000000  00034d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c5e  00000000  00000000  00037943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008d5a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012a0  00000000  00000000  0008d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002104 	.word	0x08002104

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08002104 	.word	0x08002104

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);



int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f951 	bl	8000530 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*Enable clock access to UART pins' GPIO port (PORT A)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/************Configure UART module*****************/

	/*Enable clock access to UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(APB1_CLK,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f92d 	bl	80005b4 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <esp_rs_pin_init>:
 * ESP82XX RX Pin  :	PA9(TX)
 * */


void esp_rs_pin_init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <esp_rs_pin_init+0x34>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <esp_rs_pin_init+0x34>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA8 as output pin*/
	GPIOA->MODER |=(1U<<16);
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <esp_rs_pin_init+0x38>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <esp_rs_pin_init+0x38>)
 800039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<17);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <esp_rs_pin_init+0x38>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <esp_rs_pin_init+0x38>)
 80003aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003ae:	6013      	str	r3, [r2, #0]

}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020000 	.word	0x40020000

080003c4 <esp_rs_pin_enable>:

void esp_rs_pin_enable(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	/*Set PA8 to high*/
	GPIOA->ODR |=(1U<<8);
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <esp_rs_pin_enable+0x1c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <esp_rs_pin_enable+0x1c>)
 80003ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d2:	6153      	str	r3, [r2, #20]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40020000 	.word	0x40020000

080003e4 <esp_rs_pin_disable>:

void esp_rs_pin_disable(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	/*Set PA8 to high*/
	GPIOA->ODR |=(1U<<8);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <esp_rs_pin_disable+0x1c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <esp_rs_pin_disable+0x1c>)
 80003ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f2:	6153      	str	r3, [r2, #20]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020000 	.word	0x40020000

08000404 <esp_uart_init>:


void esp_uart_init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000408:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <esp_uart_init+0xec>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a38      	ldr	r2, [pc, #224]	; (80004f0 <esp_uart_init+0xec>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 and PA10 modes to alternate function*/

	/*PA9*/
	GPIOA->MODER &=~(1U<<18);
 8000414:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <esp_uart_init+0xf0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a36      	ldr	r2, [pc, #216]	; (80004f4 <esp_uart_init+0xf0>)
 800041a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <esp_uart_init+0xf0>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <esp_uart_init+0xf0>)
 8000426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800042a:	6013      	str	r3, [r2, #0]

    /*PA10*/
	GPIOA->MODER &=~(1U<<20);
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <esp_uart_init+0xf0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a30      	ldr	r2, [pc, #192]	; (80004f4 <esp_uart_init+0xf0>)
 8000432:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000436:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 8000438:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <esp_uart_init+0xf0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a2d      	ldr	r2, [pc, #180]	; (80004f4 <esp_uart_init+0xf0>)
 800043e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000442:	6013      	str	r3, [r2, #0]

    /*Set alternate function type to UART1 AF07*/

	/*PA9*/
	GPIOA->AFR[1] |= (1U<<4);
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <esp_uart_init+0xf0>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000448:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <esp_uart_init+0xf0>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<5);
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <esp_uart_init+0xf0>)
 8000452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000454:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <esp_uart_init+0xf0>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<6);
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <esp_uart_init+0xf0>)
 800045e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000460:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <esp_uart_init+0xf0>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 8000468:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <esp_uart_init+0xf0>)
 800046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <esp_uart_init+0xf0>)
 800046e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000472:	6253      	str	r3, [r2, #36]	; 0x24

	/*PA10*/
	GPIOA->AFR[1] |= (1U<<8);
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <esp_uart_init+0xf0>)
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <esp_uart_init+0xf0>)
 800047a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<9);
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <esp_uart_init+0xf0>)
 8000482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <esp_uart_init+0xf0>)
 8000486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1U<<10);
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <esp_uart_init+0xf0>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <esp_uart_init+0xf0>)
 8000492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000496:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <esp_uart_init+0xf0>)
 800049a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049c:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <esp_uart_init+0xf0>)
 800049e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004a2:	6253      	str	r3, [r2, #36]	; 0x24

	/************Configure UART module*****************/

	/*Enable clock access to UART1*/
	RCC->APB2ENR |= UART1EN;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <esp_uart_init+0xec>)
 80004a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a8:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <esp_uart_init+0xec>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6453      	str	r3, [r2, #68]	; 0x44

	/*Disable UART module*/
	USART1->CR1 &=~CR1_UE;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <esp_uart_init+0xf4>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <esp_uart_init+0xf4>)
 80004b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004ba:	60d3      	str	r3, [r2, #12]

	/*Set UART baudrate*/
	USART1->BRR =  compute_uart_bd(APB2_CLK,UART_BAUDRATE);
 80004bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <esp_uart_init+0xf8>)
 80004c2:	f000 f877 	bl	80005b4 <compute_uart_bd>
 80004c6:	4603      	mov	r3, r0
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <esp_uart_init+0xf4>)
 80004cc:	609a      	str	r2, [r3, #8]

	/*Set transfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <esp_uart_init+0xf4>)
 80004d0:	220c      	movs	r2, #12
 80004d2:	60da      	str	r2, [r3, #12]


	/*Enable RXNEIE*/
	USART1->CR1 |=CR1_RXNEIE;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <esp_uart_init+0xf4>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <esp_uart_init+0xf4>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	60d3      	str	r3, [r2, #12]


	/*Enable UART module*/
	USART1->CR1 |=CR1_UE;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <esp_uart_init+0xf4>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <esp_uart_init+0xf4>)
 80004e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ea:	60d3      	str	r3, [r2, #12]



}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40011000 	.word	0x40011000
 80004fc:	00f42400 	.word	0x00f42400

08000500 <esp_uart_write_char>:

void esp_uart_write_char(char ch)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800050a:	bf00      	nop
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <esp_uart_write_char+0x2c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f9      	beq.n	800050c <esp_uart_write_char+0xc>

	/*Write to transmit data register*/
	USART1->DR  =  (ch & 0xFF);
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <esp_uart_write_char+0x2c>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	6053      	str	r3, [r2, #4]

}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40011000 	.word	0x40011000

08000530 <debug_uart_write>:

void debug_uart_write(int ch)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000538:	bf00      	nop
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <debug_uart_write+0x2c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR  =  (ch & 0xFF);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <debug_uart_write+0x2c>)
 800054a:	b2db      	uxtb	r3, r3
 800054c:	6053      	str	r3, [r2, #4]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40004400 	.word	0x40004400

08000560 <systick_delay_ms>:


void systick_delay_ms(uint32_t delay)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <systick_delay_ms+0x50>)
 800056a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800056e:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <systick_delay_ms+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_CLKSRC |CTRL_ENABLE;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <systick_delay_ms+0x50>)
 8000578:	2205      	movs	r2, #5
 800057a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i< delay ;i++)
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e009      	b.n	8000596 <systick_delay_ms+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG)== 0){}
 8000582:	bf00      	nop
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <systick_delay_ms+0x50>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <systick_delay_ms+0x24>
	for(int i = 0; i< delay ;i++)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	d8f1      	bhi.n	8000582 <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <systick_delay_ms+0x50>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]


}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000e010 	.word	0xe000e010

080005b4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	085a      	lsrs	r2, r3, #1
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	441a      	add	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	b29b      	uxth	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db0b      	blt.n	8000606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 021f 	and.w	r2, r3, #31
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <__NVIC_EnableIRQ+0x38>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2001      	movs	r0, #1
 80005fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000e100 	.word	0xe000e100

08000618 <esp82xx_init>:
static void esp_uart_callback(void);
static void esp82xx_process_data(void);
static void uart_output_char(char data);

void esp82xx_init(const char * ssid, const char * password)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	/*Enable fifos*/
	tx_fifo_init();
 8000622:	f000 faad 	bl	8000b80 <tx_fifo_init>
	rx_fifo_init();
 8000626:	f000 fb1f 	bl	8000c68 <rx_fifo_init>

	/*Enable RS pin*/
	esp_rs_pin_init();
 800062a:	f7ff fead 	bl	8000388 <esp_rs_pin_init>

	/*Enable esp uart*/
	esp_uart_init();
 800062e:	f7ff fee9 	bl	8000404 <esp_uart_init>

	/*Enable debug uart*/
	debug_uart_init();
 8000632:	f7ff fe31 	bl	8000298 <debug_uart_init>

	/*Initialize flags*/
	searching  = false;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <esp82xx_init+0xa4>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	is_response =  false;
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <esp82xx_init+0xa8>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	server_resp_searching = 0;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <esp82xx_init+0xac>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
	server_search_resp_cmplt = 0;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <esp82xx_init+0xb0>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]

	printf("ESP8266 Initialization...\n\r");
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <esp82xx_init+0xb4>)
 8000650:	f000 fc28 	bl	8000ea4 <iprintf>

	/*Enable interrupt*/
	NVIC_EnableIRQ(USART1_IRQn);
 8000654:	2025      	movs	r0, #37	; 0x25
 8000656:	f7ff ffc1 	bl	80005dc <__NVIC_EnableIRQ>

	/*Reset esp module*/

	if(esp82xx_reset() == 0)
 800065a:	f000 f847 	bl	80006ec <esp82xx_reset>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <esp82xx_init+0x54>
	{
		printf("Reset failure, could not reset \n\r");
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <esp82xx_init+0xb8>)
 8000666:	f000 fc1d 	bl	8000ea4 <iprintf>
 800066a:	e002      	b.n	8000672 <esp82xx_init+0x5a>
	}
	else{
		printf("Reset was successful...\n\r");
 800066c:	4819      	ldr	r0, [pc, #100]	; (80006d4 <esp82xx_init+0xbc>)
 800066e:	f000 fc19 	bl	8000ea4 <iprintf>
	}

	if(esp82xx_set_wifi_mode(ESP8266_WIFI_MODE_STA) == 0)
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f86a 	bl	800074c <esp82xx_set_wifi_mode>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <esp82xx_init+0x6e>
	{
		printf("SetWifiMode Failed\n\r");
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <esp82xx_init+0xc0>)
 8000680:	f000 fc10 	bl	8000ea4 <iprintf>
 8000684:	e002      	b.n	800068c <esp82xx_init+0x74>
	}
	else{
		printf("Wifi mode set successfully....\n\r");
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <esp82xx_init+0xc4>)
 8000688:	f000 fc0c 	bl	8000ea4 <iprintf>
	}

	esp82xx_list_access_points();
 800068c:	f000 f890 	bl	80007b0 <esp82xx_list_access_points>

	/*Join wifi*/

	if(exp82xx_join_wifi_access_point(ssid,password)== 0)
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f8b4 	bl	8000800 <exp82xx_join_wifi_access_point>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <esp82xx_init+0x8e>
	{
		printf("Could not join wifi\n\r");
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <esp82xx_init+0xc8>)
 80006a0:	f000 fc00 	bl	8000ea4 <iprintf>
 80006a4:	e002      	b.n	80006ac <esp82xx_init+0x94>

	}
	else
	{
		printf("Wifi joined successfully...\n\r");
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <esp82xx_init+0xcc>)
 80006a8:	f000 fbfc 	bl	8000ea4 <iprintf>

	}

	/*Get ip address of "google.com"*/
	esp82xx_dns_get_ip("google.com");
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <esp82xx_init+0xd0>)
 80006ae:	f000 f8d9 	bl	8000864 <esp82xx_dns_get_ip>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000090 	.word	0x20000090
 80006c0:	20000091 	.word	0x20000091
 80006c4:	200000a0 	.word	0x200000a0
 80006c8:	20000098 	.word	0x20000098
 80006cc:	0800211c 	.word	0x0800211c
 80006d0:	08002138 	.word	0x08002138
 80006d4:	0800215c 	.word	0x0800215c
 80006d8:	08002178 	.word	0x08002178
 80006dc:	08002190 	.word	0x08002190
 80006e0:	080021b4 	.word	0x080021b4
 80006e4:	080021cc 	.word	0x080021cc
 80006e8:	080021ec 	.word	0x080021ec

080006ec <esp82xx_reset>:


/*Reset esp module*/

static uint8_t esp82xx_reset(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 80006f2:	230a      	movs	r3, #10
 80006f4:	71fb      	strb	r3, [r7, #7]

	wait_resp("ok\r\n");
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <esp82xx_reset+0x54>)
 80006f8:	f000 f8e4 	bl	80008c4 <wait_resp>

	while(num_of_try)
 80006fc:	e017      	b.n	800072e <esp82xx_reset+0x42>
	{
		/*Set reset pin low */
		esp_rs_pin_disable();
 80006fe:	f7ff fe71 	bl	80003e4 <esp_rs_pin_disable>

		/*Wait a bit*/
		systick_delay_ms(10);
 8000702:	200a      	movs	r0, #10
 8000704:	f7ff ff2c 	bl	8000560 <systick_delay_ms>

		/*Set reset pin high*/
		esp_rs_pin_enable();
 8000708:	f7ff fe5c 	bl	80003c4 <esp_rs_pin_enable>

		/*Send RST command*/
		esp82xx_send_cmd("AT+RST\r\n");
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <esp82xx_reset+0x58>)
 800070e:	f000 fa1b 	bl	8000b48 <esp82xx_send_cmd>

		/*Wait */
		systick_delay_ms(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f7ff ff23 	bl	8000560 <systick_delay_ms>

		/*Check for response*/
		if(is_response)
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <esp82xx_reset+0x5c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <esp82xx_reset+0x3c>
		{
			/*Success*/

			return 1;
 8000724:	2301      	movs	r3, #1
 8000726:	e006      	b.n	8000736 <esp82xx_reset+0x4a>
		}

		num_of_try--;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3b01      	subs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1e4      	bne.n	80006fe <esp82xx_reset+0x12>
	}

	/*Failed */
	return 0;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	080021f8 	.word	0x080021f8
 8000744:	08002200 	.word	0x08002200
 8000748:	20000091 	.word	0x20000091

0800074c <esp82xx_set_wifi_mode>:


/*Set Wifi mode*/

static uint8_t esp82xx_set_wifi_mode(uint8_t mode)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 8000756:	230a      	movs	r3, #10
 8000758:	73fb      	strb	r3, [r7, #15]
	wait_resp("ok\r\n");
 800075a:	4811      	ldr	r0, [pc, #68]	; (80007a0 <esp82xx_set_wifi_mode+0x54>)
 800075c:	f000 f8b2 	bl	80008c4 <wait_resp>

    while(num_of_try)
 8000760:	e016      	b.n	8000790 <esp82xx_set_wifi_mode+0x44>
    {
    	sprintf((char *)temp_buffer, "AT+CWMODE=%d\r\n",mode);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	461a      	mov	r2, r3
 8000766:	490f      	ldr	r1, [pc, #60]	; (80007a4 <esp82xx_set_wifi_mode+0x58>)
 8000768:	480f      	ldr	r0, [pc, #60]	; (80007a8 <esp82xx_set_wifi_mode+0x5c>)
 800076a:	f000 fbb3 	bl	8000ed4 <siprintf>
    	esp82xx_send_cmd((const char *) temp_buffer);
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <esp82xx_set_wifi_mode+0x5c>)
 8000770:	f000 f9ea 	bl	8000b48 <esp82xx_send_cmd>
		systick_delay_ms(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000778:	f7ff fef2 	bl	8000560 <systick_delay_ms>

		if(is_response)
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <esp82xx_set_wifi_mode+0x60>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <esp82xx_set_wifi_mode+0x3e>
		{
			/*Success*/

			return 1;
 8000786:	2301      	movs	r3, #1
 8000788:	e006      	b.n	8000798 <esp82xx_set_wifi_mode+0x4c>
		}
		num_of_try--;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3b01      	subs	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
    while(num_of_try)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1e5      	bne.n	8000762 <esp82xx_set_wifi_mode+0x16>

    }

    return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	080021f8 	.word	0x080021f8
 80007a4:	0800220c 	.word	0x0800220c
 80007a8:	200008d4 	.word	0x200008d4
 80007ac:	20000091 	.word	0x20000091

080007b0 <esp82xx_list_access_points>:
/*List access points*/
static uint8_t esp82xx_list_access_points(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 80007b6:	230a      	movs	r3, #10
 80007b8:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <esp82xx_list_access_points+0x44>)
 80007bc:	f000 f882 	bl	80008c4 <wait_resp>

	while(num_of_try)
 80007c0:	e010      	b.n	80007e4 <esp82xx_list_access_points+0x34>

	{
		esp82xx_send_cmd("AT+CWLAP\r\n");
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <esp82xx_list_access_points+0x48>)
 80007c4:	f000 f9c0 	bl	8000b48 <esp82xx_send_cmd>
		systick_delay_ms(5000);
 80007c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80007cc:	f7ff fec8 	bl	8000560 <systick_delay_ms>
		if(is_response)
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <esp82xx_list_access_points+0x4c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <esp82xx_list_access_points+0x2e>
		{
			/*Success*/

			return 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	e006      	b.n	80007ec <esp82xx_list_access_points+0x3c>
		}
		num_of_try--;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1eb      	bne.n	80007c2 <esp82xx_list_access_points+0x12>

	}

    return 0;
 80007ea:	2300      	movs	r3, #0

}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	080021f8 	.word	0x080021f8
 80007f8:	0800221c 	.word	0x0800221c
 80007fc:	20000091 	.word	0x20000091

08000800 <exp82xx_join_wifi_access_point>:

/*Join access point*/
static uint8_t exp82xx_join_wifi_access_point(const char * ssid, const char * password)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 800080a:	230a      	movs	r3, #10
 800080c:	73fb      	strb	r3, [r7, #15]
	wait_resp("ok\r\n");
 800080e:	4811      	ldr	r0, [pc, #68]	; (8000854 <exp82xx_join_wifi_access_point+0x54>)
 8000810:	f000 f858 	bl	80008c4 <wait_resp>
	while(num_of_try)
 8000814:	e016      	b.n	8000844 <exp82xx_join_wifi_access_point+0x44>
	{
		sprintf((char *)temp_buffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	490f      	ldr	r1, [pc, #60]	; (8000858 <exp82xx_join_wifi_access_point+0x58>)
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <exp82xx_join_wifi_access_point+0x5c>)
 800081e:	f000 fb59 	bl	8000ed4 <siprintf>
		esp82xx_send_cmd((const char *)temp_buffer);
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <exp82xx_join_wifi_access_point+0x5c>)
 8000824:	f000 f990 	bl	8000b48 <esp82xx_send_cmd>
		systick_delay_ms(3000);
 8000828:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800082c:	f7ff fe98 	bl	8000560 <systick_delay_ms>
		if(is_response)
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <exp82xx_join_wifi_access_point+0x60>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <exp82xx_join_wifi_access_point+0x3e>
		{
			/*Success*/

			return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e006      	b.n	800084c <exp82xx_join_wifi_access_point+0x4c>
		}
		num_of_try--;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	3b01      	subs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
	while(num_of_try)
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1e5      	bne.n	8000816 <exp82xx_join_wifi_access_point+0x16>

	}
    return 0;
 800084a:	2300      	movs	r3, #0

}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	080021f8 	.word	0x080021f8
 8000858:	08002228 	.word	0x08002228
 800085c:	200008d4 	.word	0x200008d4
 8000860:	20000091 	.word	0x20000091

08000864 <esp82xx_dns_get_ip>:


/*Get domain name ip address*/

static uint8_t esp82xx_dns_get_ip(char *website)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	uint8_t num_of_try = MAX_NUM_OF_TRY;
 800086c:	230a      	movs	r3, #10
 800086e:	73fb      	strb	r3, [r7, #15]
	wait_resp("ok\r\n");
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <esp82xx_dns_get_ip+0x50>)
 8000872:	f000 f827 	bl	80008c4 <wait_resp>
	while(num_of_try)
 8000876:	e015      	b.n	80008a4 <esp82xx_dns_get_ip+0x40>
	{
		sprintf((char *)temp_buffer,"AT+CIPDOMAIN=\"%s\"\r\n",website);
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	490f      	ldr	r1, [pc, #60]	; (80008b8 <esp82xx_dns_get_ip+0x54>)
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <esp82xx_dns_get_ip+0x58>)
 800087e:	f000 fb29 	bl	8000ed4 <siprintf>
		esp82xx_send_cmd(temp_buffer);
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <esp82xx_dns_get_ip+0x58>)
 8000884:	f000 f960 	bl	8000b48 <esp82xx_send_cmd>
		systick_delay_ms(3000);
 8000888:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800088c:	f7ff fe68 	bl	8000560 <systick_delay_ms>
		if(is_response)
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <esp82xx_dns_get_ip+0x5c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <esp82xx_dns_get_ip+0x3a>
			{
				/*Success*/

				return 1;
 800089a:	2301      	movs	r3, #1
 800089c:	e006      	b.n	80008ac <esp82xx_dns_get_ip+0x48>
			}
		num_of_try--;
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
	while(num_of_try)
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1e6      	bne.n	8000878 <esp82xx_dns_get_ip+0x14>
	}
	return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	080021f8 	.word	0x080021f8
 80008b8:	08002288 	.word	0x08002288
 80008bc:	200008d4 	.word	0x200008d4
 80008c0:	20000091 	.word	0x20000091

080008c4 <wait_resp>:

}

/*Initialize string search in rx data stream*/
static void wait_resp(char *pt)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	strcpy(sub_str,pt);
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <wait_resp+0x2c>)
 80008d0:	f000 fb20 	bl	8000f14 <strcpy>
	search_idx 	=	0;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <wait_resp+0x30>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
	is_response	=   false;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <wait_resp+0x34>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
	searching	=   true;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <wait_resp+0x38>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200004b4 	.word	0x200004b4
 80008f4:	20000094 	.word	0x20000094
 80008f8:	20000091 	.word	0x20000091
 80008fc:	20000090 	.word	0x20000090

08000900 <lc>:

/*Convert to lowercase*/
char lc(char letter)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	if((letter >='A')&&(letter<='Z')) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b40      	cmp	r3, #64	; 0x40
 800090e:	d906      	bls.n	800091e <lc+0x1e>
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b5a      	cmp	r3, #90	; 0x5a
 8000914:	d803      	bhi.n	800091e <lc+0x1e>
		letter |=0x20;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f043 0320 	orr.w	r3, r3, #32
 800091c:	71fb      	strb	r3, [r7, #7]
	}
	return letter;
 800091e:	79fb      	ldrb	r3, [r7, #7]
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <search_check>:

/*Search for string in rx data stream*/
static void search_check(char letter)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	if(searching)
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <search_check+0x5c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d01f      	beq.n	8000980 <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == lc(letter))
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <search_check+0x60>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <search_check+0x64>)
 8000946:	5cd4      	ldrb	r4, [r2, r3]
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffd8 	bl	8000900 <lc>
 8000950:	4603      	mov	r3, r0
 8000952:	429c      	cmp	r4, r3
 8000954:	d111      	bne.n	800097a <search_check+0x4e>
		{
			search_idx++;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <search_check+0x60>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <search_check+0x60>)
 800095e:	6013      	str	r3, [r2, #0]

			/*Check if strings match*/
			if(sub_str[search_idx] == 0){
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <search_check+0x60>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <search_check+0x64>)
 8000966:	5cd3      	ldrb	r3, [r2, r3]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d109      	bne.n	8000980 <search_check+0x54>
				is_response = true;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <search_check+0x68>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <search_check+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx =  0;;
		}
	}
}
 8000978:	e002      	b.n	8000980 <search_check+0x54>
			search_idx =  0;;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <search_check+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	20000090 	.word	0x20000090
 800098c:	20000094 	.word	0x20000094
 8000990:	200004b4 	.word	0x200004b4
 8000994:	20000091 	.word	0x20000091

08000998 <esp_server_resp_srch_check>:

/*Search for server response in rx data stream*/
static void esp_server_resp_srch_check(char letter)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	if(server_resp_searching == 1)
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <esp_server_resp_srch_check+0xe0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d12a      	bne.n	8000a00 <esp_server_resp_srch_check+0x68>
	{
		/*Check if characters match*/
        if(server_resp_sub_str[server_resp_search_idx] == lc(letter) )
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a34      	ldr	r2, [pc, #208]	; (8000a80 <esp_server_resp_srch_check+0xe8>)
 80009b0:	5cd4      	ldrb	r4, [r2, r3]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffa3 	bl	8000900 <lc>
 80009ba:	4603      	mov	r3, r0
 80009bc:	429c      	cmp	r4, r3
 80009be:	d11b      	bne.n	80009f8 <esp_server_resp_srch_check+0x60>
        {
        	server_resp_search_idx++;
 80009c0:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 80009c8:	6013      	str	r3, [r2, #0]
			/*Check if strings match*/
        	if(server_resp_sub_str[server_resp_search_idx] ==  0)
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <esp_server_resp_srch_check+0xe8>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d14c      	bne.n	8000a70 <esp_server_resp_srch_check+0xd8>
        	{
        		server_resp_searching =  2;
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <esp_server_resp_srch_check+0xe0>)
 80009d8:	2202      	movs	r2, #2
 80009da:	601a      	str	r2, [r3, #0]
        		strcpy(server_resp_sub_str,"\n\rok\r\n");
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <esp_server_resp_srch_check+0xe8>)
 80009de:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <esp_server_resp_srch_check+0xec>)
 80009e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e4:	6018      	str	r0, [r3, #0]
 80009e6:	3304      	adds	r3, #4
 80009e8:	8019      	strh	r1, [r3, #0]
 80009ea:	3302      	adds	r3, #2
 80009ec:	0c0a      	lsrs	r2, r1, #16
 80009ee:	701a      	strb	r2, [r3, #0]
        		server_resp_search_idx = 0;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
		 else{
			 /*Start over*/
			   server_resp_search_idx = 0;
		 }
	}
}
 80009f6:	e03b      	b.n	8000a70 <esp_server_resp_srch_check+0xd8>
    		server_resp_search_idx = 0;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
}
 80009fe:	e037      	b.n	8000a70 <esp_server_resp_srch_check+0xd8>
	else if(server_resp_searching == 2)
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <esp_server_resp_srch_check+0xe0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d133      	bne.n	8000a70 <esp_server_resp_srch_check+0xd8>
		if(server_resp_idx < SERVER_REPSONSE_SIZE){
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <esp_server_resp_srch_check+0xf0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a10:	da0e      	bge.n	8000a30 <esp_server_resp_srch_check+0x98>
			server_resp_buffer[server_resp_idx] =  lc(letter);
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <esp_server_resp_srch_check+0xf0>)
 8000a14:	681c      	ldr	r4, [r3, #0]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff71 	bl	8000900 <lc>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <esp_server_resp_srch_check+0xf4>)
 8000a24:	551a      	strb	r2, [r3, r4]
			server_resp_idx++;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <esp_server_resp_srch_check+0xf0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <esp_server_resp_srch_check+0xf0>)
 8000a2e:	6013      	str	r3, [r2, #0]
		 if(server_resp_sub_str[server_resp_search_idx] == lc(letter) )
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <esp_server_resp_srch_check+0xe8>)
 8000a36:	5cd4      	ldrb	r4, [r2, r3]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff60 	bl	8000900 <lc>
 8000a40:	4603      	mov	r3, r0
 8000a42:	429c      	cmp	r4, r3
 8000a44:	d111      	bne.n	8000a6a <esp_server_resp_srch_check+0xd2>
	        	server_resp_search_idx++;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 8000a4e:	6013      	str	r3, [r2, #0]
	        	if(server_resp_sub_str[server_resp_search_idx] ==  0)
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <esp_server_resp_srch_check+0xe8>)
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d109      	bne.n	8000a70 <esp_server_resp_srch_check+0xd8>
	        		server_search_resp_cmplt =  true;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <esp_server_resp_srch_check+0xf8>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
	        		server_resp_searching    = 0 ;
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <esp_server_resp_srch_check+0xe0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	e002      	b.n	8000a70 <esp_server_resp_srch_check+0xd8>
			   server_resp_search_idx = 0;
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <esp_server_resp_srch_check+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	200000a0 	.word	0x200000a0
 8000a7c:	2000009c 	.word	0x2000009c
 8000a80:	20000000 	.word	0x20000000
 8000a84:	080022a4 	.word	0x080022a4
 8000a88:	200000a4 	.word	0x200000a4
 8000a8c:	200004d4 	.word	0x200004d4
 8000a90:	20000098 	.word	0x20000098

08000a94 <copy_software_to_hardware>:

/*Copy content of tx_fifo in Debug UART DR*/
static void copy_software_to_hardware(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	char letter;
	while((USART2->SR & SR_TXE) && tx_fifo_size()> 0){
 8000a9a:	e006      	b.n	8000aaa <copy_software_to_hardware+0x16>
		tx_fifo_get(&letter);
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f8ac 	bl	8000bfc <tx_fifo_get>
		USART2->DR = letter;
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <copy_software_to_hardware+0x34>)
 8000aa8:	605a      	str	r2, [r3, #4]
	while((USART2->SR & SR_TXE) && tx_fifo_size()> 0){
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <copy_software_to_hardware+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <copy_software_to_hardware+0x2c>
 8000ab6:	f000 f8c7 	bl	8000c48 <tx_fifo_size>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1ed      	bne.n	8000a9c <copy_software_to_hardware+0x8>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004400 	.word	0x40004400

08000acc <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	if(tx_fifo_put(data) ==  FIFOFAIL)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f863 	bl	8000ba4 <tx_fifo_put>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <uart_output_char+0x1e>
	{
		return;
	}
	copy_software_to_hardware();
 8000ae4:	f7ff ffd6 	bl	8000a94 <copy_software_to_hardware>
 8000ae8:	e000      	b.n	8000aec <uart_output_char+0x20>
		return;
 8000aea:	bf00      	nop

}
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <esp82xx_process_data>:

 static void esp82xx_process_data(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there new data in wifi uart data register*/
	if(USART1->SR & SR_RXNE)
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <esp82xx_process_data+0x38>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00e      	beq.n	8000b24 <esp82xx_process_data+0x30>
	{
		/*Store data from wifi uart data register in local variable*/
		letter = USART1->DR;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <esp82xx_process_data+0x38>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	71fb      	strb	r3, [r7, #7]

		/*Print data from wifi uart data register to debug uart i.e computer*/
		uart_output_char(letter);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffdc 	bl	8000acc <uart_output_char>

		/*Check for response*/
		search_check(letter);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff08 	bl	800092c <search_check>

		/*Check for server response*/
		esp_server_resp_srch_check(letter);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff3a 	bl	8000998 <esp_server_resp_srch_check>


	}
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40011000 	.word	0x40011000

08000b30 <esp_uart_callback>:


/*Call back function for esp82xx uart*/

static void esp_uart_callback(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	esp82xx_process_data();
 8000b34:	f7ff ffde 	bl	8000af4 <esp82xx_process_data>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <USART1_IRQHandler>:

/*esp82xx uart irqhandler*/
void USART1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	esp_uart_callback();
 8000b40:	f7ff fff6 	bl	8000b30 <esp_uart_callback>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <esp82xx_send_cmd>:


/*Send command to esp82xx*/
static void esp82xx_send_cmd(const char * cmd)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	int index = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
   	while(cmd[index] !=0 )
 8000b54:	e009      	b.n	8000b6a <esp82xx_send_cmd+0x22>
   	{
   		esp_uart_write_char(cmd[index++]);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	60fa      	str	r2, [r7, #12]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fccb 	bl	8000500 <esp_uart_write_char>
   	while(cmd[index] !=0 )
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1ef      	bne.n	8000b56 <esp82xx_send_cmd+0xe>
   	}
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <tx_fifo_init>:
uint32_t volatile rx_get_itr;


/*Initialize tx fifo*/
void tx_fifo_init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <tx_fifo_init+0x1c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <tx_fifo_init+0x20>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000ce0 	.word	0x20000ce0
 8000ba0:	20000cdc 	.word	0x20000cdc

08000ba4 <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t  tx_fifo_put(tx_dataType data)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <tx_fifo_put+0x4c>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <tx_fifo_put+0x50>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bbc:	f023 0303 	bic.w	r3, r3, #3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <tx_fifo_put+0x24>
	{
		/*Fifo is full*/
		return(TXFAIL);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e00c      	b.n	8000be2 <tx_fifo_put+0x3e>
	}

	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE -1)] = data;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <tx_fifo_put+0x4c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bd0:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <tx_fifo_put+0x54>)
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <tx_fifo_put+0x4c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <tx_fifo_put+0x4c>)
 8000bde:	6013      	str	r3, [r2, #0]
	return(TXSUCCESS);
 8000be0:	2301      	movs	r3, #1

}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000ce0 	.word	0x20000ce0
 8000bf4:	20000cdc 	.word	0x20000cdc
 8000bf8:	200000a8 	.word	0x200000a8

08000bfc <tx_fifo_get>:

uint8_t  tx_fifo_get(tx_dataType *pdata)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr){
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <tx_fifo_get+0x40>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <tx_fifo_get+0x44>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d101      	bne.n	8000c14 <tx_fifo_get+0x18>

		/*Fifo empty*/
		return(TXFAIL);
 8000c10:	2300      	movs	r3, #0
 8000c12:	e00d      	b.n	8000c30 <tx_fifo_get+0x34>

	}
	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE -1)];
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <tx_fifo_get+0x44>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <tx_fifo_get+0x48>)
 8000c1e:	5cd2      	ldrb	r2, [r2, r3]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <tx_fifo_get+0x44>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <tx_fifo_get+0x44>)
 8000c2c:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20000ce0 	.word	0x20000ce0
 8000c40:	20000cdc 	.word	0x20000cdc
 8000c44:	200000a8 	.word	0x200000a8

08000c48 <tx_fifo_size>:

uint32_t tx_fifo_size(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr - tx_get_itr);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <tx_fifo_size+0x18>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <tx_fifo_size+0x1c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	20000ce0 	.word	0x20000ce0
 8000c64:	20000cdc 	.word	0x20000cdc

08000c68 <rx_fifo_init>:


/*Initialize rx fifo*/
void rx_fifo_init(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <rx_fifo_init+0x1c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <rx_fifo_init+0x20>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000cd4 	.word	0x20000cd4
 8000c88:	20000cd8 	.word	0x20000cd8

08000c8c <main>:

#define SSID_NAME  "TP-Link_9A4E"
#define PASSKEY    "94933581"

int main()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

	esp82xx_init(SSID_NAME,PASSKEY);
 8000c90:	4902      	ldr	r1, [pc, #8]	; (8000c9c <main+0x10>)
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <main+0x14>)
 8000c94:	f7ff fcc0 	bl	8000618 <esp82xx_init>

	while(1)
 8000c98:	e7fe      	b.n	8000c98 <main+0xc>
 8000c9a:	bf00      	nop
 8000c9c:	080022ac 	.word	0x080022ac
 8000ca0:	080022b8 	.word	0x080022b8

08000ca4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
	}

return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fac1 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
	}
	return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f000 f846 	bl	8000e40 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200004a8 	.word	0x200004a8
 8000de8:	20000cf8 	.word	0x20000cf8

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000df0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f000 f817 	bl	8000e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff ff35 	bl	8000c8c <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e30:	08002368 	.word	0x08002368
  ldr r2, =_sbss
 8000e34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e38:	20000cf4 	.word	0x20000cf4

08000e3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <__errno>:
 8000e40:	4b01      	ldr	r3, [pc, #4]	; (8000e48 <__errno+0x8>)
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000010 	.word	0x20000010

08000e4c <__libc_init_array>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4d0d      	ldr	r5, [pc, #52]	; (8000e84 <__libc_init_array+0x38>)
 8000e50:	4c0d      	ldr	r4, [pc, #52]	; (8000e88 <__libc_init_array+0x3c>)
 8000e52:	1b64      	subs	r4, r4, r5
 8000e54:	10a4      	asrs	r4, r4, #2
 8000e56:	2600      	movs	r6, #0
 8000e58:	42a6      	cmp	r6, r4
 8000e5a:	d109      	bne.n	8000e70 <__libc_init_array+0x24>
 8000e5c:	4d0b      	ldr	r5, [pc, #44]	; (8000e8c <__libc_init_array+0x40>)
 8000e5e:	4c0c      	ldr	r4, [pc, #48]	; (8000e90 <__libc_init_array+0x44>)
 8000e60:	f001 f950 	bl	8002104 <_init>
 8000e64:	1b64      	subs	r4, r4, r5
 8000e66:	10a4      	asrs	r4, r4, #2
 8000e68:	2600      	movs	r6, #0
 8000e6a:	42a6      	cmp	r6, r4
 8000e6c:	d105      	bne.n	8000e7a <__libc_init_array+0x2e>
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e74:	4798      	blx	r3
 8000e76:	3601      	adds	r6, #1
 8000e78:	e7ee      	b.n	8000e58 <__libc_init_array+0xc>
 8000e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7e:	4798      	blx	r3
 8000e80:	3601      	adds	r6, #1
 8000e82:	e7f2      	b.n	8000e6a <__libc_init_array+0x1e>
 8000e84:	08002360 	.word	0x08002360
 8000e88:	08002360 	.word	0x08002360
 8000e8c:	08002360 	.word	0x08002360
 8000e90:	08002364 	.word	0x08002364

08000e94 <memset>:
 8000e94:	4402      	add	r2, r0
 8000e96:	4603      	mov	r3, r0
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d100      	bne.n	8000e9e <memset+0xa>
 8000e9c:	4770      	bx	lr
 8000e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000ea2:	e7f9      	b.n	8000e98 <memset+0x4>

08000ea4 <iprintf>:
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <iprintf+0x2c>)
 8000ea8:	b513      	push	{r0, r1, r4, lr}
 8000eaa:	681c      	ldr	r4, [r3, #0]
 8000eac:	b124      	cbz	r4, 8000eb8 <iprintf+0x14>
 8000eae:	69a3      	ldr	r3, [r4, #24]
 8000eb0:	b913      	cbnz	r3, 8000eb8 <iprintf+0x14>
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f000 f88e 	bl	8000fd4 <__sinit>
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	9a04      	ldr	r2, [sp, #16]
 8000ebc:	68a1      	ldr	r1, [r4, #8]
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f000 fb07 	bl	80014d4 <_vfiprintf_r>
 8000ec6:	b002      	add	sp, #8
 8000ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr
 8000ed0:	20000010 	.word	0x20000010

08000ed4 <siprintf>:
 8000ed4:	b40e      	push	{r1, r2, r3}
 8000ed6:	b500      	push	{lr}
 8000ed8:	b09c      	sub	sp, #112	; 0x70
 8000eda:	ab1d      	add	r3, sp, #116	; 0x74
 8000edc:	9002      	str	r0, [sp, #8]
 8000ede:	9006      	str	r0, [sp, #24]
 8000ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <siprintf+0x38>)
 8000ee6:	9107      	str	r1, [sp, #28]
 8000ee8:	9104      	str	r1, [sp, #16]
 8000eea:	4909      	ldr	r1, [pc, #36]	; (8000f10 <siprintf+0x3c>)
 8000eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ef0:	9105      	str	r1, [sp, #20]
 8000ef2:	6800      	ldr	r0, [r0, #0]
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	a902      	add	r1, sp, #8
 8000ef8:	f000 f9c2 	bl	8001280 <_svfiprintf_r>
 8000efc:	9b02      	ldr	r3, [sp, #8]
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	b01c      	add	sp, #112	; 0x70
 8000f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f08:	b003      	add	sp, #12
 8000f0a:	4770      	bx	lr
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	ffff0208 	.word	0xffff0208

08000f14 <strcpy>:
 8000f14:	4603      	mov	r3, r0
 8000f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f1a:	f803 2b01 	strb.w	r2, [r3], #1
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d1f9      	bne.n	8000f16 <strcpy+0x2>
 8000f22:	4770      	bx	lr

08000f24 <std>:
 8000f24:	2300      	movs	r3, #0
 8000f26:	b510      	push	{r4, lr}
 8000f28:	4604      	mov	r4, r0
 8000f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8000f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f32:	6083      	str	r3, [r0, #8]
 8000f34:	8181      	strh	r1, [r0, #12]
 8000f36:	6643      	str	r3, [r0, #100]	; 0x64
 8000f38:	81c2      	strh	r2, [r0, #14]
 8000f3a:	6183      	str	r3, [r0, #24]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2208      	movs	r2, #8
 8000f40:	305c      	adds	r0, #92	; 0x5c
 8000f42:	f7ff ffa7 	bl	8000e94 <memset>
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <std+0x38>)
 8000f48:	6263      	str	r3, [r4, #36]	; 0x24
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <std+0x3c>)
 8000f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <std+0x40>)
 8000f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <std+0x44>)
 8000f54:	6224      	str	r4, [r4, #32]
 8000f56:	6323      	str	r3, [r4, #48]	; 0x30
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08001a7d 	.word	0x08001a7d
 8000f60:	08001a9f 	.word	0x08001a9f
 8000f64:	08001ad7 	.word	0x08001ad7
 8000f68:	08001afb 	.word	0x08001afb

08000f6c <_cleanup_r>:
 8000f6c:	4901      	ldr	r1, [pc, #4]	; (8000f74 <_cleanup_r+0x8>)
 8000f6e:	f000 b8af 	b.w	80010d0 <_fwalk_reent>
 8000f72:	bf00      	nop
 8000f74:	08001dd5 	.word	0x08001dd5

08000f78 <__sfmoreglue>:
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	1e4a      	subs	r2, r1, #1
 8000f7c:	2568      	movs	r5, #104	; 0x68
 8000f7e:	4355      	muls	r5, r2
 8000f80:	460e      	mov	r6, r1
 8000f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f86:	f000 f8c5 	bl	8001114 <_malloc_r>
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	b140      	cbz	r0, 8000fa0 <__sfmoreglue+0x28>
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e9c0 1600 	strd	r1, r6, [r0]
 8000f94:	300c      	adds	r0, #12
 8000f96:	60a0      	str	r0, [r4, #8]
 8000f98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f9c:	f7ff ff7a 	bl	8000e94 <memset>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}

08000fa4 <__sfp_lock_acquire>:
 8000fa4:	4801      	ldr	r0, [pc, #4]	; (8000fac <__sfp_lock_acquire+0x8>)
 8000fa6:	f000 b8b3 	b.w	8001110 <__retarget_lock_acquire_recursive>
 8000faa:	bf00      	nop
 8000fac:	20000cec 	.word	0x20000cec

08000fb0 <__sfp_lock_release>:
 8000fb0:	4801      	ldr	r0, [pc, #4]	; (8000fb8 <__sfp_lock_release+0x8>)
 8000fb2:	f000 b8ae 	b.w	8001112 <__retarget_lock_release_recursive>
 8000fb6:	bf00      	nop
 8000fb8:	20000cec 	.word	0x20000cec

08000fbc <__sinit_lock_acquire>:
 8000fbc:	4801      	ldr	r0, [pc, #4]	; (8000fc4 <__sinit_lock_acquire+0x8>)
 8000fbe:	f000 b8a7 	b.w	8001110 <__retarget_lock_acquire_recursive>
 8000fc2:	bf00      	nop
 8000fc4:	20000ce7 	.word	0x20000ce7

08000fc8 <__sinit_lock_release>:
 8000fc8:	4801      	ldr	r0, [pc, #4]	; (8000fd0 <__sinit_lock_release+0x8>)
 8000fca:	f000 b8a2 	b.w	8001112 <__retarget_lock_release_recursive>
 8000fce:	bf00      	nop
 8000fd0:	20000ce7 	.word	0x20000ce7

08000fd4 <__sinit>:
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	f7ff fff0 	bl	8000fbc <__sinit_lock_acquire>
 8000fdc:	69a3      	ldr	r3, [r4, #24]
 8000fde:	b11b      	cbz	r3, 8000fe8 <__sinit+0x14>
 8000fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe4:	f7ff bff0 	b.w	8000fc8 <__sinit_lock_release>
 8000fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000fec:	6523      	str	r3, [r4, #80]	; 0x50
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <__sinit+0x68>)
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <__sinit+0x6c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	bf04      	itt	eq
 8000ffa:	2301      	moveq	r3, #1
 8000ffc:	61a3      	streq	r3, [r4, #24]
 8000ffe:	4620      	mov	r0, r4
 8001000:	f000 f820 	bl	8001044 <__sfp>
 8001004:	6060      	str	r0, [r4, #4]
 8001006:	4620      	mov	r0, r4
 8001008:	f000 f81c 	bl	8001044 <__sfp>
 800100c:	60a0      	str	r0, [r4, #8]
 800100e:	4620      	mov	r0, r4
 8001010:	f000 f818 	bl	8001044 <__sfp>
 8001014:	2200      	movs	r2, #0
 8001016:	60e0      	str	r0, [r4, #12]
 8001018:	2104      	movs	r1, #4
 800101a:	6860      	ldr	r0, [r4, #4]
 800101c:	f7ff ff82 	bl	8000f24 <std>
 8001020:	68a0      	ldr	r0, [r4, #8]
 8001022:	2201      	movs	r2, #1
 8001024:	2109      	movs	r1, #9
 8001026:	f7ff ff7d 	bl	8000f24 <std>
 800102a:	68e0      	ldr	r0, [r4, #12]
 800102c:	2202      	movs	r2, #2
 800102e:	2112      	movs	r1, #18
 8001030:	f7ff ff78 	bl	8000f24 <std>
 8001034:	2301      	movs	r3, #1
 8001036:	61a3      	str	r3, [r4, #24]
 8001038:	e7d2      	b.n	8000fe0 <__sinit+0xc>
 800103a:	bf00      	nop
 800103c:	080022c8 	.word	0x080022c8
 8001040:	08000f6d 	.word	0x08000f6d

08001044 <__sfp>:
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001046:	4607      	mov	r7, r0
 8001048:	f7ff ffac 	bl	8000fa4 <__sfp_lock_acquire>
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <__sfp+0x84>)
 800104e:	681e      	ldr	r6, [r3, #0]
 8001050:	69b3      	ldr	r3, [r6, #24]
 8001052:	b913      	cbnz	r3, 800105a <__sfp+0x16>
 8001054:	4630      	mov	r0, r6
 8001056:	f7ff ffbd 	bl	8000fd4 <__sinit>
 800105a:	3648      	adds	r6, #72	; 0x48
 800105c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001060:	3b01      	subs	r3, #1
 8001062:	d503      	bpl.n	800106c <__sfp+0x28>
 8001064:	6833      	ldr	r3, [r6, #0]
 8001066:	b30b      	cbz	r3, 80010ac <__sfp+0x68>
 8001068:	6836      	ldr	r6, [r6, #0]
 800106a:	e7f7      	b.n	800105c <__sfp+0x18>
 800106c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001070:	b9d5      	cbnz	r5, 80010a8 <__sfp+0x64>
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <__sfp+0x88>)
 8001074:	60e3      	str	r3, [r4, #12]
 8001076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800107a:	6665      	str	r5, [r4, #100]	; 0x64
 800107c:	f000 f847 	bl	800110e <__retarget_lock_init_recursive>
 8001080:	f7ff ff96 	bl	8000fb0 <__sfp_lock_release>
 8001084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800108c:	6025      	str	r5, [r4, #0]
 800108e:	61a5      	str	r5, [r4, #24]
 8001090:	2208      	movs	r2, #8
 8001092:	4629      	mov	r1, r5
 8001094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001098:	f7ff fefc 	bl	8000e94 <memset>
 800109c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80010a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80010a4:	4620      	mov	r0, r4
 80010a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010a8:	3468      	adds	r4, #104	; 0x68
 80010aa:	e7d9      	b.n	8001060 <__sfp+0x1c>
 80010ac:	2104      	movs	r1, #4
 80010ae:	4638      	mov	r0, r7
 80010b0:	f7ff ff62 	bl	8000f78 <__sfmoreglue>
 80010b4:	4604      	mov	r4, r0
 80010b6:	6030      	str	r0, [r6, #0]
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d1d5      	bne.n	8001068 <__sfp+0x24>
 80010bc:	f7ff ff78 	bl	8000fb0 <__sfp_lock_release>
 80010c0:	230c      	movs	r3, #12
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	e7ee      	b.n	80010a4 <__sfp+0x60>
 80010c6:	bf00      	nop
 80010c8:	080022c8 	.word	0x080022c8
 80010cc:	ffff0001 	.word	0xffff0001

080010d0 <_fwalk_reent>:
 80010d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010d4:	4606      	mov	r6, r0
 80010d6:	4688      	mov	r8, r1
 80010d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80010dc:	2700      	movs	r7, #0
 80010de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010e2:	f1b9 0901 	subs.w	r9, r9, #1
 80010e6:	d505      	bpl.n	80010f4 <_fwalk_reent+0x24>
 80010e8:	6824      	ldr	r4, [r4, #0]
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d1f7      	bne.n	80010de <_fwalk_reent+0xe>
 80010ee:	4638      	mov	r0, r7
 80010f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010f4:	89ab      	ldrh	r3, [r5, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d907      	bls.n	800110a <_fwalk_reent+0x3a>
 80010fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010fe:	3301      	adds	r3, #1
 8001100:	d003      	beq.n	800110a <_fwalk_reent+0x3a>
 8001102:	4629      	mov	r1, r5
 8001104:	4630      	mov	r0, r6
 8001106:	47c0      	blx	r8
 8001108:	4307      	orrs	r7, r0
 800110a:	3568      	adds	r5, #104	; 0x68
 800110c:	e7e9      	b.n	80010e2 <_fwalk_reent+0x12>

0800110e <__retarget_lock_init_recursive>:
 800110e:	4770      	bx	lr

08001110 <__retarget_lock_acquire_recursive>:
 8001110:	4770      	bx	lr

08001112 <__retarget_lock_release_recursive>:
 8001112:	4770      	bx	lr

08001114 <_malloc_r>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	1ccd      	adds	r5, r1, #3
 8001118:	f025 0503 	bic.w	r5, r5, #3
 800111c:	3508      	adds	r5, #8
 800111e:	2d0c      	cmp	r5, #12
 8001120:	bf38      	it	cc
 8001122:	250c      	movcc	r5, #12
 8001124:	2d00      	cmp	r5, #0
 8001126:	4606      	mov	r6, r0
 8001128:	db01      	blt.n	800112e <_malloc_r+0x1a>
 800112a:	42a9      	cmp	r1, r5
 800112c:	d903      	bls.n	8001136 <_malloc_r+0x22>
 800112e:	230c      	movs	r3, #12
 8001130:	6033      	str	r3, [r6, #0]
 8001132:	2000      	movs	r0, #0
 8001134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001136:	f000 ff27 	bl	8001f88 <__malloc_lock>
 800113a:	4921      	ldr	r1, [pc, #132]	; (80011c0 <_malloc_r+0xac>)
 800113c:	680a      	ldr	r2, [r1, #0]
 800113e:	4614      	mov	r4, r2
 8001140:	b99c      	cbnz	r4, 800116a <_malloc_r+0x56>
 8001142:	4f20      	ldr	r7, [pc, #128]	; (80011c4 <_malloc_r+0xb0>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b923      	cbnz	r3, 8001152 <_malloc_r+0x3e>
 8001148:	4621      	mov	r1, r4
 800114a:	4630      	mov	r0, r6
 800114c:	f000 fc86 	bl	8001a5c <_sbrk_r>
 8001150:	6038      	str	r0, [r7, #0]
 8001152:	4629      	mov	r1, r5
 8001154:	4630      	mov	r0, r6
 8001156:	f000 fc81 	bl	8001a5c <_sbrk_r>
 800115a:	1c43      	adds	r3, r0, #1
 800115c:	d123      	bne.n	80011a6 <_malloc_r+0x92>
 800115e:	230c      	movs	r3, #12
 8001160:	6033      	str	r3, [r6, #0]
 8001162:	4630      	mov	r0, r6
 8001164:	f000 ff16 	bl	8001f94 <__malloc_unlock>
 8001168:	e7e3      	b.n	8001132 <_malloc_r+0x1e>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	1b5b      	subs	r3, r3, r5
 800116e:	d417      	bmi.n	80011a0 <_malloc_r+0x8c>
 8001170:	2b0b      	cmp	r3, #11
 8001172:	d903      	bls.n	800117c <_malloc_r+0x68>
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	441c      	add	r4, r3
 8001178:	6025      	str	r5, [r4, #0]
 800117a:	e004      	b.n	8001186 <_malloc_r+0x72>
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	42a2      	cmp	r2, r4
 8001180:	bf0c      	ite	eq
 8001182:	600b      	streq	r3, [r1, #0]
 8001184:	6053      	strne	r3, [r2, #4]
 8001186:	4630      	mov	r0, r6
 8001188:	f000 ff04 	bl	8001f94 <__malloc_unlock>
 800118c:	f104 000b 	add.w	r0, r4, #11
 8001190:	1d23      	adds	r3, r4, #4
 8001192:	f020 0007 	bic.w	r0, r0, #7
 8001196:	1ac2      	subs	r2, r0, r3
 8001198:	d0cc      	beq.n	8001134 <_malloc_r+0x20>
 800119a:	1a1b      	subs	r3, r3, r0
 800119c:	50a3      	str	r3, [r4, r2]
 800119e:	e7c9      	b.n	8001134 <_malloc_r+0x20>
 80011a0:	4622      	mov	r2, r4
 80011a2:	6864      	ldr	r4, [r4, #4]
 80011a4:	e7cc      	b.n	8001140 <_malloc_r+0x2c>
 80011a6:	1cc4      	adds	r4, r0, #3
 80011a8:	f024 0403 	bic.w	r4, r4, #3
 80011ac:	42a0      	cmp	r0, r4
 80011ae:	d0e3      	beq.n	8001178 <_malloc_r+0x64>
 80011b0:	1a21      	subs	r1, r4, r0
 80011b2:	4630      	mov	r0, r6
 80011b4:	f000 fc52 	bl	8001a5c <_sbrk_r>
 80011b8:	3001      	adds	r0, #1
 80011ba:	d1dd      	bne.n	8001178 <_malloc_r+0x64>
 80011bc:	e7cf      	b.n	800115e <_malloc_r+0x4a>
 80011be:	bf00      	nop
 80011c0:	200004ac 	.word	0x200004ac
 80011c4:	200004b0 	.word	0x200004b0

080011c8 <__ssputs_r>:
 80011c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011cc:	688e      	ldr	r6, [r1, #8]
 80011ce:	429e      	cmp	r6, r3
 80011d0:	4682      	mov	sl, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4690      	mov	r8, r2
 80011d6:	461f      	mov	r7, r3
 80011d8:	d838      	bhi.n	800124c <__ssputs_r+0x84>
 80011da:	898a      	ldrh	r2, [r1, #12]
 80011dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80011e0:	d032      	beq.n	8001248 <__ssputs_r+0x80>
 80011e2:	6825      	ldr	r5, [r4, #0]
 80011e4:	6909      	ldr	r1, [r1, #16]
 80011e6:	eba5 0901 	sub.w	r9, r5, r1
 80011ea:	6965      	ldr	r5, [r4, #20]
 80011ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80011f4:	3301      	adds	r3, #1
 80011f6:	444b      	add	r3, r9
 80011f8:	106d      	asrs	r5, r5, #1
 80011fa:	429d      	cmp	r5, r3
 80011fc:	bf38      	it	cc
 80011fe:	461d      	movcc	r5, r3
 8001200:	0553      	lsls	r3, r2, #21
 8001202:	d531      	bpl.n	8001268 <__ssputs_r+0xa0>
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff ff85 	bl	8001114 <_malloc_r>
 800120a:	4606      	mov	r6, r0
 800120c:	b950      	cbnz	r0, 8001224 <__ssputs_r+0x5c>
 800120e:	230c      	movs	r3, #12
 8001210:	f8ca 3000 	str.w	r3, [sl]
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	81a3      	strh	r3, [r4, #12]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	6921      	ldr	r1, [r4, #16]
 8001226:	464a      	mov	r2, r9
 8001228:	f000 fe86 	bl	8001f38 <memcpy>
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	6126      	str	r6, [r4, #16]
 800123a:	6165      	str	r5, [r4, #20]
 800123c:	444e      	add	r6, r9
 800123e:	eba5 0509 	sub.w	r5, r5, r9
 8001242:	6026      	str	r6, [r4, #0]
 8001244:	60a5      	str	r5, [r4, #8]
 8001246:	463e      	mov	r6, r7
 8001248:	42be      	cmp	r6, r7
 800124a:	d900      	bls.n	800124e <__ssputs_r+0x86>
 800124c:	463e      	mov	r6, r7
 800124e:	4632      	mov	r2, r6
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	4641      	mov	r1, r8
 8001254:	f000 fe7e 	bl	8001f54 <memmove>
 8001258:	68a3      	ldr	r3, [r4, #8]
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	1b9b      	subs	r3, r3, r6
 800125e:	4432      	add	r2, r6
 8001260:	60a3      	str	r3, [r4, #8]
 8001262:	6022      	str	r2, [r4, #0]
 8001264:	2000      	movs	r0, #0
 8001266:	e7db      	b.n	8001220 <__ssputs_r+0x58>
 8001268:	462a      	mov	r2, r5
 800126a:	f000 fee9 	bl	8002040 <_realloc_r>
 800126e:	4606      	mov	r6, r0
 8001270:	2800      	cmp	r0, #0
 8001272:	d1e1      	bne.n	8001238 <__ssputs_r+0x70>
 8001274:	6921      	ldr	r1, [r4, #16]
 8001276:	4650      	mov	r0, sl
 8001278:	f000 fe92 	bl	8001fa0 <_free_r>
 800127c:	e7c7      	b.n	800120e <__ssputs_r+0x46>
	...

08001280 <_svfiprintf_r>:
 8001280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	4698      	mov	r8, r3
 8001286:	898b      	ldrh	r3, [r1, #12]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	b09d      	sub	sp, #116	; 0x74
 800128c:	4607      	mov	r7, r0
 800128e:	460d      	mov	r5, r1
 8001290:	4614      	mov	r4, r2
 8001292:	d50e      	bpl.n	80012b2 <_svfiprintf_r+0x32>
 8001294:	690b      	ldr	r3, [r1, #16]
 8001296:	b963      	cbnz	r3, 80012b2 <_svfiprintf_r+0x32>
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	f7ff ff3b 	bl	8001114 <_malloc_r>
 800129e:	6028      	str	r0, [r5, #0]
 80012a0:	6128      	str	r0, [r5, #16]
 80012a2:	b920      	cbnz	r0, 80012ae <_svfiprintf_r+0x2e>
 80012a4:	230c      	movs	r3, #12
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	e0d1      	b.n	8001452 <_svfiprintf_r+0x1d2>
 80012ae:	2340      	movs	r3, #64	; 0x40
 80012b0:	616b      	str	r3, [r5, #20]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9309      	str	r3, [sp, #36]	; 0x24
 80012b6:	2320      	movs	r3, #32
 80012b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80012c0:	2330      	movs	r3, #48	; 0x30
 80012c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800146c <_svfiprintf_r+0x1ec>
 80012c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012ca:	f04f 0901 	mov.w	r9, #1
 80012ce:	4623      	mov	r3, r4
 80012d0:	469a      	mov	sl, r3
 80012d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012d6:	b10a      	cbz	r2, 80012dc <_svfiprintf_r+0x5c>
 80012d8:	2a25      	cmp	r2, #37	; 0x25
 80012da:	d1f9      	bne.n	80012d0 <_svfiprintf_r+0x50>
 80012dc:	ebba 0b04 	subs.w	fp, sl, r4
 80012e0:	d00b      	beq.n	80012fa <_svfiprintf_r+0x7a>
 80012e2:	465b      	mov	r3, fp
 80012e4:	4622      	mov	r2, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	4638      	mov	r0, r7
 80012ea:	f7ff ff6d 	bl	80011c8 <__ssputs_r>
 80012ee:	3001      	adds	r0, #1
 80012f0:	f000 80aa 	beq.w	8001448 <_svfiprintf_r+0x1c8>
 80012f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012f6:	445a      	add	r2, fp
 80012f8:	9209      	str	r2, [sp, #36]	; 0x24
 80012fa:	f89a 3000 	ldrb.w	r3, [sl]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80a2 	beq.w	8001448 <_svfiprintf_r+0x1c8>
 8001304:	2300      	movs	r3, #0
 8001306:	f04f 32ff 	mov.w	r2, #4294967295
 800130a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800130e:	f10a 0a01 	add.w	sl, sl, #1
 8001312:	9304      	str	r3, [sp, #16]
 8001314:	9307      	str	r3, [sp, #28]
 8001316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800131a:	931a      	str	r3, [sp, #104]	; 0x68
 800131c:	4654      	mov	r4, sl
 800131e:	2205      	movs	r2, #5
 8001320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001324:	4851      	ldr	r0, [pc, #324]	; (800146c <_svfiprintf_r+0x1ec>)
 8001326:	f7fe ff5b 	bl	80001e0 <memchr>
 800132a:	9a04      	ldr	r2, [sp, #16]
 800132c:	b9d8      	cbnz	r0, 8001366 <_svfiprintf_r+0xe6>
 800132e:	06d0      	lsls	r0, r2, #27
 8001330:	bf44      	itt	mi
 8001332:	2320      	movmi	r3, #32
 8001334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001338:	0711      	lsls	r1, r2, #28
 800133a:	bf44      	itt	mi
 800133c:	232b      	movmi	r3, #43	; 0x2b
 800133e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001342:	f89a 3000 	ldrb.w	r3, [sl]
 8001346:	2b2a      	cmp	r3, #42	; 0x2a
 8001348:	d015      	beq.n	8001376 <_svfiprintf_r+0xf6>
 800134a:	9a07      	ldr	r2, [sp, #28]
 800134c:	4654      	mov	r4, sl
 800134e:	2000      	movs	r0, #0
 8001350:	f04f 0c0a 	mov.w	ip, #10
 8001354:	4621      	mov	r1, r4
 8001356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800135a:	3b30      	subs	r3, #48	; 0x30
 800135c:	2b09      	cmp	r3, #9
 800135e:	d94e      	bls.n	80013fe <_svfiprintf_r+0x17e>
 8001360:	b1b0      	cbz	r0, 8001390 <_svfiprintf_r+0x110>
 8001362:	9207      	str	r2, [sp, #28]
 8001364:	e014      	b.n	8001390 <_svfiprintf_r+0x110>
 8001366:	eba0 0308 	sub.w	r3, r0, r8
 800136a:	fa09 f303 	lsl.w	r3, r9, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	9304      	str	r3, [sp, #16]
 8001372:	46a2      	mov	sl, r4
 8001374:	e7d2      	b.n	800131c <_svfiprintf_r+0x9c>
 8001376:	9b03      	ldr	r3, [sp, #12]
 8001378:	1d19      	adds	r1, r3, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	9103      	str	r1, [sp, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfbb      	ittet	lt
 8001382:	425b      	neglt	r3, r3
 8001384:	f042 0202 	orrlt.w	r2, r2, #2
 8001388:	9307      	strge	r3, [sp, #28]
 800138a:	9307      	strlt	r3, [sp, #28]
 800138c:	bfb8      	it	lt
 800138e:	9204      	strlt	r2, [sp, #16]
 8001390:	7823      	ldrb	r3, [r4, #0]
 8001392:	2b2e      	cmp	r3, #46	; 0x2e
 8001394:	d10c      	bne.n	80013b0 <_svfiprintf_r+0x130>
 8001396:	7863      	ldrb	r3, [r4, #1]
 8001398:	2b2a      	cmp	r3, #42	; 0x2a
 800139a:	d135      	bne.n	8001408 <_svfiprintf_r+0x188>
 800139c:	9b03      	ldr	r3, [sp, #12]
 800139e:	1d1a      	adds	r2, r3, #4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	9203      	str	r2, [sp, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bfb8      	it	lt
 80013a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80013ac:	3402      	adds	r4, #2
 80013ae:	9305      	str	r3, [sp, #20]
 80013b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800147c <_svfiprintf_r+0x1fc>
 80013b4:	7821      	ldrb	r1, [r4, #0]
 80013b6:	2203      	movs	r2, #3
 80013b8:	4650      	mov	r0, sl
 80013ba:	f7fe ff11 	bl	80001e0 <memchr>
 80013be:	b140      	cbz	r0, 80013d2 <_svfiprintf_r+0x152>
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	eba0 000a 	sub.w	r0, r0, sl
 80013c6:	fa03 f000 	lsl.w	r0, r3, r0
 80013ca:	9b04      	ldr	r3, [sp, #16]
 80013cc:	4303      	orrs	r3, r0
 80013ce:	3401      	adds	r4, #1
 80013d0:	9304      	str	r3, [sp, #16]
 80013d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <_svfiprintf_r+0x1f0>)
 80013d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013dc:	2206      	movs	r2, #6
 80013de:	f7fe feff 	bl	80001e0 <memchr>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d038      	beq.n	8001458 <_svfiprintf_r+0x1d8>
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <_svfiprintf_r+0x1f4>)
 80013e8:	bb1b      	cbnz	r3, 8001432 <_svfiprintf_r+0x1b2>
 80013ea:	9b03      	ldr	r3, [sp, #12]
 80013ec:	3307      	adds	r3, #7
 80013ee:	f023 0307 	bic.w	r3, r3, #7
 80013f2:	3308      	adds	r3, #8
 80013f4:	9303      	str	r3, [sp, #12]
 80013f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f8:	4433      	add	r3, r6
 80013fa:	9309      	str	r3, [sp, #36]	; 0x24
 80013fc:	e767      	b.n	80012ce <_svfiprintf_r+0x4e>
 80013fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001402:	460c      	mov	r4, r1
 8001404:	2001      	movs	r0, #1
 8001406:	e7a5      	b.n	8001354 <_svfiprintf_r+0xd4>
 8001408:	2300      	movs	r3, #0
 800140a:	3401      	adds	r4, #1
 800140c:	9305      	str	r3, [sp, #20]
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 0c0a 	mov.w	ip, #10
 8001414:	4620      	mov	r0, r4
 8001416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800141a:	3a30      	subs	r2, #48	; 0x30
 800141c:	2a09      	cmp	r2, #9
 800141e:	d903      	bls.n	8001428 <_svfiprintf_r+0x1a8>
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0c5      	beq.n	80013b0 <_svfiprintf_r+0x130>
 8001424:	9105      	str	r1, [sp, #20]
 8001426:	e7c3      	b.n	80013b0 <_svfiprintf_r+0x130>
 8001428:	fb0c 2101 	mla	r1, ip, r1, r2
 800142c:	4604      	mov	r4, r0
 800142e:	2301      	movs	r3, #1
 8001430:	e7f0      	b.n	8001414 <_svfiprintf_r+0x194>
 8001432:	ab03      	add	r3, sp, #12
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	462a      	mov	r2, r5
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <_svfiprintf_r+0x1f8>)
 800143a:	a904      	add	r1, sp, #16
 800143c:	4638      	mov	r0, r7
 800143e:	f3af 8000 	nop.w
 8001442:	1c42      	adds	r2, r0, #1
 8001444:	4606      	mov	r6, r0
 8001446:	d1d6      	bne.n	80013f6 <_svfiprintf_r+0x176>
 8001448:	89ab      	ldrh	r3, [r5, #12]
 800144a:	065b      	lsls	r3, r3, #25
 800144c:	f53f af2c 	bmi.w	80012a8 <_svfiprintf_r+0x28>
 8001450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001452:	b01d      	add	sp, #116	; 0x74
 8001454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001458:	ab03      	add	r3, sp, #12
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	462a      	mov	r2, r5
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <_svfiprintf_r+0x1f8>)
 8001460:	a904      	add	r1, sp, #16
 8001462:	4638      	mov	r0, r7
 8001464:	f000 f9d4 	bl	8001810 <_printf_i>
 8001468:	e7eb      	b.n	8001442 <_svfiprintf_r+0x1c2>
 800146a:	bf00      	nop
 800146c:	0800232c 	.word	0x0800232c
 8001470:	08002336 	.word	0x08002336
 8001474:	00000000 	.word	0x00000000
 8001478:	080011c9 	.word	0x080011c9
 800147c:	08002332 	.word	0x08002332

08001480 <__sfputc_r>:
 8001480:	6893      	ldr	r3, [r2, #8]
 8001482:	3b01      	subs	r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	b410      	push	{r4}
 8001488:	6093      	str	r3, [r2, #8]
 800148a:	da08      	bge.n	800149e <__sfputc_r+0x1e>
 800148c:	6994      	ldr	r4, [r2, #24]
 800148e:	42a3      	cmp	r3, r4
 8001490:	db01      	blt.n	8001496 <__sfputc_r+0x16>
 8001492:	290a      	cmp	r1, #10
 8001494:	d103      	bne.n	800149e <__sfputc_r+0x1e>
 8001496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800149a:	f000 bb33 	b.w	8001b04 <__swbuf_r>
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	1c58      	adds	r0, r3, #1
 80014a2:	6010      	str	r0, [r2, #0]
 80014a4:	7019      	strb	r1, [r3, #0]
 80014a6:	4608      	mov	r0, r1
 80014a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <__sfputs_r>:
 80014ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b0:	4606      	mov	r6, r0
 80014b2:	460f      	mov	r7, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	18d5      	adds	r5, r2, r3
 80014b8:	42ac      	cmp	r4, r5
 80014ba:	d101      	bne.n	80014c0 <__sfputs_r+0x12>
 80014bc:	2000      	movs	r0, #0
 80014be:	e007      	b.n	80014d0 <__sfputs_r+0x22>
 80014c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014c4:	463a      	mov	r2, r7
 80014c6:	4630      	mov	r0, r6
 80014c8:	f7ff ffda 	bl	8001480 <__sfputc_r>
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d1f3      	bne.n	80014b8 <__sfputs_r+0xa>
 80014d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014d4 <_vfiprintf_r>:
 80014d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d8:	460d      	mov	r5, r1
 80014da:	b09d      	sub	sp, #116	; 0x74
 80014dc:	4614      	mov	r4, r2
 80014de:	4698      	mov	r8, r3
 80014e0:	4606      	mov	r6, r0
 80014e2:	b118      	cbz	r0, 80014ec <_vfiprintf_r+0x18>
 80014e4:	6983      	ldr	r3, [r0, #24]
 80014e6:	b90b      	cbnz	r3, 80014ec <_vfiprintf_r+0x18>
 80014e8:	f7ff fd74 	bl	8000fd4 <__sinit>
 80014ec:	4b89      	ldr	r3, [pc, #548]	; (8001714 <_vfiprintf_r+0x240>)
 80014ee:	429d      	cmp	r5, r3
 80014f0:	d11b      	bne.n	800152a <_vfiprintf_r+0x56>
 80014f2:	6875      	ldr	r5, [r6, #4]
 80014f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014f6:	07d9      	lsls	r1, r3, #31
 80014f8:	d405      	bmi.n	8001506 <_vfiprintf_r+0x32>
 80014fa:	89ab      	ldrh	r3, [r5, #12]
 80014fc:	059a      	lsls	r2, r3, #22
 80014fe:	d402      	bmi.n	8001506 <_vfiprintf_r+0x32>
 8001500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001502:	f7ff fe05 	bl	8001110 <__retarget_lock_acquire_recursive>
 8001506:	89ab      	ldrh	r3, [r5, #12]
 8001508:	071b      	lsls	r3, r3, #28
 800150a:	d501      	bpl.n	8001510 <_vfiprintf_r+0x3c>
 800150c:	692b      	ldr	r3, [r5, #16]
 800150e:	b9eb      	cbnz	r3, 800154c <_vfiprintf_r+0x78>
 8001510:	4629      	mov	r1, r5
 8001512:	4630      	mov	r0, r6
 8001514:	f000 fb5a 	bl	8001bcc <__swsetup_r>
 8001518:	b1c0      	cbz	r0, 800154c <_vfiprintf_r+0x78>
 800151a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800151c:	07dc      	lsls	r4, r3, #31
 800151e:	d50e      	bpl.n	800153e <_vfiprintf_r+0x6a>
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	b01d      	add	sp, #116	; 0x74
 8001526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800152a:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <_vfiprintf_r+0x244>)
 800152c:	429d      	cmp	r5, r3
 800152e:	d101      	bne.n	8001534 <_vfiprintf_r+0x60>
 8001530:	68b5      	ldr	r5, [r6, #8]
 8001532:	e7df      	b.n	80014f4 <_vfiprintf_r+0x20>
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <_vfiprintf_r+0x248>)
 8001536:	429d      	cmp	r5, r3
 8001538:	bf08      	it	eq
 800153a:	68f5      	ldreq	r5, [r6, #12]
 800153c:	e7da      	b.n	80014f4 <_vfiprintf_r+0x20>
 800153e:	89ab      	ldrh	r3, [r5, #12]
 8001540:	0598      	lsls	r0, r3, #22
 8001542:	d4ed      	bmi.n	8001520 <_vfiprintf_r+0x4c>
 8001544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001546:	f7ff fde4 	bl	8001112 <__retarget_lock_release_recursive>
 800154a:	e7e9      	b.n	8001520 <_vfiprintf_r+0x4c>
 800154c:	2300      	movs	r3, #0
 800154e:	9309      	str	r3, [sp, #36]	; 0x24
 8001550:	2320      	movs	r3, #32
 8001552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001556:	f8cd 800c 	str.w	r8, [sp, #12]
 800155a:	2330      	movs	r3, #48	; 0x30
 800155c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001720 <_vfiprintf_r+0x24c>
 8001560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001564:	f04f 0901 	mov.w	r9, #1
 8001568:	4623      	mov	r3, r4
 800156a:	469a      	mov	sl, r3
 800156c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001570:	b10a      	cbz	r2, 8001576 <_vfiprintf_r+0xa2>
 8001572:	2a25      	cmp	r2, #37	; 0x25
 8001574:	d1f9      	bne.n	800156a <_vfiprintf_r+0x96>
 8001576:	ebba 0b04 	subs.w	fp, sl, r4
 800157a:	d00b      	beq.n	8001594 <_vfiprintf_r+0xc0>
 800157c:	465b      	mov	r3, fp
 800157e:	4622      	mov	r2, r4
 8001580:	4629      	mov	r1, r5
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff ff93 	bl	80014ae <__sfputs_r>
 8001588:	3001      	adds	r0, #1
 800158a:	f000 80aa 	beq.w	80016e2 <_vfiprintf_r+0x20e>
 800158e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001590:	445a      	add	r2, fp
 8001592:	9209      	str	r2, [sp, #36]	; 0x24
 8001594:	f89a 3000 	ldrb.w	r3, [sl]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <_vfiprintf_r+0x20e>
 800159e:	2300      	movs	r3, #0
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015a8:	f10a 0a01 	add.w	sl, sl, #1
 80015ac:	9304      	str	r3, [sp, #16]
 80015ae:	9307      	str	r3, [sp, #28]
 80015b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015b4:	931a      	str	r3, [sp, #104]	; 0x68
 80015b6:	4654      	mov	r4, sl
 80015b8:	2205      	movs	r2, #5
 80015ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015be:	4858      	ldr	r0, [pc, #352]	; (8001720 <_vfiprintf_r+0x24c>)
 80015c0:	f7fe fe0e 	bl	80001e0 <memchr>
 80015c4:	9a04      	ldr	r2, [sp, #16]
 80015c6:	b9d8      	cbnz	r0, 8001600 <_vfiprintf_r+0x12c>
 80015c8:	06d1      	lsls	r1, r2, #27
 80015ca:	bf44      	itt	mi
 80015cc:	2320      	movmi	r3, #32
 80015ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015d2:	0713      	lsls	r3, r2, #28
 80015d4:	bf44      	itt	mi
 80015d6:	232b      	movmi	r3, #43	; 0x2b
 80015d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015dc:	f89a 3000 	ldrb.w	r3, [sl]
 80015e0:	2b2a      	cmp	r3, #42	; 0x2a
 80015e2:	d015      	beq.n	8001610 <_vfiprintf_r+0x13c>
 80015e4:	9a07      	ldr	r2, [sp, #28]
 80015e6:	4654      	mov	r4, sl
 80015e8:	2000      	movs	r0, #0
 80015ea:	f04f 0c0a 	mov.w	ip, #10
 80015ee:	4621      	mov	r1, r4
 80015f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015f4:	3b30      	subs	r3, #48	; 0x30
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	d94e      	bls.n	8001698 <_vfiprintf_r+0x1c4>
 80015fa:	b1b0      	cbz	r0, 800162a <_vfiprintf_r+0x156>
 80015fc:	9207      	str	r2, [sp, #28]
 80015fe:	e014      	b.n	800162a <_vfiprintf_r+0x156>
 8001600:	eba0 0308 	sub.w	r3, r0, r8
 8001604:	fa09 f303 	lsl.w	r3, r9, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	9304      	str	r3, [sp, #16]
 800160c:	46a2      	mov	sl, r4
 800160e:	e7d2      	b.n	80015b6 <_vfiprintf_r+0xe2>
 8001610:	9b03      	ldr	r3, [sp, #12]
 8001612:	1d19      	adds	r1, r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	9103      	str	r1, [sp, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	bfbb      	ittet	lt
 800161c:	425b      	neglt	r3, r3
 800161e:	f042 0202 	orrlt.w	r2, r2, #2
 8001622:	9307      	strge	r3, [sp, #28]
 8001624:	9307      	strlt	r3, [sp, #28]
 8001626:	bfb8      	it	lt
 8001628:	9204      	strlt	r2, [sp, #16]
 800162a:	7823      	ldrb	r3, [r4, #0]
 800162c:	2b2e      	cmp	r3, #46	; 0x2e
 800162e:	d10c      	bne.n	800164a <_vfiprintf_r+0x176>
 8001630:	7863      	ldrb	r3, [r4, #1]
 8001632:	2b2a      	cmp	r3, #42	; 0x2a
 8001634:	d135      	bne.n	80016a2 <_vfiprintf_r+0x1ce>
 8001636:	9b03      	ldr	r3, [sp, #12]
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	9203      	str	r2, [sp, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	bfb8      	it	lt
 8001642:	f04f 33ff 	movlt.w	r3, #4294967295
 8001646:	3402      	adds	r4, #2
 8001648:	9305      	str	r3, [sp, #20]
 800164a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001730 <_vfiprintf_r+0x25c>
 800164e:	7821      	ldrb	r1, [r4, #0]
 8001650:	2203      	movs	r2, #3
 8001652:	4650      	mov	r0, sl
 8001654:	f7fe fdc4 	bl	80001e0 <memchr>
 8001658:	b140      	cbz	r0, 800166c <_vfiprintf_r+0x198>
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	eba0 000a 	sub.w	r0, r0, sl
 8001660:	fa03 f000 	lsl.w	r0, r3, r0
 8001664:	9b04      	ldr	r3, [sp, #16]
 8001666:	4303      	orrs	r3, r0
 8001668:	3401      	adds	r4, #1
 800166a:	9304      	str	r3, [sp, #16]
 800166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001670:	482c      	ldr	r0, [pc, #176]	; (8001724 <_vfiprintf_r+0x250>)
 8001672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001676:	2206      	movs	r2, #6
 8001678:	f7fe fdb2 	bl	80001e0 <memchr>
 800167c:	2800      	cmp	r0, #0
 800167e:	d03f      	beq.n	8001700 <_vfiprintf_r+0x22c>
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <_vfiprintf_r+0x254>)
 8001682:	bb1b      	cbnz	r3, 80016cc <_vfiprintf_r+0x1f8>
 8001684:	9b03      	ldr	r3, [sp, #12]
 8001686:	3307      	adds	r3, #7
 8001688:	f023 0307 	bic.w	r3, r3, #7
 800168c:	3308      	adds	r3, #8
 800168e:	9303      	str	r3, [sp, #12]
 8001690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001692:	443b      	add	r3, r7
 8001694:	9309      	str	r3, [sp, #36]	; 0x24
 8001696:	e767      	b.n	8001568 <_vfiprintf_r+0x94>
 8001698:	fb0c 3202 	mla	r2, ip, r2, r3
 800169c:	460c      	mov	r4, r1
 800169e:	2001      	movs	r0, #1
 80016a0:	e7a5      	b.n	80015ee <_vfiprintf_r+0x11a>
 80016a2:	2300      	movs	r3, #0
 80016a4:	3401      	adds	r4, #1
 80016a6:	9305      	str	r3, [sp, #20]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 0c0a 	mov.w	ip, #10
 80016ae:	4620      	mov	r0, r4
 80016b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016b4:	3a30      	subs	r2, #48	; 0x30
 80016b6:	2a09      	cmp	r2, #9
 80016b8:	d903      	bls.n	80016c2 <_vfiprintf_r+0x1ee>
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0c5      	beq.n	800164a <_vfiprintf_r+0x176>
 80016be:	9105      	str	r1, [sp, #20]
 80016c0:	e7c3      	b.n	800164a <_vfiprintf_r+0x176>
 80016c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80016c6:	4604      	mov	r4, r0
 80016c8:	2301      	movs	r3, #1
 80016ca:	e7f0      	b.n	80016ae <_vfiprintf_r+0x1da>
 80016cc:	ab03      	add	r3, sp, #12
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	462a      	mov	r2, r5
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <_vfiprintf_r+0x258>)
 80016d4:	a904      	add	r1, sp, #16
 80016d6:	4630      	mov	r0, r6
 80016d8:	f3af 8000 	nop.w
 80016dc:	4607      	mov	r7, r0
 80016de:	1c78      	adds	r0, r7, #1
 80016e0:	d1d6      	bne.n	8001690 <_vfiprintf_r+0x1bc>
 80016e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016e4:	07d9      	lsls	r1, r3, #31
 80016e6:	d405      	bmi.n	80016f4 <_vfiprintf_r+0x220>
 80016e8:	89ab      	ldrh	r3, [r5, #12]
 80016ea:	059a      	lsls	r2, r3, #22
 80016ec:	d402      	bmi.n	80016f4 <_vfiprintf_r+0x220>
 80016ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016f0:	f7ff fd0f 	bl	8001112 <__retarget_lock_release_recursive>
 80016f4:	89ab      	ldrh	r3, [r5, #12]
 80016f6:	065b      	lsls	r3, r3, #25
 80016f8:	f53f af12 	bmi.w	8001520 <_vfiprintf_r+0x4c>
 80016fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016fe:	e711      	b.n	8001524 <_vfiprintf_r+0x50>
 8001700:	ab03      	add	r3, sp, #12
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	462a      	mov	r2, r5
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <_vfiprintf_r+0x258>)
 8001708:	a904      	add	r1, sp, #16
 800170a:	4630      	mov	r0, r6
 800170c:	f000 f880 	bl	8001810 <_printf_i>
 8001710:	e7e4      	b.n	80016dc <_vfiprintf_r+0x208>
 8001712:	bf00      	nop
 8001714:	080022ec 	.word	0x080022ec
 8001718:	0800230c 	.word	0x0800230c
 800171c:	080022cc 	.word	0x080022cc
 8001720:	0800232c 	.word	0x0800232c
 8001724:	08002336 	.word	0x08002336
 8001728:	00000000 	.word	0x00000000
 800172c:	080014af 	.word	0x080014af
 8001730:	08002332 	.word	0x08002332

08001734 <_printf_common>:
 8001734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001738:	4616      	mov	r6, r2
 800173a:	4699      	mov	r9, r3
 800173c:	688a      	ldr	r2, [r1, #8]
 800173e:	690b      	ldr	r3, [r1, #16]
 8001740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001744:	4293      	cmp	r3, r2
 8001746:	bfb8      	it	lt
 8001748:	4613      	movlt	r3, r2
 800174a:	6033      	str	r3, [r6, #0]
 800174c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001750:	4607      	mov	r7, r0
 8001752:	460c      	mov	r4, r1
 8001754:	b10a      	cbz	r2, 800175a <_printf_common+0x26>
 8001756:	3301      	adds	r3, #1
 8001758:	6033      	str	r3, [r6, #0]
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	0699      	lsls	r1, r3, #26
 800175e:	bf42      	ittt	mi
 8001760:	6833      	ldrmi	r3, [r6, #0]
 8001762:	3302      	addmi	r3, #2
 8001764:	6033      	strmi	r3, [r6, #0]
 8001766:	6825      	ldr	r5, [r4, #0]
 8001768:	f015 0506 	ands.w	r5, r5, #6
 800176c:	d106      	bne.n	800177c <_printf_common+0x48>
 800176e:	f104 0a19 	add.w	sl, r4, #25
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	6832      	ldr	r2, [r6, #0]
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	42ab      	cmp	r3, r5
 800177a:	dc26      	bgt.n	80017ca <_printf_common+0x96>
 800177c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001780:	1e13      	subs	r3, r2, #0
 8001782:	6822      	ldr	r2, [r4, #0]
 8001784:	bf18      	it	ne
 8001786:	2301      	movne	r3, #1
 8001788:	0692      	lsls	r2, r2, #26
 800178a:	d42b      	bmi.n	80017e4 <_printf_common+0xb0>
 800178c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001790:	4649      	mov	r1, r9
 8001792:	4638      	mov	r0, r7
 8001794:	47c0      	blx	r8
 8001796:	3001      	adds	r0, #1
 8001798:	d01e      	beq.n	80017d8 <_printf_common+0xa4>
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	68e5      	ldr	r5, [r4, #12]
 800179e:	6832      	ldr	r2, [r6, #0]
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	bf08      	it	eq
 80017a8:	1aad      	subeq	r5, r5, r2
 80017aa:	68a3      	ldr	r3, [r4, #8]
 80017ac:	6922      	ldr	r2, [r4, #16]
 80017ae:	bf0c      	ite	eq
 80017b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017b4:	2500      	movne	r5, #0
 80017b6:	4293      	cmp	r3, r2
 80017b8:	bfc4      	itt	gt
 80017ba:	1a9b      	subgt	r3, r3, r2
 80017bc:	18ed      	addgt	r5, r5, r3
 80017be:	2600      	movs	r6, #0
 80017c0:	341a      	adds	r4, #26
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d11a      	bne.n	80017fc <_printf_common+0xc8>
 80017c6:	2000      	movs	r0, #0
 80017c8:	e008      	b.n	80017dc <_printf_common+0xa8>
 80017ca:	2301      	movs	r3, #1
 80017cc:	4652      	mov	r2, sl
 80017ce:	4649      	mov	r1, r9
 80017d0:	4638      	mov	r0, r7
 80017d2:	47c0      	blx	r8
 80017d4:	3001      	adds	r0, #1
 80017d6:	d103      	bne.n	80017e0 <_printf_common+0xac>
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e0:	3501      	adds	r5, #1
 80017e2:	e7c6      	b.n	8001772 <_printf_common+0x3e>
 80017e4:	18e1      	adds	r1, r4, r3
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	2030      	movs	r0, #48	; 0x30
 80017ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017ee:	4422      	add	r2, r4
 80017f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017f8:	3302      	adds	r3, #2
 80017fa:	e7c7      	b.n	800178c <_printf_common+0x58>
 80017fc:	2301      	movs	r3, #1
 80017fe:	4622      	mov	r2, r4
 8001800:	4649      	mov	r1, r9
 8001802:	4638      	mov	r0, r7
 8001804:	47c0      	blx	r8
 8001806:	3001      	adds	r0, #1
 8001808:	d0e6      	beq.n	80017d8 <_printf_common+0xa4>
 800180a:	3601      	adds	r6, #1
 800180c:	e7d9      	b.n	80017c2 <_printf_common+0x8e>
	...

08001810 <_printf_i>:
 8001810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001814:	460c      	mov	r4, r1
 8001816:	4691      	mov	r9, r2
 8001818:	7e27      	ldrb	r7, [r4, #24]
 800181a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800181c:	2f78      	cmp	r7, #120	; 0x78
 800181e:	4680      	mov	r8, r0
 8001820:	469a      	mov	sl, r3
 8001822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001826:	d807      	bhi.n	8001838 <_printf_i+0x28>
 8001828:	2f62      	cmp	r7, #98	; 0x62
 800182a:	d80a      	bhi.n	8001842 <_printf_i+0x32>
 800182c:	2f00      	cmp	r7, #0
 800182e:	f000 80d8 	beq.w	80019e2 <_printf_i+0x1d2>
 8001832:	2f58      	cmp	r7, #88	; 0x58
 8001834:	f000 80a3 	beq.w	800197e <_printf_i+0x16e>
 8001838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800183c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001840:	e03a      	b.n	80018b8 <_printf_i+0xa8>
 8001842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001846:	2b15      	cmp	r3, #21
 8001848:	d8f6      	bhi.n	8001838 <_printf_i+0x28>
 800184a:	a001      	add	r0, pc, #4	; (adr r0, 8001850 <_printf_i+0x40>)
 800184c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001850:	080018a9 	.word	0x080018a9
 8001854:	080018bd 	.word	0x080018bd
 8001858:	08001839 	.word	0x08001839
 800185c:	08001839 	.word	0x08001839
 8001860:	08001839 	.word	0x08001839
 8001864:	08001839 	.word	0x08001839
 8001868:	080018bd 	.word	0x080018bd
 800186c:	08001839 	.word	0x08001839
 8001870:	08001839 	.word	0x08001839
 8001874:	08001839 	.word	0x08001839
 8001878:	08001839 	.word	0x08001839
 800187c:	080019c9 	.word	0x080019c9
 8001880:	080018ed 	.word	0x080018ed
 8001884:	080019ab 	.word	0x080019ab
 8001888:	08001839 	.word	0x08001839
 800188c:	08001839 	.word	0x08001839
 8001890:	080019eb 	.word	0x080019eb
 8001894:	08001839 	.word	0x08001839
 8001898:	080018ed 	.word	0x080018ed
 800189c:	08001839 	.word	0x08001839
 80018a0:	08001839 	.word	0x08001839
 80018a4:	080019b3 	.word	0x080019b3
 80018a8:	680b      	ldr	r3, [r1, #0]
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	600a      	str	r2, [r1, #0]
 80018b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80018b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0a3      	b.n	8001a04 <_printf_i+0x1f4>
 80018bc:	6825      	ldr	r5, [r4, #0]
 80018be:	6808      	ldr	r0, [r1, #0]
 80018c0:	062e      	lsls	r6, r5, #24
 80018c2:	f100 0304 	add.w	r3, r0, #4
 80018c6:	d50a      	bpl.n	80018de <_printf_i+0xce>
 80018c8:	6805      	ldr	r5, [r0, #0]
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	da03      	bge.n	80018d8 <_printf_i+0xc8>
 80018d0:	232d      	movs	r3, #45	; 0x2d
 80018d2:	426d      	negs	r5, r5
 80018d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018d8:	485e      	ldr	r0, [pc, #376]	; (8001a54 <_printf_i+0x244>)
 80018da:	230a      	movs	r3, #10
 80018dc:	e019      	b.n	8001912 <_printf_i+0x102>
 80018de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80018e2:	6805      	ldr	r5, [r0, #0]
 80018e4:	600b      	str	r3, [r1, #0]
 80018e6:	bf18      	it	ne
 80018e8:	b22d      	sxthne	r5, r5
 80018ea:	e7ef      	b.n	80018cc <_printf_i+0xbc>
 80018ec:	680b      	ldr	r3, [r1, #0]
 80018ee:	6825      	ldr	r5, [r4, #0]
 80018f0:	1d18      	adds	r0, r3, #4
 80018f2:	6008      	str	r0, [r1, #0]
 80018f4:	0628      	lsls	r0, r5, #24
 80018f6:	d501      	bpl.n	80018fc <_printf_i+0xec>
 80018f8:	681d      	ldr	r5, [r3, #0]
 80018fa:	e002      	b.n	8001902 <_printf_i+0xf2>
 80018fc:	0669      	lsls	r1, r5, #25
 80018fe:	d5fb      	bpl.n	80018f8 <_printf_i+0xe8>
 8001900:	881d      	ldrh	r5, [r3, #0]
 8001902:	4854      	ldr	r0, [pc, #336]	; (8001a54 <_printf_i+0x244>)
 8001904:	2f6f      	cmp	r7, #111	; 0x6f
 8001906:	bf0c      	ite	eq
 8001908:	2308      	moveq	r3, #8
 800190a:	230a      	movne	r3, #10
 800190c:	2100      	movs	r1, #0
 800190e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001912:	6866      	ldr	r6, [r4, #4]
 8001914:	60a6      	str	r6, [r4, #8]
 8001916:	2e00      	cmp	r6, #0
 8001918:	bfa2      	ittt	ge
 800191a:	6821      	ldrge	r1, [r4, #0]
 800191c:	f021 0104 	bicge.w	r1, r1, #4
 8001920:	6021      	strge	r1, [r4, #0]
 8001922:	b90d      	cbnz	r5, 8001928 <_printf_i+0x118>
 8001924:	2e00      	cmp	r6, #0
 8001926:	d04d      	beq.n	80019c4 <_printf_i+0x1b4>
 8001928:	4616      	mov	r6, r2
 800192a:	fbb5 f1f3 	udiv	r1, r5, r3
 800192e:	fb03 5711 	mls	r7, r3, r1, r5
 8001932:	5dc7      	ldrb	r7, [r0, r7]
 8001934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001938:	462f      	mov	r7, r5
 800193a:	42bb      	cmp	r3, r7
 800193c:	460d      	mov	r5, r1
 800193e:	d9f4      	bls.n	800192a <_printf_i+0x11a>
 8001940:	2b08      	cmp	r3, #8
 8001942:	d10b      	bne.n	800195c <_printf_i+0x14c>
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	07df      	lsls	r7, r3, #31
 8001948:	d508      	bpl.n	800195c <_printf_i+0x14c>
 800194a:	6923      	ldr	r3, [r4, #16]
 800194c:	6861      	ldr	r1, [r4, #4]
 800194e:	4299      	cmp	r1, r3
 8001950:	bfde      	ittt	le
 8001952:	2330      	movle	r3, #48	; 0x30
 8001954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800195c:	1b92      	subs	r2, r2, r6
 800195e:	6122      	str	r2, [r4, #16]
 8001960:	f8cd a000 	str.w	sl, [sp]
 8001964:	464b      	mov	r3, r9
 8001966:	aa03      	add	r2, sp, #12
 8001968:	4621      	mov	r1, r4
 800196a:	4640      	mov	r0, r8
 800196c:	f7ff fee2 	bl	8001734 <_printf_common>
 8001970:	3001      	adds	r0, #1
 8001972:	d14c      	bne.n	8001a0e <_printf_i+0x1fe>
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	b004      	add	sp, #16
 800197a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800197e:	4835      	ldr	r0, [pc, #212]	; (8001a54 <_printf_i+0x244>)
 8001980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	680e      	ldr	r6, [r1, #0]
 8001988:	061f      	lsls	r7, r3, #24
 800198a:	f856 5b04 	ldr.w	r5, [r6], #4
 800198e:	600e      	str	r6, [r1, #0]
 8001990:	d514      	bpl.n	80019bc <_printf_i+0x1ac>
 8001992:	07d9      	lsls	r1, r3, #31
 8001994:	bf44      	itt	mi
 8001996:	f043 0320 	orrmi.w	r3, r3, #32
 800199a:	6023      	strmi	r3, [r4, #0]
 800199c:	b91d      	cbnz	r5, 80019a6 <_printf_i+0x196>
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f023 0320 	bic.w	r3, r3, #32
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	2310      	movs	r3, #16
 80019a8:	e7b0      	b.n	800190c <_printf_i+0xfc>
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	2378      	movs	r3, #120	; 0x78
 80019b4:	4828      	ldr	r0, [pc, #160]	; (8001a58 <_printf_i+0x248>)
 80019b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019ba:	e7e3      	b.n	8001984 <_printf_i+0x174>
 80019bc:	065e      	lsls	r6, r3, #25
 80019be:	bf48      	it	mi
 80019c0:	b2ad      	uxthmi	r5, r5
 80019c2:	e7e6      	b.n	8001992 <_printf_i+0x182>
 80019c4:	4616      	mov	r6, r2
 80019c6:	e7bb      	b.n	8001940 <_printf_i+0x130>
 80019c8:	680b      	ldr	r3, [r1, #0]
 80019ca:	6826      	ldr	r6, [r4, #0]
 80019cc:	6960      	ldr	r0, [r4, #20]
 80019ce:	1d1d      	adds	r5, r3, #4
 80019d0:	600d      	str	r5, [r1, #0]
 80019d2:	0635      	lsls	r5, r6, #24
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	d501      	bpl.n	80019dc <_printf_i+0x1cc>
 80019d8:	6018      	str	r0, [r3, #0]
 80019da:	e002      	b.n	80019e2 <_printf_i+0x1d2>
 80019dc:	0671      	lsls	r1, r6, #25
 80019de:	d5fb      	bpl.n	80019d8 <_printf_i+0x1c8>
 80019e0:	8018      	strh	r0, [r3, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	6123      	str	r3, [r4, #16]
 80019e6:	4616      	mov	r6, r2
 80019e8:	e7ba      	b.n	8001960 <_printf_i+0x150>
 80019ea:	680b      	ldr	r3, [r1, #0]
 80019ec:	1d1a      	adds	r2, r3, #4
 80019ee:	600a      	str	r2, [r1, #0]
 80019f0:	681e      	ldr	r6, [r3, #0]
 80019f2:	6862      	ldr	r2, [r4, #4]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4630      	mov	r0, r6
 80019f8:	f7fe fbf2 	bl	80001e0 <memchr>
 80019fc:	b108      	cbz	r0, 8001a02 <_printf_i+0x1f2>
 80019fe:	1b80      	subs	r0, r0, r6
 8001a00:	6060      	str	r0, [r4, #4]
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	6123      	str	r3, [r4, #16]
 8001a06:	2300      	movs	r3, #0
 8001a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a0c:	e7a8      	b.n	8001960 <_printf_i+0x150>
 8001a0e:	6923      	ldr	r3, [r4, #16]
 8001a10:	4632      	mov	r2, r6
 8001a12:	4649      	mov	r1, r9
 8001a14:	4640      	mov	r0, r8
 8001a16:	47d0      	blx	sl
 8001a18:	3001      	adds	r0, #1
 8001a1a:	d0ab      	beq.n	8001974 <_printf_i+0x164>
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	079b      	lsls	r3, r3, #30
 8001a20:	d413      	bmi.n	8001a4a <_printf_i+0x23a>
 8001a22:	68e0      	ldr	r0, [r4, #12]
 8001a24:	9b03      	ldr	r3, [sp, #12]
 8001a26:	4298      	cmp	r0, r3
 8001a28:	bfb8      	it	lt
 8001a2a:	4618      	movlt	r0, r3
 8001a2c:	e7a4      	b.n	8001978 <_printf_i+0x168>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4632      	mov	r2, r6
 8001a32:	4649      	mov	r1, r9
 8001a34:	4640      	mov	r0, r8
 8001a36:	47d0      	blx	sl
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d09b      	beq.n	8001974 <_printf_i+0x164>
 8001a3c:	3501      	adds	r5, #1
 8001a3e:	68e3      	ldr	r3, [r4, #12]
 8001a40:	9903      	ldr	r1, [sp, #12]
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	42ab      	cmp	r3, r5
 8001a46:	dcf2      	bgt.n	8001a2e <_printf_i+0x21e>
 8001a48:	e7eb      	b.n	8001a22 <_printf_i+0x212>
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	f104 0619 	add.w	r6, r4, #25
 8001a50:	e7f5      	b.n	8001a3e <_printf_i+0x22e>
 8001a52:	bf00      	nop
 8001a54:	0800233d 	.word	0x0800233d
 8001a58:	0800234e 	.word	0x0800234e

08001a5c <_sbrk_r>:
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	4d06      	ldr	r5, [pc, #24]	; (8001a78 <_sbrk_r+0x1c>)
 8001a60:	2300      	movs	r3, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	f7ff f98a 	bl	8000d80 <_sbrk>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d102      	bne.n	8001a76 <_sbrk_r+0x1a>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	b103      	cbz	r3, 8001a76 <_sbrk_r+0x1a>
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	20000cf0 	.word	0x20000cf0

08001a7c <__sread>:
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	460c      	mov	r4, r1
 8001a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a84:	f000 fb02 	bl	800208c <_read_r>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	bfab      	itete	ge
 8001a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a90:	181b      	addge	r3, r3, r0
 8001a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a96:	bfac      	ite	ge
 8001a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a9a:	81a3      	strhlt	r3, [r4, #12]
 8001a9c:	bd10      	pop	{r4, pc}

08001a9e <__swrite>:
 8001a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa2:	461f      	mov	r7, r3
 8001aa4:	898b      	ldrh	r3, [r1, #12]
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	4605      	mov	r5, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4616      	mov	r6, r2
 8001aae:	d505      	bpl.n	8001abc <__swrite+0x1e>
 8001ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f000 f9c8 	bl	8001e4c <_lseek_r>
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac6:	81a3      	strh	r3, [r4, #12]
 8001ac8:	4632      	mov	r2, r6
 8001aca:	463b      	mov	r3, r7
 8001acc:	4628      	mov	r0, r5
 8001ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad2:	f000 b869 	b.w	8001ba8 <_write_r>

08001ad6 <__sseek>:
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	460c      	mov	r4, r1
 8001ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ade:	f000 f9b5 	bl	8001e4c <_lseek_r>
 8001ae2:	1c43      	adds	r3, r0, #1
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	bf15      	itete	ne
 8001ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001af2:	81a3      	strheq	r3, [r4, #12]
 8001af4:	bf18      	it	ne
 8001af6:	81a3      	strhne	r3, [r4, #12]
 8001af8:	bd10      	pop	{r4, pc}

08001afa <__sclose>:
 8001afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afe:	f000 b8d3 	b.w	8001ca8 <_close_r>
	...

08001b04 <__swbuf_r>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	460e      	mov	r6, r1
 8001b08:	4614      	mov	r4, r2
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	b118      	cbz	r0, 8001b16 <__swbuf_r+0x12>
 8001b0e:	6983      	ldr	r3, [r0, #24]
 8001b10:	b90b      	cbnz	r3, 8001b16 <__swbuf_r+0x12>
 8001b12:	f7ff fa5f 	bl	8000fd4 <__sinit>
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <__swbuf_r+0x98>)
 8001b18:	429c      	cmp	r4, r3
 8001b1a:	d12b      	bne.n	8001b74 <__swbuf_r+0x70>
 8001b1c:	686c      	ldr	r4, [r5, #4]
 8001b1e:	69a3      	ldr	r3, [r4, #24]
 8001b20:	60a3      	str	r3, [r4, #8]
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	071a      	lsls	r2, r3, #28
 8001b26:	d52f      	bpl.n	8001b88 <__swbuf_r+0x84>
 8001b28:	6923      	ldr	r3, [r4, #16]
 8001b2a:	b36b      	cbz	r3, 8001b88 <__swbuf_r+0x84>
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	6820      	ldr	r0, [r4, #0]
 8001b30:	1ac0      	subs	r0, r0, r3
 8001b32:	6963      	ldr	r3, [r4, #20]
 8001b34:	b2f6      	uxtb	r6, r6
 8001b36:	4283      	cmp	r3, r0
 8001b38:	4637      	mov	r7, r6
 8001b3a:	dc04      	bgt.n	8001b46 <__swbuf_r+0x42>
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 f948 	bl	8001dd4 <_fflush_r>
 8001b44:	bb30      	cbnz	r0, 8001b94 <__swbuf_r+0x90>
 8001b46:	68a3      	ldr	r3, [r4, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60a3      	str	r3, [r4, #8]
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	701e      	strb	r6, [r3, #0]
 8001b54:	6963      	ldr	r3, [r4, #20]
 8001b56:	3001      	adds	r0, #1
 8001b58:	4283      	cmp	r3, r0
 8001b5a:	d004      	beq.n	8001b66 <__swbuf_r+0x62>
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	07db      	lsls	r3, r3, #31
 8001b60:	d506      	bpl.n	8001b70 <__swbuf_r+0x6c>
 8001b62:	2e0a      	cmp	r6, #10
 8001b64:	d104      	bne.n	8001b70 <__swbuf_r+0x6c>
 8001b66:	4621      	mov	r1, r4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 f933 	bl	8001dd4 <_fflush_r>
 8001b6e:	b988      	cbnz	r0, 8001b94 <__swbuf_r+0x90>
 8001b70:	4638      	mov	r0, r7
 8001b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <__swbuf_r+0x9c>)
 8001b76:	429c      	cmp	r4, r3
 8001b78:	d101      	bne.n	8001b7e <__swbuf_r+0x7a>
 8001b7a:	68ac      	ldr	r4, [r5, #8]
 8001b7c:	e7cf      	b.n	8001b1e <__swbuf_r+0x1a>
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <__swbuf_r+0xa0>)
 8001b80:	429c      	cmp	r4, r3
 8001b82:	bf08      	it	eq
 8001b84:	68ec      	ldreq	r4, [r5, #12]
 8001b86:	e7ca      	b.n	8001b1e <__swbuf_r+0x1a>
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f000 f81e 	bl	8001bcc <__swsetup_r>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d0cb      	beq.n	8001b2c <__swbuf_r+0x28>
 8001b94:	f04f 37ff 	mov.w	r7, #4294967295
 8001b98:	e7ea      	b.n	8001b70 <__swbuf_r+0x6c>
 8001b9a:	bf00      	nop
 8001b9c:	080022ec 	.word	0x080022ec
 8001ba0:	0800230c 	.word	0x0800230c
 8001ba4:	080022cc 	.word	0x080022cc

08001ba8 <_write_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4d07      	ldr	r5, [pc, #28]	; (8001bc8 <_write_r+0x20>)
 8001bac:	4604      	mov	r4, r0
 8001bae:	4608      	mov	r0, r1
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	602a      	str	r2, [r5, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff f891 	bl	8000cde <_write>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	d102      	bne.n	8001bc6 <_write_r+0x1e>
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	b103      	cbz	r3, 8001bc6 <_write_r+0x1e>
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000cf0 	.word	0x20000cf0

08001bcc <__swsetup_r>:
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <__swsetup_r+0xcc>)
 8001bce:	b570      	push	{r4, r5, r6, lr}
 8001bd0:	681d      	ldr	r5, [r3, #0]
 8001bd2:	4606      	mov	r6, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	b125      	cbz	r5, 8001be2 <__swsetup_r+0x16>
 8001bd8:	69ab      	ldr	r3, [r5, #24]
 8001bda:	b913      	cbnz	r3, 8001be2 <__swsetup_r+0x16>
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f7ff f9f9 	bl	8000fd4 <__sinit>
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <__swsetup_r+0xd0>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	d10f      	bne.n	8001c08 <__swsetup_r+0x3c>
 8001be8:	686c      	ldr	r4, [r5, #4]
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bf0:	0719      	lsls	r1, r3, #28
 8001bf2:	d42c      	bmi.n	8001c4e <__swsetup_r+0x82>
 8001bf4:	06dd      	lsls	r5, r3, #27
 8001bf6:	d411      	bmi.n	8001c1c <__swsetup_r+0x50>
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	6033      	str	r3, [r6, #0]
 8001bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c00:	81a3      	strh	r3, [r4, #12]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	e03e      	b.n	8001c86 <__swsetup_r+0xba>
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <__swsetup_r+0xd4>)
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	d101      	bne.n	8001c12 <__swsetup_r+0x46>
 8001c0e:	68ac      	ldr	r4, [r5, #8]
 8001c10:	e7eb      	b.n	8001bea <__swsetup_r+0x1e>
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <__swsetup_r+0xd8>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	bf08      	it	eq
 8001c18:	68ec      	ldreq	r4, [r5, #12]
 8001c1a:	e7e6      	b.n	8001bea <__swsetup_r+0x1e>
 8001c1c:	0758      	lsls	r0, r3, #29
 8001c1e:	d512      	bpl.n	8001c46 <__swsetup_r+0x7a>
 8001c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c22:	b141      	cbz	r1, 8001c36 <__swsetup_r+0x6a>
 8001c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c28:	4299      	cmp	r1, r3
 8001c2a:	d002      	beq.n	8001c32 <__swsetup_r+0x66>
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f000 f9b7 	bl	8001fa0 <_free_r>
 8001c32:	2300      	movs	r3, #0
 8001c34:	6363      	str	r3, [r4, #52]	; 0x34
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c3c:	81a3      	strh	r3, [r4, #12]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6063      	str	r3, [r4, #4]
 8001c42:	6923      	ldr	r3, [r4, #16]
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	81a3      	strh	r3, [r4, #12]
 8001c4e:	6923      	ldr	r3, [r4, #16]
 8001c50:	b94b      	cbnz	r3, 8001c66 <__swsetup_r+0x9a>
 8001c52:	89a3      	ldrh	r3, [r4, #12]
 8001c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d003      	beq.n	8001c66 <__swsetup_r+0x9a>
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4630      	mov	r0, r6
 8001c62:	f000 f929 	bl	8001eb8 <__smakebuf_r>
 8001c66:	89a0      	ldrh	r0, [r4, #12]
 8001c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c6c:	f010 0301 	ands.w	r3, r0, #1
 8001c70:	d00a      	beq.n	8001c88 <__swsetup_r+0xbc>
 8001c72:	2300      	movs	r3, #0
 8001c74:	60a3      	str	r3, [r4, #8]
 8001c76:	6963      	ldr	r3, [r4, #20]
 8001c78:	425b      	negs	r3, r3
 8001c7a:	61a3      	str	r3, [r4, #24]
 8001c7c:	6923      	ldr	r3, [r4, #16]
 8001c7e:	b943      	cbnz	r3, 8001c92 <__swsetup_r+0xc6>
 8001c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c84:	d1ba      	bne.n	8001bfc <__swsetup_r+0x30>
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	0781      	lsls	r1, r0, #30
 8001c8a:	bf58      	it	pl
 8001c8c:	6963      	ldrpl	r3, [r4, #20]
 8001c8e:	60a3      	str	r3, [r4, #8]
 8001c90:	e7f4      	b.n	8001c7c <__swsetup_r+0xb0>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7f7      	b.n	8001c86 <__swsetup_r+0xba>
 8001c96:	bf00      	nop
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	080022ec 	.word	0x080022ec
 8001ca0:	0800230c 	.word	0x0800230c
 8001ca4:	080022cc 	.word	0x080022cc

08001ca8 <_close_r>:
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4d06      	ldr	r5, [pc, #24]	; (8001cc4 <_close_r+0x1c>)
 8001cac:	2300      	movs	r3, #0
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	602b      	str	r3, [r5, #0]
 8001cb4:	f7ff f82f 	bl	8000d16 <_close>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d102      	bne.n	8001cc2 <_close_r+0x1a>
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	b103      	cbz	r3, 8001cc2 <_close_r+0x1a>
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	20000cf0 	.word	0x20000cf0

08001cc8 <__sflush_r>:
 8001cc8:	898a      	ldrh	r2, [r1, #12]
 8001cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cce:	4605      	mov	r5, r0
 8001cd0:	0710      	lsls	r0, r2, #28
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	d458      	bmi.n	8001d88 <__sflush_r+0xc0>
 8001cd6:	684b      	ldr	r3, [r1, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	dc05      	bgt.n	8001ce8 <__sflush_r+0x20>
 8001cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	dc02      	bgt.n	8001ce8 <__sflush_r+0x20>
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d0f9      	beq.n	8001ce2 <__sflush_r+0x1a>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cf4:	682f      	ldr	r7, [r5, #0]
 8001cf6:	602b      	str	r3, [r5, #0]
 8001cf8:	d032      	beq.n	8001d60 <__sflush_r+0x98>
 8001cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cfc:	89a3      	ldrh	r3, [r4, #12]
 8001cfe:	075a      	lsls	r2, r3, #29
 8001d00:	d505      	bpl.n	8001d0e <__sflush_r+0x46>
 8001d02:	6863      	ldr	r3, [r4, #4]
 8001d04:	1ac0      	subs	r0, r0, r3
 8001d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d08:	b10b      	cbz	r3, 8001d0e <__sflush_r+0x46>
 8001d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d0c:	1ac0      	subs	r0, r0, r3
 8001d0e:	2300      	movs	r3, #0
 8001d10:	4602      	mov	r2, r0
 8001d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d14:	6a21      	ldr	r1, [r4, #32]
 8001d16:	4628      	mov	r0, r5
 8001d18:	47b0      	blx	r6
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	d106      	bne.n	8001d2e <__sflush_r+0x66>
 8001d20:	6829      	ldr	r1, [r5, #0]
 8001d22:	291d      	cmp	r1, #29
 8001d24:	d82c      	bhi.n	8001d80 <__sflush_r+0xb8>
 8001d26:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <__sflush_r+0x108>)
 8001d28:	40ca      	lsrs	r2, r1
 8001d2a:	07d6      	lsls	r6, r2, #31
 8001d2c:	d528      	bpl.n	8001d80 <__sflush_r+0xb8>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	6062      	str	r2, [r4, #4]
 8001d32:	04d9      	lsls	r1, r3, #19
 8001d34:	6922      	ldr	r2, [r4, #16]
 8001d36:	6022      	str	r2, [r4, #0]
 8001d38:	d504      	bpl.n	8001d44 <__sflush_r+0x7c>
 8001d3a:	1c42      	adds	r2, r0, #1
 8001d3c:	d101      	bne.n	8001d42 <__sflush_r+0x7a>
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	b903      	cbnz	r3, 8001d44 <__sflush_r+0x7c>
 8001d42:	6560      	str	r0, [r4, #84]	; 0x54
 8001d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d46:	602f      	str	r7, [r5, #0]
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	d0ca      	beq.n	8001ce2 <__sflush_r+0x1a>
 8001d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d50:	4299      	cmp	r1, r3
 8001d52:	d002      	beq.n	8001d5a <__sflush_r+0x92>
 8001d54:	4628      	mov	r0, r5
 8001d56:	f000 f923 	bl	8001fa0 <_free_r>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d5e:	e7c1      	b.n	8001ce4 <__sflush_r+0x1c>
 8001d60:	6a21      	ldr	r1, [r4, #32]
 8001d62:	2301      	movs	r3, #1
 8001d64:	4628      	mov	r0, r5
 8001d66:	47b0      	blx	r6
 8001d68:	1c41      	adds	r1, r0, #1
 8001d6a:	d1c7      	bne.n	8001cfc <__sflush_r+0x34>
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0c4      	beq.n	8001cfc <__sflush_r+0x34>
 8001d72:	2b1d      	cmp	r3, #29
 8001d74:	d001      	beq.n	8001d7a <__sflush_r+0xb2>
 8001d76:	2b16      	cmp	r3, #22
 8001d78:	d101      	bne.n	8001d7e <__sflush_r+0xb6>
 8001d7a:	602f      	str	r7, [r5, #0]
 8001d7c:	e7b1      	b.n	8001ce2 <__sflush_r+0x1a>
 8001d7e:	89a3      	ldrh	r3, [r4, #12]
 8001d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d84:	81a3      	strh	r3, [r4, #12]
 8001d86:	e7ad      	b.n	8001ce4 <__sflush_r+0x1c>
 8001d88:	690f      	ldr	r7, [r1, #16]
 8001d8a:	2f00      	cmp	r7, #0
 8001d8c:	d0a9      	beq.n	8001ce2 <__sflush_r+0x1a>
 8001d8e:	0793      	lsls	r3, r2, #30
 8001d90:	680e      	ldr	r6, [r1, #0]
 8001d92:	bf08      	it	eq
 8001d94:	694b      	ldreq	r3, [r1, #20]
 8001d96:	600f      	str	r7, [r1, #0]
 8001d98:	bf18      	it	ne
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	eba6 0807 	sub.w	r8, r6, r7
 8001da0:	608b      	str	r3, [r1, #8]
 8001da2:	f1b8 0f00 	cmp.w	r8, #0
 8001da6:	dd9c      	ble.n	8001ce2 <__sflush_r+0x1a>
 8001da8:	6a21      	ldr	r1, [r4, #32]
 8001daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dac:	4643      	mov	r3, r8
 8001dae:	463a      	mov	r2, r7
 8001db0:	4628      	mov	r0, r5
 8001db2:	47b0      	blx	r6
 8001db4:	2800      	cmp	r0, #0
 8001db6:	dc06      	bgt.n	8001dc6 <__sflush_r+0xfe>
 8001db8:	89a3      	ldrh	r3, [r4, #12]
 8001dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbe:	81a3      	strh	r3, [r4, #12]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	e78e      	b.n	8001ce4 <__sflush_r+0x1c>
 8001dc6:	4407      	add	r7, r0
 8001dc8:	eba8 0800 	sub.w	r8, r8, r0
 8001dcc:	e7e9      	b.n	8001da2 <__sflush_r+0xda>
 8001dce:	bf00      	nop
 8001dd0:	20400001 	.word	0x20400001

08001dd4 <_fflush_r>:
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	690b      	ldr	r3, [r1, #16]
 8001dd8:	4605      	mov	r5, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	b913      	cbnz	r3, 8001de4 <_fflush_r+0x10>
 8001dde:	2500      	movs	r5, #0
 8001de0:	4628      	mov	r0, r5
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	b118      	cbz	r0, 8001dee <_fflush_r+0x1a>
 8001de6:	6983      	ldr	r3, [r0, #24]
 8001de8:	b90b      	cbnz	r3, 8001dee <_fflush_r+0x1a>
 8001dea:	f7ff f8f3 	bl	8000fd4 <__sinit>
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <_fflush_r+0x6c>)
 8001df0:	429c      	cmp	r4, r3
 8001df2:	d11b      	bne.n	8001e2c <_fflush_r+0x58>
 8001df4:	686c      	ldr	r4, [r5, #4]
 8001df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ef      	beq.n	8001dde <_fflush_r+0xa>
 8001dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e00:	07d0      	lsls	r0, r2, #31
 8001e02:	d404      	bmi.n	8001e0e <_fflush_r+0x3a>
 8001e04:	0599      	lsls	r1, r3, #22
 8001e06:	d402      	bmi.n	8001e0e <_fflush_r+0x3a>
 8001e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e0a:	f7ff f981 	bl	8001110 <__retarget_lock_acquire_recursive>
 8001e0e:	4628      	mov	r0, r5
 8001e10:	4621      	mov	r1, r4
 8001e12:	f7ff ff59 	bl	8001cc8 <__sflush_r>
 8001e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e18:	07da      	lsls	r2, r3, #31
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	d4e0      	bmi.n	8001de0 <_fflush_r+0xc>
 8001e1e:	89a3      	ldrh	r3, [r4, #12]
 8001e20:	059b      	lsls	r3, r3, #22
 8001e22:	d4dd      	bmi.n	8001de0 <_fflush_r+0xc>
 8001e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e26:	f7ff f974 	bl	8001112 <__retarget_lock_release_recursive>
 8001e2a:	e7d9      	b.n	8001de0 <_fflush_r+0xc>
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <_fflush_r+0x70>)
 8001e2e:	429c      	cmp	r4, r3
 8001e30:	d101      	bne.n	8001e36 <_fflush_r+0x62>
 8001e32:	68ac      	ldr	r4, [r5, #8]
 8001e34:	e7df      	b.n	8001df6 <_fflush_r+0x22>
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <_fflush_r+0x74>)
 8001e38:	429c      	cmp	r4, r3
 8001e3a:	bf08      	it	eq
 8001e3c:	68ec      	ldreq	r4, [r5, #12]
 8001e3e:	e7da      	b.n	8001df6 <_fflush_r+0x22>
 8001e40:	080022ec 	.word	0x080022ec
 8001e44:	0800230c 	.word	0x0800230c
 8001e48:	080022cc 	.word	0x080022cc

08001e4c <_lseek_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4d07      	ldr	r5, [pc, #28]	; (8001e6c <_lseek_r+0x20>)
 8001e50:	4604      	mov	r4, r0
 8001e52:	4608      	mov	r0, r1
 8001e54:	4611      	mov	r1, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	602a      	str	r2, [r5, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f7fe ff82 	bl	8000d64 <_lseek>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	d102      	bne.n	8001e6a <_lseek_r+0x1e>
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	b103      	cbz	r3, 8001e6a <_lseek_r+0x1e>
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	20000cf0 	.word	0x20000cf0

08001e70 <__swhatbuf_r>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	460e      	mov	r6, r1
 8001e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e78:	2900      	cmp	r1, #0
 8001e7a:	b096      	sub	sp, #88	; 0x58
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	461d      	mov	r5, r3
 8001e80:	da07      	bge.n	8001e92 <__swhatbuf_r+0x22>
 8001e82:	2300      	movs	r3, #0
 8001e84:	602b      	str	r3, [r5, #0]
 8001e86:	89b3      	ldrh	r3, [r6, #12]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	d410      	bmi.n	8001eae <__swhatbuf_r+0x3e>
 8001e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e90:	e00e      	b.n	8001eb0 <__swhatbuf_r+0x40>
 8001e92:	466a      	mov	r2, sp
 8001e94:	f000 f90c 	bl	80020b0 <_fstat_r>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	dbf2      	blt.n	8001e82 <__swhatbuf_r+0x12>
 8001e9c:	9a01      	ldr	r2, [sp, #4]
 8001e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ea6:	425a      	negs	r2, r3
 8001ea8:	415a      	adcs	r2, r3
 8001eaa:	602a      	str	r2, [r5, #0]
 8001eac:	e7ee      	b.n	8001e8c <__swhatbuf_r+0x1c>
 8001eae:	2340      	movs	r3, #64	; 0x40
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	6023      	str	r3, [r4, #0]
 8001eb4:	b016      	add	sp, #88	; 0x58
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}

08001eb8 <__smakebuf_r>:
 8001eb8:	898b      	ldrh	r3, [r1, #12]
 8001eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ebc:	079d      	lsls	r5, r3, #30
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	d507      	bpl.n	8001ed4 <__smakebuf_r+0x1c>
 8001ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	6123      	str	r3, [r4, #16]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	6163      	str	r3, [r4, #20]
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	ab01      	add	r3, sp, #4
 8001ed6:	466a      	mov	r2, sp
 8001ed8:	f7ff ffca 	bl	8001e70 <__swhatbuf_r>
 8001edc:	9900      	ldr	r1, [sp, #0]
 8001ede:	4605      	mov	r5, r0
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f7ff f917 	bl	8001114 <_malloc_r>
 8001ee6:	b948      	cbnz	r0, 8001efc <__smakebuf_r+0x44>
 8001ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eec:	059a      	lsls	r2, r3, #22
 8001eee:	d4ef      	bmi.n	8001ed0 <__smakebuf_r+0x18>
 8001ef0:	f023 0303 	bic.w	r3, r3, #3
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	81a3      	strh	r3, [r4, #12]
 8001efa:	e7e3      	b.n	8001ec4 <__smakebuf_r+0xc>
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <__smakebuf_r+0x7c>)
 8001efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f00:	89a3      	ldrh	r3, [r4, #12]
 8001f02:	6020      	str	r0, [r4, #0]
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	9b00      	ldr	r3, [sp, #0]
 8001f0c:	6163      	str	r3, [r4, #20]
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	6120      	str	r0, [r4, #16]
 8001f12:	b15b      	cbz	r3, 8001f2c <__smakebuf_r+0x74>
 8001f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f000 f8db 	bl	80020d4 <_isatty_r>
 8001f1e:	b128      	cbz	r0, 8001f2c <__smakebuf_r+0x74>
 8001f20:	89a3      	ldrh	r3, [r4, #12]
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	81a3      	strh	r3, [r4, #12]
 8001f2c:	89a0      	ldrh	r0, [r4, #12]
 8001f2e:	4305      	orrs	r5, r0
 8001f30:	81a5      	strh	r5, [r4, #12]
 8001f32:	e7cd      	b.n	8001ed0 <__smakebuf_r+0x18>
 8001f34:	08000f6d 	.word	0x08000f6d

08001f38 <memcpy>:
 8001f38:	440a      	add	r2, r1
 8001f3a:	4291      	cmp	r1, r2
 8001f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f40:	d100      	bne.n	8001f44 <memcpy+0xc>
 8001f42:	4770      	bx	lr
 8001f44:	b510      	push	{r4, lr}
 8001f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f4e:	4291      	cmp	r1, r2
 8001f50:	d1f9      	bne.n	8001f46 <memcpy+0xe>
 8001f52:	bd10      	pop	{r4, pc}

08001f54 <memmove>:
 8001f54:	4288      	cmp	r0, r1
 8001f56:	b510      	push	{r4, lr}
 8001f58:	eb01 0402 	add.w	r4, r1, r2
 8001f5c:	d902      	bls.n	8001f64 <memmove+0x10>
 8001f5e:	4284      	cmp	r4, r0
 8001f60:	4623      	mov	r3, r4
 8001f62:	d807      	bhi.n	8001f74 <memmove+0x20>
 8001f64:	1e43      	subs	r3, r0, #1
 8001f66:	42a1      	cmp	r1, r4
 8001f68:	d008      	beq.n	8001f7c <memmove+0x28>
 8001f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f72:	e7f8      	b.n	8001f66 <memmove+0x12>
 8001f74:	4402      	add	r2, r0
 8001f76:	4601      	mov	r1, r0
 8001f78:	428a      	cmp	r2, r1
 8001f7a:	d100      	bne.n	8001f7e <memmove+0x2a>
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f86:	e7f7      	b.n	8001f78 <memmove+0x24>

08001f88 <__malloc_lock>:
 8001f88:	4801      	ldr	r0, [pc, #4]	; (8001f90 <__malloc_lock+0x8>)
 8001f8a:	f7ff b8c1 	b.w	8001110 <__retarget_lock_acquire_recursive>
 8001f8e:	bf00      	nop
 8001f90:	20000ce8 	.word	0x20000ce8

08001f94 <__malloc_unlock>:
 8001f94:	4801      	ldr	r0, [pc, #4]	; (8001f9c <__malloc_unlock+0x8>)
 8001f96:	f7ff b8bc 	b.w	8001112 <__retarget_lock_release_recursive>
 8001f9a:	bf00      	nop
 8001f9c:	20000ce8 	.word	0x20000ce8

08001fa0 <_free_r>:
 8001fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fa2:	2900      	cmp	r1, #0
 8001fa4:	d048      	beq.n	8002038 <_free_r+0x98>
 8001fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001faa:	9001      	str	r0, [sp, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f1a1 0404 	sub.w	r4, r1, #4
 8001fb2:	bfb8      	it	lt
 8001fb4:	18e4      	addlt	r4, r4, r3
 8001fb6:	f7ff ffe7 	bl	8001f88 <__malloc_lock>
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <_free_r+0x9c>)
 8001fbc:	9801      	ldr	r0, [sp, #4]
 8001fbe:	6813      	ldr	r3, [r2, #0]
 8001fc0:	4615      	mov	r5, r2
 8001fc2:	b933      	cbnz	r3, 8001fd2 <_free_r+0x32>
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	6014      	str	r4, [r2, #0]
 8001fc8:	b003      	add	sp, #12
 8001fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fce:	f7ff bfe1 	b.w	8001f94 <__malloc_unlock>
 8001fd2:	42a3      	cmp	r3, r4
 8001fd4:	d90b      	bls.n	8001fee <_free_r+0x4e>
 8001fd6:	6821      	ldr	r1, [r4, #0]
 8001fd8:	1862      	adds	r2, r4, r1
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	bf04      	itt	eq
 8001fde:	681a      	ldreq	r2, [r3, #0]
 8001fe0:	685b      	ldreq	r3, [r3, #4]
 8001fe2:	6063      	str	r3, [r4, #4]
 8001fe4:	bf04      	itt	eq
 8001fe6:	1852      	addeq	r2, r2, r1
 8001fe8:	6022      	streq	r2, [r4, #0]
 8001fea:	602c      	str	r4, [r5, #0]
 8001fec:	e7ec      	b.n	8001fc8 <_free_r+0x28>
 8001fee:	461a      	mov	r2, r3
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	b10b      	cbz	r3, 8001ff8 <_free_r+0x58>
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	d9fa      	bls.n	8001fee <_free_r+0x4e>
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	1855      	adds	r5, r2, r1
 8001ffc:	42a5      	cmp	r5, r4
 8001ffe:	d10b      	bne.n	8002018 <_free_r+0x78>
 8002000:	6824      	ldr	r4, [r4, #0]
 8002002:	4421      	add	r1, r4
 8002004:	1854      	adds	r4, r2, r1
 8002006:	42a3      	cmp	r3, r4
 8002008:	6011      	str	r1, [r2, #0]
 800200a:	d1dd      	bne.n	8001fc8 <_free_r+0x28>
 800200c:	681c      	ldr	r4, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	6053      	str	r3, [r2, #4]
 8002012:	4421      	add	r1, r4
 8002014:	6011      	str	r1, [r2, #0]
 8002016:	e7d7      	b.n	8001fc8 <_free_r+0x28>
 8002018:	d902      	bls.n	8002020 <_free_r+0x80>
 800201a:	230c      	movs	r3, #12
 800201c:	6003      	str	r3, [r0, #0]
 800201e:	e7d3      	b.n	8001fc8 <_free_r+0x28>
 8002020:	6825      	ldr	r5, [r4, #0]
 8002022:	1961      	adds	r1, r4, r5
 8002024:	428b      	cmp	r3, r1
 8002026:	bf04      	itt	eq
 8002028:	6819      	ldreq	r1, [r3, #0]
 800202a:	685b      	ldreq	r3, [r3, #4]
 800202c:	6063      	str	r3, [r4, #4]
 800202e:	bf04      	itt	eq
 8002030:	1949      	addeq	r1, r1, r5
 8002032:	6021      	streq	r1, [r4, #0]
 8002034:	6054      	str	r4, [r2, #4]
 8002036:	e7c7      	b.n	8001fc8 <_free_r+0x28>
 8002038:	b003      	add	sp, #12
 800203a:	bd30      	pop	{r4, r5, pc}
 800203c:	200004ac 	.word	0x200004ac

08002040 <_realloc_r>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	4607      	mov	r7, r0
 8002044:	4614      	mov	r4, r2
 8002046:	460e      	mov	r6, r1
 8002048:	b921      	cbnz	r1, 8002054 <_realloc_r+0x14>
 800204a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800204e:	4611      	mov	r1, r2
 8002050:	f7ff b860 	b.w	8001114 <_malloc_r>
 8002054:	b922      	cbnz	r2, 8002060 <_realloc_r+0x20>
 8002056:	f7ff ffa3 	bl	8001fa0 <_free_r>
 800205a:	4625      	mov	r5, r4
 800205c:	4628      	mov	r0, r5
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002060:	f000 f848 	bl	80020f4 <_malloc_usable_size_r>
 8002064:	42a0      	cmp	r0, r4
 8002066:	d20f      	bcs.n	8002088 <_realloc_r+0x48>
 8002068:	4621      	mov	r1, r4
 800206a:	4638      	mov	r0, r7
 800206c:	f7ff f852 	bl	8001114 <_malloc_r>
 8002070:	4605      	mov	r5, r0
 8002072:	2800      	cmp	r0, #0
 8002074:	d0f2      	beq.n	800205c <_realloc_r+0x1c>
 8002076:	4631      	mov	r1, r6
 8002078:	4622      	mov	r2, r4
 800207a:	f7ff ff5d 	bl	8001f38 <memcpy>
 800207e:	4631      	mov	r1, r6
 8002080:	4638      	mov	r0, r7
 8002082:	f7ff ff8d 	bl	8001fa0 <_free_r>
 8002086:	e7e9      	b.n	800205c <_realloc_r+0x1c>
 8002088:	4635      	mov	r5, r6
 800208a:	e7e7      	b.n	800205c <_realloc_r+0x1c>

0800208c <_read_r>:
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	4d07      	ldr	r5, [pc, #28]	; (80020ac <_read_r+0x20>)
 8002090:	4604      	mov	r4, r0
 8002092:	4608      	mov	r0, r1
 8002094:	4611      	mov	r1, r2
 8002096:	2200      	movs	r2, #0
 8002098:	602a      	str	r2, [r5, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	f7fe fe02 	bl	8000ca4 <_read>
 80020a0:	1c43      	adds	r3, r0, #1
 80020a2:	d102      	bne.n	80020aa <_read_r+0x1e>
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	b103      	cbz	r3, 80020aa <_read_r+0x1e>
 80020a8:	6023      	str	r3, [r4, #0]
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	20000cf0 	.word	0x20000cf0

080020b0 <_fstat_r>:
 80020b0:	b538      	push	{r3, r4, r5, lr}
 80020b2:	4d07      	ldr	r5, [pc, #28]	; (80020d0 <_fstat_r+0x20>)
 80020b4:	2300      	movs	r3, #0
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	602b      	str	r3, [r5, #0]
 80020be:	f7fe fe36 	bl	8000d2e <_fstat>
 80020c2:	1c43      	adds	r3, r0, #1
 80020c4:	d102      	bne.n	80020cc <_fstat_r+0x1c>
 80020c6:	682b      	ldr	r3, [r5, #0]
 80020c8:	b103      	cbz	r3, 80020cc <_fstat_r+0x1c>
 80020ca:	6023      	str	r3, [r4, #0]
 80020cc:	bd38      	pop	{r3, r4, r5, pc}
 80020ce:	bf00      	nop
 80020d0:	20000cf0 	.word	0x20000cf0

080020d4 <_isatty_r>:
 80020d4:	b538      	push	{r3, r4, r5, lr}
 80020d6:	4d06      	ldr	r5, [pc, #24]	; (80020f0 <_isatty_r+0x1c>)
 80020d8:	2300      	movs	r3, #0
 80020da:	4604      	mov	r4, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	f7fe fe35 	bl	8000d4e <_isatty>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d102      	bne.n	80020ee <_isatty_r+0x1a>
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	b103      	cbz	r3, 80020ee <_isatty_r+0x1a>
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	20000cf0 	.word	0x20000cf0

080020f4 <_malloc_usable_size_r>:
 80020f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f8:	1f18      	subs	r0, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfbc      	itt	lt
 80020fe:	580b      	ldrlt	r3, [r1, r0]
 8002100:	18c0      	addlt	r0, r0, r3
 8002102:	4770      	bx	lr

08002104 <_init>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	bf00      	nop
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr

08002110 <_fini>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	bf00      	nop
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr
